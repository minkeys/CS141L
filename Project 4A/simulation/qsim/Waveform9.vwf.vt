// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/20/2015 08:18:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CS141L
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CS141L_vlg_sample_tst(
	clk,
	labelPassButton,
	start,
	startAddress,
	zero,
	sampler_tx
);
input  clk;
input  labelPassButton;
input  start;
input [7:0] startAddress;
input  zero;
output sampler_tx;

reg sample;
time current_time;
always @(clk or labelPassButton or start or startAddress or zero)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CS141L_vlg_check_tst (
	addr,
	aluIn0,
	aluIn1,
	aluRes,
	clock_out,
	currentpc,
	cycleCounter,
	data,
	halt_out,
	instruction_value,
	opcode_out,
	orOut,
	outPCResetFlag,
	ramOut,
	val,
	sampler_rx
);
input [7:0] addr;
input [7:0] aluIn0;
input [7:0] aluIn1;
input [7:0] aluRes;
input  clock_out;
input [7:0] currentpc;
input [15:0] cycleCounter;
input [7:0] data;
input  halt_out;
input [7:0] instruction_value;
input [3:0] opcode_out;
input  orOut;
input  outPCResetFlag;
input [7:0] ramOut;
input [7:0] val;
input sampler_rx;

reg [7:0] addr_expected;
reg [7:0] aluIn0_expected;
reg [7:0] aluIn1_expected;
reg [7:0] aluRes_expected;
reg  clock_out_expected;
reg [7:0] currentpc_expected;
reg [15:0] cycleCounter_expected;
reg [7:0] data_expected;
reg  halt_out_expected;
reg [7:0] instruction_value_expected;
reg [3:0] opcode_out_expected;
reg  orOut_expected;
reg  outPCResetFlag_expected;
reg [7:0] ramOut_expected;
reg [7:0] val_expected;

reg [7:0] addr_prev;
reg [7:0] aluIn0_prev;
reg [7:0] aluIn1_prev;
reg [7:0] aluRes_prev;
reg  clock_out_prev;
reg [7:0] currentpc_prev;
reg [15:0] cycleCounter_prev;
reg [7:0] data_prev;
reg  halt_out_prev;
reg [7:0] instruction_value_prev;
reg [3:0] opcode_out_prev;
reg  orOut_prev;
reg  outPCResetFlag_prev;
reg [7:0] ramOut_prev;
reg [7:0] val_prev;

reg [7:0] addr_expected_prev;
reg [7:0] aluIn0_expected_prev;
reg [7:0] aluIn1_expected_prev;
reg [7:0] aluRes_expected_prev;
reg  clock_out_expected_prev;
reg [7:0] currentpc_expected_prev;
reg [15:0] cycleCounter_expected_prev;
reg [7:0] data_expected_prev;
reg  halt_out_expected_prev;
reg [7:0] instruction_value_expected_prev;
reg [3:0] opcode_out_expected_prev;
reg  orOut_expected_prev;
reg  outPCResetFlag_expected_prev;
reg [7:0] ramOut_expected_prev;
reg [7:0] val_expected_prev;

reg [7:0] last_addr_exp;
reg [7:0] last_aluIn0_exp;
reg [7:0] last_aluIn1_exp;
reg [7:0] last_aluRes_exp;
reg  last_clock_out_exp;
reg [7:0] last_currentpc_exp;
reg [15:0] last_cycleCounter_exp;
reg [7:0] last_data_exp;
reg  last_halt_out_exp;
reg [7:0] last_instruction_value_exp;
reg [3:0] last_opcode_out_exp;
reg  last_orOut_exp;
reg  last_outPCResetFlag_exp;
reg [7:0] last_ramOut_exp;
reg [7:0] last_val_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	addr_prev = addr;
	aluIn0_prev = aluIn0;
	aluIn1_prev = aluIn1;
	aluRes_prev = aluRes;
	clock_out_prev = clock_out;
	currentpc_prev = currentpc;
	cycleCounter_prev = cycleCounter;
	data_prev = data;
	halt_out_prev = halt_out;
	instruction_value_prev = instruction_value;
	opcode_out_prev = opcode_out;
	orOut_prev = orOut;
	outPCResetFlag_prev = outPCResetFlag;
	ramOut_prev = ramOut;
	val_prev = val;
end

// update expected /o prevs

always @(trigger)
begin
	addr_expected_prev = addr_expected;
	aluIn0_expected_prev = aluIn0_expected;
	aluIn1_expected_prev = aluIn1_expected;
	aluRes_expected_prev = aluRes_expected;
	clock_out_expected_prev = clock_out_expected;
	currentpc_expected_prev = currentpc_expected;
	cycleCounter_expected_prev = cycleCounter_expected;
	data_expected_prev = data_expected;
	halt_out_expected_prev = halt_out_expected;
	instruction_value_expected_prev = instruction_value_expected;
	opcode_out_expected_prev = opcode_out_expected;
	orOut_expected_prev = orOut_expected;
	outPCResetFlag_expected_prev = outPCResetFlag_expected;
	ramOut_expected_prev = ramOut_expected;
	val_expected_prev = val_expected;
end



// expected clock_out
initial
begin
	clock_out_expected = 1'bX;
	clock_out_expected = #999000 1'b0;
end 
// expected currentpc[ 7 ]
initial
begin
	currentpc_expected[7] = 1'bX;
	currentpc_expected[7] = #999000 1'b0;
end 
// expected currentpc[ 6 ]
initial
begin
	currentpc_expected[6] = 1'bX;
	currentpc_expected[6] = #999000 1'b0;
end 
// expected currentpc[ 5 ]
initial
begin
	currentpc_expected[5] = 1'bX;
	currentpc_expected[5] = #999000 1'b0;
end 
// expected currentpc[ 4 ]
initial
begin
	currentpc_expected[4] = 1'bX;
	currentpc_expected[4] = #999000 1'b0;
end 
// expected currentpc[ 3 ]
initial
begin
	currentpc_expected[3] = 1'bX;
	currentpc_expected[3] = #999000 1'b0;
end 
// expected currentpc[ 2 ]
initial
begin
	currentpc_expected[2] = 1'bX;
	currentpc_expected[2] = #999000 1'b0;
end 
// expected currentpc[ 1 ]
initial
begin
	currentpc_expected[1] = 1'bX;
	currentpc_expected[1] = #999000 1'b0;
end 
// expected currentpc[ 0 ]
initial
begin
	currentpc_expected[0] = 1'bX;
	currentpc_expected[0] = #999000 1'b0;
end 

// expected halt_out
initial
begin
	halt_out_expected = 1'bX;
	halt_out_expected = #999000 1'b0;
end 
// expected instruction_value[ 7 ]
initial
begin
	instruction_value_expected[7] = 1'bX;
	instruction_value_expected[7] = #999000 1'b0;
end 
// expected instruction_value[ 6 ]
initial
begin
	instruction_value_expected[6] = 1'bX;
	instruction_value_expected[6] = #999000 1'b0;
end 
// expected instruction_value[ 5 ]
initial
begin
	instruction_value_expected[5] = 1'bX;
	instruction_value_expected[5] = #999000 1'b0;
end 
// expected instruction_value[ 4 ]
initial
begin
	instruction_value_expected[4] = 1'bX;
	instruction_value_expected[4] = #999000 1'b0;
end 
// expected instruction_value[ 3 ]
initial
begin
	instruction_value_expected[3] = 1'bX;
	instruction_value_expected[3] = #999000 1'b0;
end 
// expected instruction_value[ 2 ]
initial
begin
	instruction_value_expected[2] = 1'bX;
	instruction_value_expected[2] = #999000 1'b0;
end 
// expected instruction_value[ 1 ]
initial
begin
	instruction_value_expected[1] = 1'bX;
	instruction_value_expected[1] = #999000 1'b0;
end 
// expected instruction_value[ 0 ]
initial
begin
	instruction_value_expected[0] = 1'bX;
	instruction_value_expected[0] = #999000 1'b0;
end 
// expected opcode_out[ 3 ]
initial
begin
	opcode_out_expected[3] = 1'bX;
	opcode_out_expected[3] = #999000 1'b0;
end 
// expected opcode_out[ 2 ]
initial
begin
	opcode_out_expected[2] = 1'bX;
	opcode_out_expected[2] = #999000 1'b0;
end 
// expected opcode_out[ 1 ]
initial
begin
	opcode_out_expected[1] = 1'bX;
	opcode_out_expected[1] = #999000 1'b0;
end 
// expected opcode_out[ 0 ]
initial
begin
	opcode_out_expected[0] = 1'bX;
	opcode_out_expected[0] = #999000 1'b0;
end 

// expected outPCResetFlag
initial
begin
	outPCResetFlag_expected = 1'bX;
	outPCResetFlag_expected = #999000 1'b0;
end 

// expected orOut
initial
begin
	orOut_expected = 1'bX;
	orOut_expected = #999000 1'b0;
end 
// expected cycleCounter[ 15 ]
initial
begin
	cycleCounter_expected[15] = 1'bX;
	cycleCounter_expected[15] = #999000 1'b0;
end 
// expected cycleCounter[ 14 ]
initial
begin
	cycleCounter_expected[14] = 1'bX;
	cycleCounter_expected[14] = #999000 1'b0;
end 
// expected cycleCounter[ 13 ]
initial
begin
	cycleCounter_expected[13] = 1'bX;
	cycleCounter_expected[13] = #999000 1'b0;
end 
// expected cycleCounter[ 12 ]
initial
begin
	cycleCounter_expected[12] = 1'bX;
	cycleCounter_expected[12] = #999000 1'b0;
end 
// expected cycleCounter[ 11 ]
initial
begin
	cycleCounter_expected[11] = 1'bX;
	cycleCounter_expected[11] = #999000 1'b0;
end 
// expected cycleCounter[ 10 ]
initial
begin
	cycleCounter_expected[10] = 1'bX;
	cycleCounter_expected[10] = #999000 1'b0;
end 
// expected cycleCounter[ 9 ]
initial
begin
	cycleCounter_expected[9] = 1'bX;
	cycleCounter_expected[9] = #999000 1'b0;
end 
// expected cycleCounter[ 8 ]
initial
begin
	cycleCounter_expected[8] = 1'bX;
	cycleCounter_expected[8] = #999000 1'b0;
end 
// expected cycleCounter[ 7 ]
initial
begin
	cycleCounter_expected[7] = 1'bX;
	cycleCounter_expected[7] = #999000 1'b0;
end 
// expected cycleCounter[ 6 ]
initial
begin
	cycleCounter_expected[6] = 1'bX;
	cycleCounter_expected[6] = #999000 1'b0;
end 
// expected cycleCounter[ 5 ]
initial
begin
	cycleCounter_expected[5] = 1'bX;
	cycleCounter_expected[5] = #999000 1'b0;
end 
// expected cycleCounter[ 4 ]
initial
begin
	cycleCounter_expected[4] = 1'bX;
	cycleCounter_expected[4] = #999000 1'b0;
end 
// expected cycleCounter[ 3 ]
initial
begin
	cycleCounter_expected[3] = 1'bX;
	cycleCounter_expected[3] = #999000 1'b0;
end 
// expected cycleCounter[ 2 ]
initial
begin
	cycleCounter_expected[2] = 1'bX;
	cycleCounter_expected[2] = #999000 1'b0;
end 
// expected cycleCounter[ 1 ]
initial
begin
	cycleCounter_expected[1] = 1'bX;
	cycleCounter_expected[1] = #999000 1'b0;
end 
// expected cycleCounter[ 0 ]
initial
begin
	cycleCounter_expected[0] = 1'bX;
	cycleCounter_expected[0] = #999000 1'b0;
end 
// expected addr[ 7 ]
initial
begin
	addr_expected[7] = 1'bX;
end 
// expected addr[ 6 ]
initial
begin
	addr_expected[6] = 1'bX;
end 
// expected addr[ 5 ]
initial
begin
	addr_expected[5] = 1'bX;
end 
// expected addr[ 4 ]
initial
begin
	addr_expected[4] = 1'bX;
end 
// expected addr[ 3 ]
initial
begin
	addr_expected[3] = 1'bX;
end 
// expected addr[ 2 ]
initial
begin
	addr_expected[2] = 1'bX;
end 
// expected addr[ 1 ]
initial
begin
	addr_expected[1] = 1'bX;
end 
// expected addr[ 0 ]
initial
begin
	addr_expected[0] = 1'bX;
end 
// expected aluIn0[ 7 ]
initial
begin
	aluIn0_expected[7] = 1'bX;
end 
// expected aluIn0[ 6 ]
initial
begin
	aluIn0_expected[6] = 1'bX;
end 
// expected aluIn0[ 5 ]
initial
begin
	aluIn0_expected[5] = 1'bX;
end 
// expected aluIn0[ 4 ]
initial
begin
	aluIn0_expected[4] = 1'bX;
end 
// expected aluIn0[ 3 ]
initial
begin
	aluIn0_expected[3] = 1'bX;
end 
// expected aluIn0[ 2 ]
initial
begin
	aluIn0_expected[2] = 1'bX;
end 
// expected aluIn0[ 1 ]
initial
begin
	aluIn0_expected[1] = 1'bX;
end 
// expected aluIn0[ 0 ]
initial
begin
	aluIn0_expected[0] = 1'bX;
end 
// expected aluIn1[ 7 ]
initial
begin
	aluIn1_expected[7] = 1'bX;
end 
// expected aluIn1[ 6 ]
initial
begin
	aluIn1_expected[6] = 1'bX;
end 
// expected aluIn1[ 5 ]
initial
begin
	aluIn1_expected[5] = 1'bX;
end 
// expected aluIn1[ 4 ]
initial
begin
	aluIn1_expected[4] = 1'bX;
end 
// expected aluIn1[ 3 ]
initial
begin
	aluIn1_expected[3] = 1'bX;
end 
// expected aluIn1[ 2 ]
initial
begin
	aluIn1_expected[2] = 1'bX;
end 
// expected aluIn1[ 1 ]
initial
begin
	aluIn1_expected[1] = 1'bX;
end 
// expected aluIn1[ 0 ]
initial
begin
	aluIn1_expected[0] = 1'bX;
end 
// expected aluRes[ 7 ]
initial
begin
	aluRes_expected[7] = 1'bX;
end 
// expected aluRes[ 6 ]
initial
begin
	aluRes_expected[6] = 1'bX;
end 
// expected aluRes[ 5 ]
initial
begin
	aluRes_expected[5] = 1'bX;
end 
// expected aluRes[ 4 ]
initial
begin
	aluRes_expected[4] = 1'bX;
end 
// expected aluRes[ 3 ]
initial
begin
	aluRes_expected[3] = 1'bX;
end 
// expected aluRes[ 2 ]
initial
begin
	aluRes_expected[2] = 1'bX;
end 
// expected aluRes[ 1 ]
initial
begin
	aluRes_expected[1] = 1'bX;
end 
// expected aluRes[ 0 ]
initial
begin
	aluRes_expected[0] = 1'bX;
end 
// expected data[ 7 ]
initial
begin
	data_expected[7] = 1'bX;
end 
// expected data[ 6 ]
initial
begin
	data_expected[6] = 1'bX;
end 
// expected data[ 5 ]
initial
begin
	data_expected[5] = 1'bX;
end 
// expected data[ 4 ]
initial
begin
	data_expected[4] = 1'bX;
end 
// expected data[ 3 ]
initial
begin
	data_expected[3] = 1'bX;
end 
// expected data[ 2 ]
initial
begin
	data_expected[2] = 1'bX;
end 
// expected data[ 1 ]
initial
begin
	data_expected[1] = 1'bX;
end 
// expected data[ 0 ]
initial
begin
	data_expected[0] = 1'bX;
end 
// expected ramOut[ 7 ]
initial
begin
	ramOut_expected[7] = 1'bX;
end 
// expected ramOut[ 6 ]
initial
begin
	ramOut_expected[6] = 1'bX;
end 
// expected ramOut[ 5 ]
initial
begin
	ramOut_expected[5] = 1'bX;
end 
// expected ramOut[ 4 ]
initial
begin
	ramOut_expected[4] = 1'bX;
end 
// expected ramOut[ 3 ]
initial
begin
	ramOut_expected[3] = 1'bX;
end 
// expected ramOut[ 2 ]
initial
begin
	ramOut_expected[2] = 1'bX;
end 
// expected ramOut[ 1 ]
initial
begin
	ramOut_expected[1] = 1'bX;
end 
// expected ramOut[ 0 ]
initial
begin
	ramOut_expected[0] = 1'bX;
end 
// expected val[ 7 ]
initial
begin
	val_expected[7] = 1'bX;
end 
// expected val[ 6 ]
initial
begin
	val_expected[6] = 1'bX;
end 
// expected val[ 5 ]
initial
begin
	val_expected[5] = 1'bX;
end 
// expected val[ 4 ]
initial
begin
	val_expected[4] = 1'bX;
end 
// expected val[ 3 ]
initial
begin
	val_expected[3] = 1'bX;
end 
// expected val[ 2 ]
initial
begin
	val_expected[2] = 1'bX;
end 
// expected val[ 1 ]
initial
begin
	val_expected[1] = 1'bX;
end 
// expected val[ 0 ]
initial
begin
	val_expected[0] = 1'bX;
end 
// generate trigger
always @(addr_expected or addr or aluIn0_expected or aluIn0 or aluIn1_expected or aluIn1 or aluRes_expected or aluRes or clock_out_expected or clock_out or currentpc_expected or currentpc or cycleCounter_expected or cycleCounter or data_expected or data or halt_out_expected or halt_out or instruction_value_expected or instruction_value or opcode_out_expected or opcode_out or orOut_expected or orOut or outPCResetFlag_expected or outPCResetFlag or ramOut_expected or ramOut or val_expected or val)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addr = %b | expected aluIn0 = %b | expected aluIn1 = %b | expected aluRes = %b | expected clock_out = %b | expected currentpc = %b | expected cycleCounter = %b | expected data = %b | expected halt_out = %b | expected instruction_value = %b | expected opcode_out = %b | expected orOut = %b | expected outPCResetFlag = %b | expected ramOut = %b | expected val = %b | ",addr_expected_prev,aluIn0_expected_prev,aluIn1_expected_prev,aluRes_expected_prev,clock_out_expected_prev,currentpc_expected_prev,cycleCounter_expected_prev,data_expected_prev,halt_out_expected_prev,instruction_value_expected_prev,opcode_out_expected_prev,orOut_expected_prev,outPCResetFlag_expected_prev,ramOut_expected_prev,val_expected_prev);
	$display("| real addr = %b | real aluIn0 = %b | real aluIn1 = %b | real aluRes = %b | real clock_out = %b | real currentpc = %b | real cycleCounter = %b | real data = %b | real halt_out = %b | real instruction_value = %b | real opcode_out = %b | real orOut = %b | real outPCResetFlag = %b | real ramOut = %b | real val = %b | ",addr_prev,aluIn0_prev,aluIn1_prev,aluRes_prev,clock_out_prev,currentpc_prev,cycleCounter_prev,data_prev,halt_out_prev,instruction_value_prev,opcode_out_prev,orOut_prev,outPCResetFlag_prev,ramOut_prev,val_prev);
`endif
	if (
		( addr_expected_prev[0] !== 1'bx ) && ( addr_prev[0] !== addr_expected_prev[0] )
		&& ((addr_expected_prev[0] !== last_addr_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[0] = addr_expected_prev[0];
	end
	if (
		( addr_expected_prev[1] !== 1'bx ) && ( addr_prev[1] !== addr_expected_prev[1] )
		&& ((addr_expected_prev[1] !== last_addr_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[1] = addr_expected_prev[1];
	end
	if (
		( addr_expected_prev[2] !== 1'bx ) && ( addr_prev[2] !== addr_expected_prev[2] )
		&& ((addr_expected_prev[2] !== last_addr_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[2] = addr_expected_prev[2];
	end
	if (
		( addr_expected_prev[3] !== 1'bx ) && ( addr_prev[3] !== addr_expected_prev[3] )
		&& ((addr_expected_prev[3] !== last_addr_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[3] = addr_expected_prev[3];
	end
	if (
		( addr_expected_prev[4] !== 1'bx ) && ( addr_prev[4] !== addr_expected_prev[4] )
		&& ((addr_expected_prev[4] !== last_addr_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[4] = addr_expected_prev[4];
	end
	if (
		( addr_expected_prev[5] !== 1'bx ) && ( addr_prev[5] !== addr_expected_prev[5] )
		&& ((addr_expected_prev[5] !== last_addr_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[5] = addr_expected_prev[5];
	end
	if (
		( addr_expected_prev[6] !== 1'bx ) && ( addr_prev[6] !== addr_expected_prev[6] )
		&& ((addr_expected_prev[6] !== last_addr_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[6] = addr_expected_prev[6];
	end
	if (
		( addr_expected_prev[7] !== 1'bx ) && ( addr_prev[7] !== addr_expected_prev[7] )
		&& ((addr_expected_prev[7] !== last_addr_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[7] = addr_expected_prev[7];
	end
	if (
		( aluIn0_expected_prev[0] !== 1'bx ) && ( aluIn0_prev[0] !== aluIn0_expected_prev[0] )
		&& ((aluIn0_expected_prev[0] !== last_aluIn0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluIn0_exp[0] = aluIn0_expected_prev[0];
	end
	if (
		( aluIn0_expected_prev[1] !== 1'bx ) && ( aluIn0_prev[1] !== aluIn0_expected_prev[1] )
		&& ((aluIn0_expected_prev[1] !== last_aluIn0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluIn0_exp[1] = aluIn0_expected_prev[1];
	end
	if (
		( aluIn0_expected_prev[2] !== 1'bx ) && ( aluIn0_prev[2] !== aluIn0_expected_prev[2] )
		&& ((aluIn0_expected_prev[2] !== last_aluIn0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluIn0_exp[2] = aluIn0_expected_prev[2];
	end
	if (
		( aluIn0_expected_prev[3] !== 1'bx ) && ( aluIn0_prev[3] !== aluIn0_expected_prev[3] )
		&& ((aluIn0_expected_prev[3] !== last_aluIn0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluIn0_exp[3] = aluIn0_expected_prev[3];
	end
	if (
		( aluIn0_expected_prev[4] !== 1'bx ) && ( aluIn0_prev[4] !== aluIn0_expected_prev[4] )
		&& ((aluIn0_expected_prev[4] !== last_aluIn0_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluIn0_exp[4] = aluIn0_expected_prev[4];
	end
	if (
		( aluIn0_expected_prev[5] !== 1'bx ) && ( aluIn0_prev[5] !== aluIn0_expected_prev[5] )
		&& ((aluIn0_expected_prev[5] !== last_aluIn0_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluIn0_exp[5] = aluIn0_expected_prev[5];
	end
	if (
		( aluIn0_expected_prev[6] !== 1'bx ) && ( aluIn0_prev[6] !== aluIn0_expected_prev[6] )
		&& ((aluIn0_expected_prev[6] !== last_aluIn0_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluIn0_exp[6] = aluIn0_expected_prev[6];
	end
	if (
		( aluIn0_expected_prev[7] !== 1'bx ) && ( aluIn0_prev[7] !== aluIn0_expected_prev[7] )
		&& ((aluIn0_expected_prev[7] !== last_aluIn0_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluIn0_exp[7] = aluIn0_expected_prev[7];
	end
	if (
		( aluIn1_expected_prev[0] !== 1'bx ) && ( aluIn1_prev[0] !== aluIn1_expected_prev[0] )
		&& ((aluIn1_expected_prev[0] !== last_aluIn1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn1_expected_prev);
		$display ("     Real value = %b", aluIn1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluIn1_exp[0] = aluIn1_expected_prev[0];
	end
	if (
		( aluIn1_expected_prev[1] !== 1'bx ) && ( aluIn1_prev[1] !== aluIn1_expected_prev[1] )
		&& ((aluIn1_expected_prev[1] !== last_aluIn1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn1_expected_prev);
		$display ("     Real value = %b", aluIn1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluIn1_exp[1] = aluIn1_expected_prev[1];
	end
	if (
		( aluIn1_expected_prev[2] !== 1'bx ) && ( aluIn1_prev[2] !== aluIn1_expected_prev[2] )
		&& ((aluIn1_expected_prev[2] !== last_aluIn1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn1_expected_prev);
		$display ("     Real value = %b", aluIn1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluIn1_exp[2] = aluIn1_expected_prev[2];
	end
	if (
		( aluIn1_expected_prev[3] !== 1'bx ) && ( aluIn1_prev[3] !== aluIn1_expected_prev[3] )
		&& ((aluIn1_expected_prev[3] !== last_aluIn1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn1_expected_prev);
		$display ("     Real value = %b", aluIn1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluIn1_exp[3] = aluIn1_expected_prev[3];
	end
	if (
		( aluIn1_expected_prev[4] !== 1'bx ) && ( aluIn1_prev[4] !== aluIn1_expected_prev[4] )
		&& ((aluIn1_expected_prev[4] !== last_aluIn1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn1_expected_prev);
		$display ("     Real value = %b", aluIn1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluIn1_exp[4] = aluIn1_expected_prev[4];
	end
	if (
		( aluIn1_expected_prev[5] !== 1'bx ) && ( aluIn1_prev[5] !== aluIn1_expected_prev[5] )
		&& ((aluIn1_expected_prev[5] !== last_aluIn1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn1_expected_prev);
		$display ("     Real value = %b", aluIn1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluIn1_exp[5] = aluIn1_expected_prev[5];
	end
	if (
		( aluIn1_expected_prev[6] !== 1'bx ) && ( aluIn1_prev[6] !== aluIn1_expected_prev[6] )
		&& ((aluIn1_expected_prev[6] !== last_aluIn1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn1_expected_prev);
		$display ("     Real value = %b", aluIn1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluIn1_exp[6] = aluIn1_expected_prev[6];
	end
	if (
		( aluIn1_expected_prev[7] !== 1'bx ) && ( aluIn1_prev[7] !== aluIn1_expected_prev[7] )
		&& ((aluIn1_expected_prev[7] !== last_aluIn1_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn1_expected_prev);
		$display ("     Real value = %b", aluIn1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluIn1_exp[7] = aluIn1_expected_prev[7];
	end
	if (
		( aluRes_expected_prev[0] !== 1'bx ) && ( aluRes_prev[0] !== aluRes_expected_prev[0] )
		&& ((aluRes_expected_prev[0] !== last_aluRes_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluRes[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluRes_expected_prev);
		$display ("     Real value = %b", aluRes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aluRes_exp[0] = aluRes_expected_prev[0];
	end
	if (
		( aluRes_expected_prev[1] !== 1'bx ) && ( aluRes_prev[1] !== aluRes_expected_prev[1] )
		&& ((aluRes_expected_prev[1] !== last_aluRes_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluRes[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluRes_expected_prev);
		$display ("     Real value = %b", aluRes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aluRes_exp[1] = aluRes_expected_prev[1];
	end
	if (
		( aluRes_expected_prev[2] !== 1'bx ) && ( aluRes_prev[2] !== aluRes_expected_prev[2] )
		&& ((aluRes_expected_prev[2] !== last_aluRes_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluRes[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluRes_expected_prev);
		$display ("     Real value = %b", aluRes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aluRes_exp[2] = aluRes_expected_prev[2];
	end
	if (
		( aluRes_expected_prev[3] !== 1'bx ) && ( aluRes_prev[3] !== aluRes_expected_prev[3] )
		&& ((aluRes_expected_prev[3] !== last_aluRes_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluRes[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluRes_expected_prev);
		$display ("     Real value = %b", aluRes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aluRes_exp[3] = aluRes_expected_prev[3];
	end
	if (
		( aluRes_expected_prev[4] !== 1'bx ) && ( aluRes_prev[4] !== aluRes_expected_prev[4] )
		&& ((aluRes_expected_prev[4] !== last_aluRes_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluRes[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluRes_expected_prev);
		$display ("     Real value = %b", aluRes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aluRes_exp[4] = aluRes_expected_prev[4];
	end
	if (
		( aluRes_expected_prev[5] !== 1'bx ) && ( aluRes_prev[5] !== aluRes_expected_prev[5] )
		&& ((aluRes_expected_prev[5] !== last_aluRes_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluRes[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluRes_expected_prev);
		$display ("     Real value = %b", aluRes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aluRes_exp[5] = aluRes_expected_prev[5];
	end
	if (
		( aluRes_expected_prev[6] !== 1'bx ) && ( aluRes_prev[6] !== aluRes_expected_prev[6] )
		&& ((aluRes_expected_prev[6] !== last_aluRes_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluRes[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluRes_expected_prev);
		$display ("     Real value = %b", aluRes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aluRes_exp[6] = aluRes_expected_prev[6];
	end
	if (
		( aluRes_expected_prev[7] !== 1'bx ) && ( aluRes_prev[7] !== aluRes_expected_prev[7] )
		&& ((aluRes_expected_prev[7] !== last_aluRes_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluRes[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluRes_expected_prev);
		$display ("     Real value = %b", aluRes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aluRes_exp[7] = aluRes_expected_prev[7];
	end
	if (
		( clock_out_expected_prev !== 1'bx ) && ( clock_out_prev !== clock_out_expected_prev )
		&& ((clock_out_expected_prev !== last_clock_out_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_out_expected_prev);
		$display ("     Real value = %b", clock_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_clock_out_exp = clock_out_expected_prev;
	end
	if (
		( currentpc_expected_prev[0] !== 1'bx ) && ( currentpc_prev[0] !== currentpc_expected_prev[0] )
		&& ((currentpc_expected_prev[0] !== last_currentpc_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_currentpc_exp[0] = currentpc_expected_prev[0];
	end
	if (
		( currentpc_expected_prev[1] !== 1'bx ) && ( currentpc_prev[1] !== currentpc_expected_prev[1] )
		&& ((currentpc_expected_prev[1] !== last_currentpc_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_currentpc_exp[1] = currentpc_expected_prev[1];
	end
	if (
		( currentpc_expected_prev[2] !== 1'bx ) && ( currentpc_prev[2] !== currentpc_expected_prev[2] )
		&& ((currentpc_expected_prev[2] !== last_currentpc_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_currentpc_exp[2] = currentpc_expected_prev[2];
	end
	if (
		( currentpc_expected_prev[3] !== 1'bx ) && ( currentpc_prev[3] !== currentpc_expected_prev[3] )
		&& ((currentpc_expected_prev[3] !== last_currentpc_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_currentpc_exp[3] = currentpc_expected_prev[3];
	end
	if (
		( currentpc_expected_prev[4] !== 1'bx ) && ( currentpc_prev[4] !== currentpc_expected_prev[4] )
		&& ((currentpc_expected_prev[4] !== last_currentpc_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_currentpc_exp[4] = currentpc_expected_prev[4];
	end
	if (
		( currentpc_expected_prev[5] !== 1'bx ) && ( currentpc_prev[5] !== currentpc_expected_prev[5] )
		&& ((currentpc_expected_prev[5] !== last_currentpc_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_currentpc_exp[5] = currentpc_expected_prev[5];
	end
	if (
		( currentpc_expected_prev[6] !== 1'bx ) && ( currentpc_prev[6] !== currentpc_expected_prev[6] )
		&& ((currentpc_expected_prev[6] !== last_currentpc_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_currentpc_exp[6] = currentpc_expected_prev[6];
	end
	if (
		( currentpc_expected_prev[7] !== 1'bx ) && ( currentpc_prev[7] !== currentpc_expected_prev[7] )
		&& ((currentpc_expected_prev[7] !== last_currentpc_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_currentpc_exp[7] = currentpc_expected_prev[7];
	end
	if (
		( cycleCounter_expected_prev[0] !== 1'bx ) && ( cycleCounter_prev[0] !== cycleCounter_expected_prev[0] )
		&& ((cycleCounter_expected_prev[0] !== last_cycleCounter_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[0] = cycleCounter_expected_prev[0];
	end
	if (
		( cycleCounter_expected_prev[1] !== 1'bx ) && ( cycleCounter_prev[1] !== cycleCounter_expected_prev[1] )
		&& ((cycleCounter_expected_prev[1] !== last_cycleCounter_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[1] = cycleCounter_expected_prev[1];
	end
	if (
		( cycleCounter_expected_prev[2] !== 1'bx ) && ( cycleCounter_prev[2] !== cycleCounter_expected_prev[2] )
		&& ((cycleCounter_expected_prev[2] !== last_cycleCounter_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[2] = cycleCounter_expected_prev[2];
	end
	if (
		( cycleCounter_expected_prev[3] !== 1'bx ) && ( cycleCounter_prev[3] !== cycleCounter_expected_prev[3] )
		&& ((cycleCounter_expected_prev[3] !== last_cycleCounter_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[3] = cycleCounter_expected_prev[3];
	end
	if (
		( cycleCounter_expected_prev[4] !== 1'bx ) && ( cycleCounter_prev[4] !== cycleCounter_expected_prev[4] )
		&& ((cycleCounter_expected_prev[4] !== last_cycleCounter_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[4] = cycleCounter_expected_prev[4];
	end
	if (
		( cycleCounter_expected_prev[5] !== 1'bx ) && ( cycleCounter_prev[5] !== cycleCounter_expected_prev[5] )
		&& ((cycleCounter_expected_prev[5] !== last_cycleCounter_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[5] = cycleCounter_expected_prev[5];
	end
	if (
		( cycleCounter_expected_prev[6] !== 1'bx ) && ( cycleCounter_prev[6] !== cycleCounter_expected_prev[6] )
		&& ((cycleCounter_expected_prev[6] !== last_cycleCounter_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[6] = cycleCounter_expected_prev[6];
	end
	if (
		( cycleCounter_expected_prev[7] !== 1'bx ) && ( cycleCounter_prev[7] !== cycleCounter_expected_prev[7] )
		&& ((cycleCounter_expected_prev[7] !== last_cycleCounter_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[7] = cycleCounter_expected_prev[7];
	end
	if (
		( cycleCounter_expected_prev[8] !== 1'bx ) && ( cycleCounter_prev[8] !== cycleCounter_expected_prev[8] )
		&& ((cycleCounter_expected_prev[8] !== last_cycleCounter_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[8] = cycleCounter_expected_prev[8];
	end
	if (
		( cycleCounter_expected_prev[9] !== 1'bx ) && ( cycleCounter_prev[9] !== cycleCounter_expected_prev[9] )
		&& ((cycleCounter_expected_prev[9] !== last_cycleCounter_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[9] = cycleCounter_expected_prev[9];
	end
	if (
		( cycleCounter_expected_prev[10] !== 1'bx ) && ( cycleCounter_prev[10] !== cycleCounter_expected_prev[10] )
		&& ((cycleCounter_expected_prev[10] !== last_cycleCounter_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[10] = cycleCounter_expected_prev[10];
	end
	if (
		( cycleCounter_expected_prev[11] !== 1'bx ) && ( cycleCounter_prev[11] !== cycleCounter_expected_prev[11] )
		&& ((cycleCounter_expected_prev[11] !== last_cycleCounter_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[11] = cycleCounter_expected_prev[11];
	end
	if (
		( cycleCounter_expected_prev[12] !== 1'bx ) && ( cycleCounter_prev[12] !== cycleCounter_expected_prev[12] )
		&& ((cycleCounter_expected_prev[12] !== last_cycleCounter_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[12] = cycleCounter_expected_prev[12];
	end
	if (
		( cycleCounter_expected_prev[13] !== 1'bx ) && ( cycleCounter_prev[13] !== cycleCounter_expected_prev[13] )
		&& ((cycleCounter_expected_prev[13] !== last_cycleCounter_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[13] = cycleCounter_expected_prev[13];
	end
	if (
		( cycleCounter_expected_prev[14] !== 1'bx ) && ( cycleCounter_prev[14] !== cycleCounter_expected_prev[14] )
		&& ((cycleCounter_expected_prev[14] !== last_cycleCounter_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[14] = cycleCounter_expected_prev[14];
	end
	if (
		( cycleCounter_expected_prev[15] !== 1'bx ) && ( cycleCounter_prev[15] !== cycleCounter_expected_prev[15] )
		&& ((cycleCounter_expected_prev[15] !== last_cycleCounter_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cycleCounter_exp[15] = cycleCounter_expected_prev[15];
	end
	if (
		( data_expected_prev[0] !== 1'bx ) && ( data_prev[0] !== data_expected_prev[0] )
		&& ((data_expected_prev[0] !== last_data_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_exp[0] = data_expected_prev[0];
	end
	if (
		( data_expected_prev[1] !== 1'bx ) && ( data_prev[1] !== data_expected_prev[1] )
		&& ((data_expected_prev[1] !== last_data_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_exp[1] = data_expected_prev[1];
	end
	if (
		( data_expected_prev[2] !== 1'bx ) && ( data_prev[2] !== data_expected_prev[2] )
		&& ((data_expected_prev[2] !== last_data_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_exp[2] = data_expected_prev[2];
	end
	if (
		( data_expected_prev[3] !== 1'bx ) && ( data_prev[3] !== data_expected_prev[3] )
		&& ((data_expected_prev[3] !== last_data_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_exp[3] = data_expected_prev[3];
	end
	if (
		( data_expected_prev[4] !== 1'bx ) && ( data_prev[4] !== data_expected_prev[4] )
		&& ((data_expected_prev[4] !== last_data_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_exp[4] = data_expected_prev[4];
	end
	if (
		( data_expected_prev[5] !== 1'bx ) && ( data_prev[5] !== data_expected_prev[5] )
		&& ((data_expected_prev[5] !== last_data_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_exp[5] = data_expected_prev[5];
	end
	if (
		( data_expected_prev[6] !== 1'bx ) && ( data_prev[6] !== data_expected_prev[6] )
		&& ((data_expected_prev[6] !== last_data_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_exp[6] = data_expected_prev[6];
	end
	if (
		( data_expected_prev[7] !== 1'bx ) && ( data_prev[7] !== data_expected_prev[7] )
		&& ((data_expected_prev[7] !== last_data_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_data_exp[7] = data_expected_prev[7];
	end
	if (
		( halt_out_expected_prev !== 1'bx ) && ( halt_out_prev !== halt_out_expected_prev )
		&& ((halt_out_expected_prev !== last_halt_out_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port halt_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", halt_out_expected_prev);
		$display ("     Real value = %b", halt_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_halt_out_exp = halt_out_expected_prev;
	end
	if (
		( instruction_value_expected_prev[0] !== 1'bx ) && ( instruction_value_prev[0] !== instruction_value_expected_prev[0] )
		&& ((instruction_value_expected_prev[0] !== last_instruction_value_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_instruction_value_exp[0] = instruction_value_expected_prev[0];
	end
	if (
		( instruction_value_expected_prev[1] !== 1'bx ) && ( instruction_value_prev[1] !== instruction_value_expected_prev[1] )
		&& ((instruction_value_expected_prev[1] !== last_instruction_value_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_instruction_value_exp[1] = instruction_value_expected_prev[1];
	end
	if (
		( instruction_value_expected_prev[2] !== 1'bx ) && ( instruction_value_prev[2] !== instruction_value_expected_prev[2] )
		&& ((instruction_value_expected_prev[2] !== last_instruction_value_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_instruction_value_exp[2] = instruction_value_expected_prev[2];
	end
	if (
		( instruction_value_expected_prev[3] !== 1'bx ) && ( instruction_value_prev[3] !== instruction_value_expected_prev[3] )
		&& ((instruction_value_expected_prev[3] !== last_instruction_value_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_instruction_value_exp[3] = instruction_value_expected_prev[3];
	end
	if (
		( instruction_value_expected_prev[4] !== 1'bx ) && ( instruction_value_prev[4] !== instruction_value_expected_prev[4] )
		&& ((instruction_value_expected_prev[4] !== last_instruction_value_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_instruction_value_exp[4] = instruction_value_expected_prev[4];
	end
	if (
		( instruction_value_expected_prev[5] !== 1'bx ) && ( instruction_value_prev[5] !== instruction_value_expected_prev[5] )
		&& ((instruction_value_expected_prev[5] !== last_instruction_value_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_instruction_value_exp[5] = instruction_value_expected_prev[5];
	end
	if (
		( instruction_value_expected_prev[6] !== 1'bx ) && ( instruction_value_prev[6] !== instruction_value_expected_prev[6] )
		&& ((instruction_value_expected_prev[6] !== last_instruction_value_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_instruction_value_exp[6] = instruction_value_expected_prev[6];
	end
	if (
		( instruction_value_expected_prev[7] !== 1'bx ) && ( instruction_value_prev[7] !== instruction_value_expected_prev[7] )
		&& ((instruction_value_expected_prev[7] !== last_instruction_value_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_instruction_value_exp[7] = instruction_value_expected_prev[7];
	end
	if (
		( opcode_out_expected_prev[0] !== 1'bx ) && ( opcode_out_prev[0] !== opcode_out_expected_prev[0] )
		&& ((opcode_out_expected_prev[0] !== last_opcode_out_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_opcode_out_exp[0] = opcode_out_expected_prev[0];
	end
	if (
		( opcode_out_expected_prev[1] !== 1'bx ) && ( opcode_out_prev[1] !== opcode_out_expected_prev[1] )
		&& ((opcode_out_expected_prev[1] !== last_opcode_out_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_opcode_out_exp[1] = opcode_out_expected_prev[1];
	end
	if (
		( opcode_out_expected_prev[2] !== 1'bx ) && ( opcode_out_prev[2] !== opcode_out_expected_prev[2] )
		&& ((opcode_out_expected_prev[2] !== last_opcode_out_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_opcode_out_exp[2] = opcode_out_expected_prev[2];
	end
	if (
		( opcode_out_expected_prev[3] !== 1'bx ) && ( opcode_out_prev[3] !== opcode_out_expected_prev[3] )
		&& ((opcode_out_expected_prev[3] !== last_opcode_out_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_opcode_out_exp[3] = opcode_out_expected_prev[3];
	end
	if (
		( orOut_expected_prev !== 1'bx ) && ( orOut_prev !== orOut_expected_prev )
		&& ((orOut_expected_prev !== last_orOut_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port orOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", orOut_expected_prev);
		$display ("     Real value = %b", orOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_orOut_exp = orOut_expected_prev;
	end
	if (
		( outPCResetFlag_expected_prev !== 1'bx ) && ( outPCResetFlag_prev !== outPCResetFlag_expected_prev )
		&& ((outPCResetFlag_expected_prev !== last_outPCResetFlag_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outPCResetFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outPCResetFlag_expected_prev);
		$display ("     Real value = %b", outPCResetFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_outPCResetFlag_exp = outPCResetFlag_expected_prev;
	end
	if (
		( ramOut_expected_prev[0] !== 1'bx ) && ( ramOut_prev[0] !== ramOut_expected_prev[0] )
		&& ((ramOut_expected_prev[0] !== last_ramOut_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ramOut_exp[0] = ramOut_expected_prev[0];
	end
	if (
		( ramOut_expected_prev[1] !== 1'bx ) && ( ramOut_prev[1] !== ramOut_expected_prev[1] )
		&& ((ramOut_expected_prev[1] !== last_ramOut_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ramOut_exp[1] = ramOut_expected_prev[1];
	end
	if (
		( ramOut_expected_prev[2] !== 1'bx ) && ( ramOut_prev[2] !== ramOut_expected_prev[2] )
		&& ((ramOut_expected_prev[2] !== last_ramOut_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ramOut_exp[2] = ramOut_expected_prev[2];
	end
	if (
		( ramOut_expected_prev[3] !== 1'bx ) && ( ramOut_prev[3] !== ramOut_expected_prev[3] )
		&& ((ramOut_expected_prev[3] !== last_ramOut_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ramOut_exp[3] = ramOut_expected_prev[3];
	end
	if (
		( ramOut_expected_prev[4] !== 1'bx ) && ( ramOut_prev[4] !== ramOut_expected_prev[4] )
		&& ((ramOut_expected_prev[4] !== last_ramOut_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ramOut_exp[4] = ramOut_expected_prev[4];
	end
	if (
		( ramOut_expected_prev[5] !== 1'bx ) && ( ramOut_prev[5] !== ramOut_expected_prev[5] )
		&& ((ramOut_expected_prev[5] !== last_ramOut_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ramOut_exp[5] = ramOut_expected_prev[5];
	end
	if (
		( ramOut_expected_prev[6] !== 1'bx ) && ( ramOut_prev[6] !== ramOut_expected_prev[6] )
		&& ((ramOut_expected_prev[6] !== last_ramOut_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ramOut_exp[6] = ramOut_expected_prev[6];
	end
	if (
		( ramOut_expected_prev[7] !== 1'bx ) && ( ramOut_prev[7] !== ramOut_expected_prev[7] )
		&& ((ramOut_expected_prev[7] !== last_ramOut_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ramOut_exp[7] = ramOut_expected_prev[7];
	end
	if (
		( val_expected_prev[0] !== 1'bx ) && ( val_prev[0] !== val_expected_prev[0] )
		&& ((val_expected_prev[0] !== last_val_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_val_exp[0] = val_expected_prev[0];
	end
	if (
		( val_expected_prev[1] !== 1'bx ) && ( val_prev[1] !== val_expected_prev[1] )
		&& ((val_expected_prev[1] !== last_val_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_val_exp[1] = val_expected_prev[1];
	end
	if (
		( val_expected_prev[2] !== 1'bx ) && ( val_prev[2] !== val_expected_prev[2] )
		&& ((val_expected_prev[2] !== last_val_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_val_exp[2] = val_expected_prev[2];
	end
	if (
		( val_expected_prev[3] !== 1'bx ) && ( val_prev[3] !== val_expected_prev[3] )
		&& ((val_expected_prev[3] !== last_val_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_val_exp[3] = val_expected_prev[3];
	end
	if (
		( val_expected_prev[4] !== 1'bx ) && ( val_prev[4] !== val_expected_prev[4] )
		&& ((val_expected_prev[4] !== last_val_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_val_exp[4] = val_expected_prev[4];
	end
	if (
		( val_expected_prev[5] !== 1'bx ) && ( val_prev[5] !== val_expected_prev[5] )
		&& ((val_expected_prev[5] !== last_val_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_val_exp[5] = val_expected_prev[5];
	end
	if (
		( val_expected_prev[6] !== 1'bx ) && ( val_prev[6] !== val_expected_prev[6] )
		&& ((val_expected_prev[6] !== last_val_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_val_exp[6] = val_expected_prev[6];
	end
	if (
		( val_expected_prev[7] !== 1'bx ) && ( val_prev[7] !== val_expected_prev[7] )
		&& ((val_expected_prev[7] !== last_val_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_val_exp[7] = val_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CS141L_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg labelPassButton;
reg start;
reg [7:0] startAddress;
reg zero;
// wires                                               
wire [7:0] addr;
wire [7:0] aluIn0;
wire [7:0] aluIn1;
wire [7:0] aluRes;
wire clock_out;
wire [7:0] currentpc;
wire [15:0] cycleCounter;
wire [7:0] data;
wire halt_out;
wire [7:0] instruction_value;
wire [3:0] opcode_out;
wire orOut;
wire outPCResetFlag;
wire [7:0] ramOut;
wire [7:0] val;

wire sampler;                             

// assign statements (if any)                          
CS141L i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.aluIn0(aluIn0),
	.aluIn1(aluIn1),
	.aluRes(aluRes),
	.clk(clk),
	.clock_out(clock_out),
	.currentpc(currentpc),
	.cycleCounter(cycleCounter),
	.data(data),
	.halt_out(halt_out),
	.instruction_value(instruction_value),
	.labelPassButton(labelPassButton),
	.opcode_out(opcode_out),
	.orOut(orOut),
	.outPCResetFlag(outPCResetFlag),
	.ramOut(ramOut),
	.start(start),
	.startAddress(startAddress),
	.val(val),
	.zero(zero)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// start
initial
begin
	start = 1'b0;
end 
// startAddress[ 7 ]
initial
begin
	startAddress[7] = 1'b0;
end 
// startAddress[ 6 ]
initial
begin
	startAddress[6] = 1'b0;
end 
// startAddress[ 5 ]
initial
begin
	startAddress[5] = 1'b0;
end 
// startAddress[ 4 ]
initial
begin
	startAddress[4] = 1'b0;
end 
// startAddress[ 3 ]
initial
begin
	startAddress[3] = 1'b0;
end 
// startAddress[ 2 ]
initial
begin
	startAddress[2] = 1'b0;
end 
// startAddress[ 1 ]
initial
begin
	startAddress[1] = 1'b0;
end 
// startAddress[ 0 ]
initial
begin
	startAddress[0] = 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
end 

// labelPassButton
initial
begin
	labelPassButton = 1'b1;
	labelPassButton = #40000 1'b0;
end 

CS141L_vlg_sample_tst tb_sample (
	.clk(clk),
	.labelPassButton(labelPassButton),
	.start(start),
	.startAddress(startAddress),
	.zero(zero),
	.sampler_tx(sampler)
);

CS141L_vlg_check_tst tb_out(
	.addr(addr),
	.aluIn0(aluIn0),
	.aluIn1(aluIn1),
	.aluRes(aluRes),
	.clock_out(clock_out),
	.currentpc(currentpc),
	.cycleCounter(cycleCounter),
	.data(data),
	.halt_out(halt_out),
	.instruction_value(instruction_value),
	.opcode_out(opcode_out),
	.orOut(orOut),
	.outPCResetFlag(outPCResetFlag),
	.ramOut(ramOut),
	.val(val),
	.sampler_rx(sampler)
);
endmodule

