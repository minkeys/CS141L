// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2015 08:26:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CS141L
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CS141L_vlg_sample_tst(
	clk,
	start,
	startAddress,
	sampler_tx
);
input  clk;
input  start;
input [7:0] startAddress;
output sampler_tx;

reg sample;
time current_time;
always @(clk or start or startAddress)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CS141L_vlg_check_tst (
	currentpc,
	instruction,
	sampler_rx
);
input [7:0] currentpc;
input [7:0] instruction;
input sampler_rx;

reg [7:0] currentpc_expected;
reg [7:0] instruction_expected;

reg [7:0] currentpc_prev;
reg [7:0] instruction_prev;

reg [7:0] currentpc_expected_prev;
reg [7:0] instruction_expected_prev;

reg [7:0] last_currentpc_exp;
reg [7:0] last_instruction_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	currentpc_prev = currentpc;
	instruction_prev = instruction;
end

// update expected /o prevs

always @(trigger)
begin
	currentpc_expected_prev = currentpc_expected;
	instruction_expected_prev = instruction_expected;
end


// expected currentpc[ 7 ]
initial
begin
	currentpc_expected[7] = 1'bX;
end 
// expected currentpc[ 6 ]
initial
begin
	currentpc_expected[6] = 1'bX;
end 
// expected currentpc[ 5 ]
initial
begin
	currentpc_expected[5] = 1'bX;
end 
// expected currentpc[ 4 ]
initial
begin
	currentpc_expected[4] = 1'bX;
end 
// expected currentpc[ 3 ]
initial
begin
	currentpc_expected[3] = 1'bX;
end 
// expected currentpc[ 2 ]
initial
begin
	currentpc_expected[2] = 1'bX;
end 
// expected currentpc[ 1 ]
initial
begin
	currentpc_expected[1] = 1'bX;
end 
// expected currentpc[ 0 ]
initial
begin
	currentpc_expected[0] = 1'bX;
end 
// expected instruction[ 7 ]
initial
begin
	instruction_expected[7] = 1'bX;
end 
// expected instruction[ 6 ]
initial
begin
	instruction_expected[6] = 1'bX;
end 
// expected instruction[ 5 ]
initial
begin
	instruction_expected[5] = 1'bX;
end 
// expected instruction[ 4 ]
initial
begin
	instruction_expected[4] = 1'bX;
end 
// expected instruction[ 3 ]
initial
begin
	instruction_expected[3] = 1'bX;
end 
// expected instruction[ 2 ]
initial
begin
	instruction_expected[2] = 1'bX;
end 
// expected instruction[ 1 ]
initial
begin
	instruction_expected[1] = 1'bX;
end 
// expected instruction[ 0 ]
initial
begin
	instruction_expected[0] = 1'bX;
end 
// generate trigger
always @(currentpc_expected or currentpc or instruction_expected or instruction)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected currentpc = %b | expected instruction = %b | ",currentpc_expected_prev,instruction_expected_prev);
	$display("| real currentpc = %b | real instruction = %b | ",currentpc_prev,instruction_prev);
`endif
	if (
		( currentpc_expected_prev[0] !== 1'bx ) && ( currentpc_prev[0] !== currentpc_expected_prev[0] )
		&& ((currentpc_expected_prev[0] !== last_currentpc_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_currentpc_exp[0] = currentpc_expected_prev[0];
	end
	if (
		( currentpc_expected_prev[1] !== 1'bx ) && ( currentpc_prev[1] !== currentpc_expected_prev[1] )
		&& ((currentpc_expected_prev[1] !== last_currentpc_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_currentpc_exp[1] = currentpc_expected_prev[1];
	end
	if (
		( currentpc_expected_prev[2] !== 1'bx ) && ( currentpc_prev[2] !== currentpc_expected_prev[2] )
		&& ((currentpc_expected_prev[2] !== last_currentpc_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_currentpc_exp[2] = currentpc_expected_prev[2];
	end
	if (
		( currentpc_expected_prev[3] !== 1'bx ) && ( currentpc_prev[3] !== currentpc_expected_prev[3] )
		&& ((currentpc_expected_prev[3] !== last_currentpc_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_currentpc_exp[3] = currentpc_expected_prev[3];
	end
	if (
		( currentpc_expected_prev[4] !== 1'bx ) && ( currentpc_prev[4] !== currentpc_expected_prev[4] )
		&& ((currentpc_expected_prev[4] !== last_currentpc_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_currentpc_exp[4] = currentpc_expected_prev[4];
	end
	if (
		( currentpc_expected_prev[5] !== 1'bx ) && ( currentpc_prev[5] !== currentpc_expected_prev[5] )
		&& ((currentpc_expected_prev[5] !== last_currentpc_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_currentpc_exp[5] = currentpc_expected_prev[5];
	end
	if (
		( currentpc_expected_prev[6] !== 1'bx ) && ( currentpc_prev[6] !== currentpc_expected_prev[6] )
		&& ((currentpc_expected_prev[6] !== last_currentpc_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_currentpc_exp[6] = currentpc_expected_prev[6];
	end
	if (
		( currentpc_expected_prev[7] !== 1'bx ) && ( currentpc_prev[7] !== currentpc_expected_prev[7] )
		&& ((currentpc_expected_prev[7] !== last_currentpc_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_currentpc_exp[7] = currentpc_expected_prev[7];
	end
	if (
		( instruction_expected_prev[0] !== 1'bx ) && ( instruction_prev[0] !== instruction_expected_prev[0] )
		&& ((instruction_expected_prev[0] !== last_instruction_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_exp[0] = instruction_expected_prev[0];
	end
	if (
		( instruction_expected_prev[1] !== 1'bx ) && ( instruction_prev[1] !== instruction_expected_prev[1] )
		&& ((instruction_expected_prev[1] !== last_instruction_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_exp[1] = instruction_expected_prev[1];
	end
	if (
		( instruction_expected_prev[2] !== 1'bx ) && ( instruction_prev[2] !== instruction_expected_prev[2] )
		&& ((instruction_expected_prev[2] !== last_instruction_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_exp[2] = instruction_expected_prev[2];
	end
	if (
		( instruction_expected_prev[3] !== 1'bx ) && ( instruction_prev[3] !== instruction_expected_prev[3] )
		&& ((instruction_expected_prev[3] !== last_instruction_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_exp[3] = instruction_expected_prev[3];
	end
	if (
		( instruction_expected_prev[4] !== 1'bx ) && ( instruction_prev[4] !== instruction_expected_prev[4] )
		&& ((instruction_expected_prev[4] !== last_instruction_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_exp[4] = instruction_expected_prev[4];
	end
	if (
		( instruction_expected_prev[5] !== 1'bx ) && ( instruction_prev[5] !== instruction_expected_prev[5] )
		&& ((instruction_expected_prev[5] !== last_instruction_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_exp[5] = instruction_expected_prev[5];
	end
	if (
		( instruction_expected_prev[6] !== 1'bx ) && ( instruction_prev[6] !== instruction_expected_prev[6] )
		&& ((instruction_expected_prev[6] !== last_instruction_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_exp[6] = instruction_expected_prev[6];
	end
	if (
		( instruction_expected_prev[7] !== 1'bx ) && ( instruction_prev[7] !== instruction_expected_prev[7] )
		&& ((instruction_expected_prev[7] !== last_instruction_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_exp[7] = instruction_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CS141L_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg start;
reg [7:0] startAddress;
// wires                                               
wire [7:0] currentpc;
wire [7:0] instruction;

wire sampler;                             

// assign statements (if any)                          
CS141L i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.currentpc(currentpc),
	.instruction(instruction),
	.start(start),
	.startAddress(startAddress)
);

// clk
initial
begin
	clk = 1'b0;
end 

// start
initial
begin
	start = 1'b0;
end 
// startAddress[ 7 ]
initial
begin
	startAddress[7] = 1'b0;
end 
// startAddress[ 6 ]
initial
begin
	startAddress[6] = 1'b0;
end 
// startAddress[ 5 ]
initial
begin
	startAddress[5] = 1'b0;
end 
// startAddress[ 4 ]
initial
begin
	startAddress[4] = 1'b0;
end 
// startAddress[ 3 ]
initial
begin
	startAddress[3] = 1'b0;
end 
// startAddress[ 2 ]
initial
begin
	startAddress[2] = 1'b0;
end 
// startAddress[ 1 ]
initial
begin
	startAddress[1] = 1'b0;
end 
// startAddress[ 0 ]
initial
begin
	startAddress[0] = 1'b0;
end 

CS141L_vlg_sample_tst tb_sample (
	.clk(clk),
	.start(start),
	.startAddress(startAddress),
	.sampler_tx(sampler)
);

CS141L_vlg_check_tst tb_out(
	.currentpc(currentpc),
	.instruction(instruction),
	.sampler_rx(sampler)
);
endmodule

