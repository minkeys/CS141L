// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/10/2015 23:41:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CS141L
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CS141L_vlg_sample_tst(
	clk,
	labelPassButton,
	start,
	startAddress,
	zero,
	sampler_tx
);
input  clk;
input  labelPassButton;
input  start;
input [7:0] startAddress;
input  zero;
output sampler_tx;

reg sample;
time current_time;
always @(clk or labelPassButton or start or startAddress or zero)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CS141L_vlg_check_tst (
	alu_lessThanFlag,
	alu_overflow,
	alu_overflowFlag,
	alu_result,
	aluIn0,
	ALUM_ALUResultOut,
	ALUM_labelvalueout,
	ALUM_labelvalueout0,
	ALUM_labelvalueout1,
	ALUM_labelvalueout2,
	ALUM_labelvalueout3,
	ALUM_labelvalueout4,
	ALUM_labelvalueout5,
	ALUM_labelvalueout6,
	ALUM_labelvalueout7,
	ALUM_readMemFlagOut,
	ALUM_regAOu,
	ALUM_regBOut,
	ALUM_writeMemFlagOut,
	BUSMUX_result,
	BUSMUX_result_bm1,
	BUSMUX_result_bm3,
	clkoutIFID,
	clock_out,
	currentpc,
	cycleCounter,
	halt_out,
	id_branchAddress,
	id_branchFlag,
	id_clkOut,
	id_haltFlag,
	id_immediateFlag,
	id_labelFlag,
	id_labelPassFlagOut,
	id_labelValue,
	id_outputPCResetFlag,
	id_rd2,
	id_readmem,
	id_regA,
	id_regB,
	id_regwrite,
	id_rs,
	id_rt1,
	id_signFlag,
	id_writemem,
	instruction_count,
	instruction_value,
	instructionOutIFID,
	labelpassIFID,
	MWB_labelValueOut,
	MWB_qout,
	MWB_readmem,
	MWB_resultout,
	opcode_out,
	orOut,
	outPCResetFlag,
	pcOutIFID,
	pcresetIFID,
	ramOut,
	REGALU_immediateFlagOut,
	REGALU_labelFlagOut,
	REGALU_labelValueOut,
	REGALU_opcodeOut,
	REGALU_readMemFlagOut,
	REGALU_regAOut,
	REGALU_regBOut,
	REGALU_signFlagOut,
	REGALU_valueOut,
	REGALU_writeMemFlagOut,
	val,
	WMB_labelflagOut,
	sampler_rx
);
input  alu_lessThanFlag;
input [7:0] alu_overflow;
input  alu_overflowFlag;
input [7:0] alu_result;
input [7:0] aluIn0;
input [7:0] ALUM_ALUResultOut;
input  ALUM_labelvalueout;
input  ALUM_labelvalueout0;
input  ALUM_labelvalueout1;
input  ALUM_labelvalueout2;
input  ALUM_labelvalueout3;
input  ALUM_labelvalueout4;
input  ALUM_labelvalueout5;
input  ALUM_labelvalueout6;
input  ALUM_labelvalueout7;
input  ALUM_readMemFlagOut;
input [7:0] ALUM_regAOu;
input [7:0] ALUM_regBOut;
input  ALUM_writeMemFlagOut;
input [7:0] BUSMUX_result;
input [7:0] BUSMUX_result_bm1;
input [7:0] BUSMUX_result_bm3;
input  clkoutIFID;
input  clock_out;
input [7:0] currentpc;
input [15:0] cycleCounter;
input  halt_out;
input [7:0] id_branchAddress;
input  id_branchFlag;
input  id_clkOut;
input  id_haltFlag;
input  id_immediateFlag;
input  id_labelFlag;
input  id_labelPassFlagOut;
input [7:0] id_labelValue;
input  id_outputPCResetFlag;
input [3:0] id_rd2;
input  id_readmem;
input [7:0] id_regA;
input [7:0] id_regB;
input  id_regwrite;
input [3:0] id_rs;
input [3:0] id_rt1;
input  id_signFlag;
input  id_writemem;
input [15:0] instruction_count;
input [7:0] instruction_value;
input [7:0] instructionOutIFID;
input  labelpassIFID;
input [7:0] MWB_labelValueOut;
input [7:0] MWB_qout;
input  MWB_readmem;
input [7:0] MWB_resultout;
input [3:0] opcode_out;
input  orOut;
input  outPCResetFlag;
input [7:0] pcOutIFID;
input  pcresetIFID;
input [7:0] ramOut;
input  REGALU_immediateFlagOut;
input  REGALU_labelFlagOut;
input [7:0] REGALU_labelValueOut;
input [3:0] REGALU_opcodeOut;
input  REGALU_readMemFlagOut;
input [7:0] REGALU_regAOut;
input [7:0] REGALU_regBOut;
input  REGALU_signFlagOut;
input [7:0] REGALU_valueOut;
input  REGALU_writeMemFlagOut;
input [7:0] val;
input  WMB_labelflagOut;
input sampler_rx;

reg  alu_lessThanFlag_expected;
reg [7:0] alu_overflow_expected;
reg  alu_overflowFlag_expected;
reg [7:0] alu_result_expected;
reg [7:0] aluIn0_expected;
reg [7:0] ALUM_ALUResultOut_expected;
reg  ALUM_labelvalueout_expected;
reg  ALUM_labelvalueout0_expected;
reg  ALUM_labelvalueout1_expected;
reg  ALUM_labelvalueout2_expected;
reg  ALUM_labelvalueout3_expected;
reg  ALUM_labelvalueout4_expected;
reg  ALUM_labelvalueout5_expected;
reg  ALUM_labelvalueout6_expected;
reg  ALUM_labelvalueout7_expected;
reg  ALUM_readMemFlagOut_expected;
reg [7:0] ALUM_regAOu_expected;
reg [7:0] ALUM_regBOut_expected;
reg  ALUM_writeMemFlagOut_expected;
reg [7:0] BUSMUX_result_expected;
reg [7:0] BUSMUX_result_bm1_expected;
reg [7:0] BUSMUX_result_bm3_expected;
reg  clkoutIFID_expected;
reg  clock_out_expected;
reg [7:0] currentpc_expected;
reg [15:0] cycleCounter_expected;
reg  halt_out_expected;
reg [7:0] id_branchAddress_expected;
reg  id_branchFlag_expected;
reg  id_clkOut_expected;
reg  id_haltFlag_expected;
reg  id_immediateFlag_expected;
reg  id_labelFlag_expected;
reg  id_labelPassFlagOut_expected;
reg [7:0] id_labelValue_expected;
reg  id_outputPCResetFlag_expected;
reg [3:0] id_rd2_expected;
reg  id_readmem_expected;
reg [7:0] id_regA_expected;
reg [7:0] id_regB_expected;
reg  id_regwrite_expected;
reg [3:0] id_rs_expected;
reg [3:0] id_rt1_expected;
reg  id_signFlag_expected;
reg  id_writemem_expected;
reg [15:0] instruction_count_expected;
reg [7:0] instruction_value_expected;
reg [7:0] instructionOutIFID_expected;
reg  labelpassIFID_expected;
reg [7:0] MWB_labelValueOut_expected;
reg [7:0] MWB_qout_expected;
reg  MWB_readmem_expected;
reg [7:0] MWB_resultout_expected;
reg [3:0] opcode_out_expected;
reg  orOut_expected;
reg  outPCResetFlag_expected;
reg [7:0] pcOutIFID_expected;
reg  pcresetIFID_expected;
reg [7:0] ramOut_expected;
reg  REGALU_immediateFlagOut_expected;
reg  REGALU_labelFlagOut_expected;
reg [7:0] REGALU_labelValueOut_expected;
reg [3:0] REGALU_opcodeOut_expected;
reg  REGALU_readMemFlagOut_expected;
reg [7:0] REGALU_regAOut_expected;
reg [7:0] REGALU_regBOut_expected;
reg  REGALU_signFlagOut_expected;
reg [7:0] REGALU_valueOut_expected;
reg  REGALU_writeMemFlagOut_expected;
reg [7:0] val_expected;
reg  WMB_labelflagOut_expected;

reg  alu_lessThanFlag_prev;
reg [7:0] alu_overflow_prev;
reg  alu_overflowFlag_prev;
reg [7:0] alu_result_prev;
reg [7:0] aluIn0_prev;
reg [7:0] ALUM_ALUResultOut_prev;
reg  ALUM_labelvalueout_prev;
reg  ALUM_labelvalueout0_prev;
reg  ALUM_labelvalueout1_prev;
reg  ALUM_labelvalueout2_prev;
reg  ALUM_labelvalueout3_prev;
reg  ALUM_labelvalueout4_prev;
reg  ALUM_labelvalueout5_prev;
reg  ALUM_labelvalueout6_prev;
reg  ALUM_labelvalueout7_prev;
reg  ALUM_readMemFlagOut_prev;
reg [7:0] ALUM_regAOu_prev;
reg [7:0] ALUM_regBOut_prev;
reg  ALUM_writeMemFlagOut_prev;
reg [7:0] BUSMUX_result_prev;
reg [7:0] BUSMUX_result_bm1_prev;
reg [7:0] BUSMUX_result_bm3_prev;
reg  clkoutIFID_prev;
reg  clock_out_prev;
reg [7:0] currentpc_prev;
reg [15:0] cycleCounter_prev;
reg  halt_out_prev;
reg [7:0] id_branchAddress_prev;
reg  id_branchFlag_prev;
reg  id_clkOut_prev;
reg  id_haltFlag_prev;
reg  id_immediateFlag_prev;
reg  id_labelFlag_prev;
reg  id_labelPassFlagOut_prev;
reg [7:0] id_labelValue_prev;
reg  id_outputPCResetFlag_prev;
reg [3:0] id_rd2_prev;
reg  id_readmem_prev;
reg [7:0] id_regA_prev;
reg [7:0] id_regB_prev;
reg  id_regwrite_prev;
reg [3:0] id_rs_prev;
reg [3:0] id_rt1_prev;
reg  id_signFlag_prev;
reg  id_writemem_prev;
reg [15:0] instruction_count_prev;
reg [7:0] instruction_value_prev;
reg [7:0] instructionOutIFID_prev;
reg  labelpassIFID_prev;
reg [7:0] MWB_labelValueOut_prev;
reg [7:0] MWB_qout_prev;
reg  MWB_readmem_prev;
reg [7:0] MWB_resultout_prev;
reg [3:0] opcode_out_prev;
reg  orOut_prev;
reg  outPCResetFlag_prev;
reg [7:0] pcOutIFID_prev;
reg  pcresetIFID_prev;
reg [7:0] ramOut_prev;
reg  REGALU_immediateFlagOut_prev;
reg  REGALU_labelFlagOut_prev;
reg [7:0] REGALU_labelValueOut_prev;
reg [3:0] REGALU_opcodeOut_prev;
reg  REGALU_readMemFlagOut_prev;
reg [7:0] REGALU_regAOut_prev;
reg [7:0] REGALU_regBOut_prev;
reg  REGALU_signFlagOut_prev;
reg [7:0] REGALU_valueOut_prev;
reg  REGALU_writeMemFlagOut_prev;
reg [7:0] val_prev;
reg  WMB_labelflagOut_prev;

reg  alu_lessThanFlag_expected_prev;
reg [7:0] alu_overflow_expected_prev;
reg  alu_overflowFlag_expected_prev;
reg [7:0] alu_result_expected_prev;
reg [7:0] aluIn0_expected_prev;
reg [7:0] ALUM_ALUResultOut_expected_prev;
reg  ALUM_labelvalueout_expected_prev;
reg  ALUM_labelvalueout0_expected_prev;
reg  ALUM_labelvalueout1_expected_prev;
reg  ALUM_labelvalueout2_expected_prev;
reg  ALUM_labelvalueout3_expected_prev;
reg  ALUM_labelvalueout4_expected_prev;
reg  ALUM_labelvalueout5_expected_prev;
reg  ALUM_labelvalueout6_expected_prev;
reg  ALUM_labelvalueout7_expected_prev;
reg  ALUM_readMemFlagOut_expected_prev;
reg [7:0] ALUM_regAOu_expected_prev;
reg [7:0] ALUM_regBOut_expected_prev;
reg  ALUM_writeMemFlagOut_expected_prev;
reg [7:0] BUSMUX_result_expected_prev;
reg [7:0] BUSMUX_result_bm1_expected_prev;
reg [7:0] BUSMUX_result_bm3_expected_prev;
reg  clkoutIFID_expected_prev;
reg  clock_out_expected_prev;
reg [7:0] currentpc_expected_prev;
reg [15:0] cycleCounter_expected_prev;
reg  halt_out_expected_prev;
reg [7:0] id_branchAddress_expected_prev;
reg  id_branchFlag_expected_prev;
reg  id_clkOut_expected_prev;
reg  id_haltFlag_expected_prev;
reg  id_immediateFlag_expected_prev;
reg  id_labelFlag_expected_prev;
reg  id_labelPassFlagOut_expected_prev;
reg [7:0] id_labelValue_expected_prev;
reg  id_outputPCResetFlag_expected_prev;
reg [3:0] id_rd2_expected_prev;
reg  id_readmem_expected_prev;
reg [7:0] id_regA_expected_prev;
reg [7:0] id_regB_expected_prev;
reg  id_regwrite_expected_prev;
reg [3:0] id_rs_expected_prev;
reg [3:0] id_rt1_expected_prev;
reg  id_signFlag_expected_prev;
reg  id_writemem_expected_prev;
reg [15:0] instruction_count_expected_prev;
reg [7:0] instruction_value_expected_prev;
reg [7:0] instructionOutIFID_expected_prev;
reg  labelpassIFID_expected_prev;
reg [7:0] MWB_labelValueOut_expected_prev;
reg [7:0] MWB_qout_expected_prev;
reg  MWB_readmem_expected_prev;
reg [7:0] MWB_resultout_expected_prev;
reg [3:0] opcode_out_expected_prev;
reg  orOut_expected_prev;
reg  outPCResetFlag_expected_prev;
reg [7:0] pcOutIFID_expected_prev;
reg  pcresetIFID_expected_prev;
reg [7:0] ramOut_expected_prev;
reg  REGALU_immediateFlagOut_expected_prev;
reg  REGALU_labelFlagOut_expected_prev;
reg [7:0] REGALU_labelValueOut_expected_prev;
reg [3:0] REGALU_opcodeOut_expected_prev;
reg  REGALU_readMemFlagOut_expected_prev;
reg [7:0] REGALU_regAOut_expected_prev;
reg [7:0] REGALU_regBOut_expected_prev;
reg  REGALU_signFlagOut_expected_prev;
reg [7:0] REGALU_valueOut_expected_prev;
reg  REGALU_writeMemFlagOut_expected_prev;
reg [7:0] val_expected_prev;
reg  WMB_labelflagOut_expected_prev;

reg  last_alu_lessThanFlag_exp;
reg [7:0] last_alu_overflow_exp;
reg  last_alu_overflowFlag_exp;
reg [7:0] last_alu_result_exp;
reg [7:0] last_aluIn0_exp;
reg [7:0] last_ALUM_ALUResultOut_exp;
reg  last_ALUM_labelvalueout_exp;
reg  last_ALUM_labelvalueout0_exp;
reg  last_ALUM_labelvalueout1_exp;
reg  last_ALUM_labelvalueout2_exp;
reg  last_ALUM_labelvalueout3_exp;
reg  last_ALUM_labelvalueout4_exp;
reg  last_ALUM_labelvalueout5_exp;
reg  last_ALUM_labelvalueout6_exp;
reg  last_ALUM_labelvalueout7_exp;
reg  last_ALUM_readMemFlagOut_exp;
reg [7:0] last_ALUM_regAOu_exp;
reg [7:0] last_ALUM_regBOut_exp;
reg  last_ALUM_writeMemFlagOut_exp;
reg [7:0] last_BUSMUX_result_exp;
reg [7:0] last_BUSMUX_result_bm1_exp;
reg [7:0] last_BUSMUX_result_bm3_exp;
reg  last_clkoutIFID_exp;
reg  last_clock_out_exp;
reg [7:0] last_currentpc_exp;
reg [15:0] last_cycleCounter_exp;
reg  last_halt_out_exp;
reg [7:0] last_id_branchAddress_exp;
reg  last_id_branchFlag_exp;
reg  last_id_clkOut_exp;
reg  last_id_haltFlag_exp;
reg  last_id_immediateFlag_exp;
reg  last_id_labelFlag_exp;
reg  last_id_labelPassFlagOut_exp;
reg [7:0] last_id_labelValue_exp;
reg  last_id_outputPCResetFlag_exp;
reg [3:0] last_id_rd2_exp;
reg  last_id_readmem_exp;
reg [7:0] last_id_regA_exp;
reg [7:0] last_id_regB_exp;
reg  last_id_regwrite_exp;
reg [3:0] last_id_rs_exp;
reg [3:0] last_id_rt1_exp;
reg  last_id_signFlag_exp;
reg  last_id_writemem_exp;
reg [15:0] last_instruction_count_exp;
reg [7:0] last_instruction_value_exp;
reg [7:0] last_instructionOutIFID_exp;
reg  last_labelpassIFID_exp;
reg [7:0] last_MWB_labelValueOut_exp;
reg [7:0] last_MWB_qout_exp;
reg  last_MWB_readmem_exp;
reg [7:0] last_MWB_resultout_exp;
reg [3:0] last_opcode_out_exp;
reg  last_orOut_exp;
reg  last_outPCResetFlag_exp;
reg [7:0] last_pcOutIFID_exp;
reg  last_pcresetIFID_exp;
reg [7:0] last_ramOut_exp;
reg  last_REGALU_immediateFlagOut_exp;
reg  last_REGALU_labelFlagOut_exp;
reg [7:0] last_REGALU_labelValueOut_exp;
reg [3:0] last_REGALU_opcodeOut_exp;
reg  last_REGALU_readMemFlagOut_exp;
reg [7:0] last_REGALU_regAOut_exp;
reg [7:0] last_REGALU_regBOut_exp;
reg  last_REGALU_signFlagOut_exp;
reg [7:0] last_REGALU_valueOut_exp;
reg  last_REGALU_writeMemFlagOut_exp;
reg [7:0] last_val_exp;
reg  last_WMB_labelflagOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:71] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 71'b1;
end

// update real /o prevs

always @(trigger)
begin
	alu_lessThanFlag_prev = alu_lessThanFlag;
	alu_overflow_prev = alu_overflow;
	alu_overflowFlag_prev = alu_overflowFlag;
	alu_result_prev = alu_result;
	aluIn0_prev = aluIn0;
	ALUM_ALUResultOut_prev = ALUM_ALUResultOut;
	ALUM_labelvalueout_prev = ALUM_labelvalueout;
	ALUM_labelvalueout0_prev = ALUM_labelvalueout0;
	ALUM_labelvalueout1_prev = ALUM_labelvalueout1;
	ALUM_labelvalueout2_prev = ALUM_labelvalueout2;
	ALUM_labelvalueout3_prev = ALUM_labelvalueout3;
	ALUM_labelvalueout4_prev = ALUM_labelvalueout4;
	ALUM_labelvalueout5_prev = ALUM_labelvalueout5;
	ALUM_labelvalueout6_prev = ALUM_labelvalueout6;
	ALUM_labelvalueout7_prev = ALUM_labelvalueout7;
	ALUM_readMemFlagOut_prev = ALUM_readMemFlagOut;
	ALUM_regAOu_prev = ALUM_regAOu;
	ALUM_regBOut_prev = ALUM_regBOut;
	ALUM_writeMemFlagOut_prev = ALUM_writeMemFlagOut;
	BUSMUX_result_prev = BUSMUX_result;
	BUSMUX_result_bm1_prev = BUSMUX_result_bm1;
	BUSMUX_result_bm3_prev = BUSMUX_result_bm3;
	clkoutIFID_prev = clkoutIFID;
	clock_out_prev = clock_out;
	currentpc_prev = currentpc;
	cycleCounter_prev = cycleCounter;
	halt_out_prev = halt_out;
	id_branchAddress_prev = id_branchAddress;
	id_branchFlag_prev = id_branchFlag;
	id_clkOut_prev = id_clkOut;
	id_haltFlag_prev = id_haltFlag;
	id_immediateFlag_prev = id_immediateFlag;
	id_labelFlag_prev = id_labelFlag;
	id_labelPassFlagOut_prev = id_labelPassFlagOut;
	id_labelValue_prev = id_labelValue;
	id_outputPCResetFlag_prev = id_outputPCResetFlag;
	id_rd2_prev = id_rd2;
	id_readmem_prev = id_readmem;
	id_regA_prev = id_regA;
	id_regB_prev = id_regB;
	id_regwrite_prev = id_regwrite;
	id_rs_prev = id_rs;
	id_rt1_prev = id_rt1;
	id_signFlag_prev = id_signFlag;
	id_writemem_prev = id_writemem;
	instruction_count_prev = instruction_count;
	instruction_value_prev = instruction_value;
	instructionOutIFID_prev = instructionOutIFID;
	labelpassIFID_prev = labelpassIFID;
	MWB_labelValueOut_prev = MWB_labelValueOut;
	MWB_qout_prev = MWB_qout;
	MWB_readmem_prev = MWB_readmem;
	MWB_resultout_prev = MWB_resultout;
	opcode_out_prev = opcode_out;
	orOut_prev = orOut;
	outPCResetFlag_prev = outPCResetFlag;
	pcOutIFID_prev = pcOutIFID;
	pcresetIFID_prev = pcresetIFID;
	ramOut_prev = ramOut;
	REGALU_immediateFlagOut_prev = REGALU_immediateFlagOut;
	REGALU_labelFlagOut_prev = REGALU_labelFlagOut;
	REGALU_labelValueOut_prev = REGALU_labelValueOut;
	REGALU_opcodeOut_prev = REGALU_opcodeOut;
	REGALU_readMemFlagOut_prev = REGALU_readMemFlagOut;
	REGALU_regAOut_prev = REGALU_regAOut;
	REGALU_regBOut_prev = REGALU_regBOut;
	REGALU_signFlagOut_prev = REGALU_signFlagOut;
	REGALU_valueOut_prev = REGALU_valueOut;
	REGALU_writeMemFlagOut_prev = REGALU_writeMemFlagOut;
	val_prev = val;
	WMB_labelflagOut_prev = WMB_labelflagOut;
end

// update expected /o prevs

always @(trigger)
begin
	alu_lessThanFlag_expected_prev = alu_lessThanFlag_expected;
	alu_overflow_expected_prev = alu_overflow_expected;
	alu_overflowFlag_expected_prev = alu_overflowFlag_expected;
	alu_result_expected_prev = alu_result_expected;
	aluIn0_expected_prev = aluIn0_expected;
	ALUM_ALUResultOut_expected_prev = ALUM_ALUResultOut_expected;
	ALUM_labelvalueout_expected_prev = ALUM_labelvalueout_expected;
	ALUM_labelvalueout0_expected_prev = ALUM_labelvalueout0_expected;
	ALUM_labelvalueout1_expected_prev = ALUM_labelvalueout1_expected;
	ALUM_labelvalueout2_expected_prev = ALUM_labelvalueout2_expected;
	ALUM_labelvalueout3_expected_prev = ALUM_labelvalueout3_expected;
	ALUM_labelvalueout4_expected_prev = ALUM_labelvalueout4_expected;
	ALUM_labelvalueout5_expected_prev = ALUM_labelvalueout5_expected;
	ALUM_labelvalueout6_expected_prev = ALUM_labelvalueout6_expected;
	ALUM_labelvalueout7_expected_prev = ALUM_labelvalueout7_expected;
	ALUM_readMemFlagOut_expected_prev = ALUM_readMemFlagOut_expected;
	ALUM_regAOu_expected_prev = ALUM_regAOu_expected;
	ALUM_regBOut_expected_prev = ALUM_regBOut_expected;
	ALUM_writeMemFlagOut_expected_prev = ALUM_writeMemFlagOut_expected;
	BUSMUX_result_expected_prev = BUSMUX_result_expected;
	BUSMUX_result_bm1_expected_prev = BUSMUX_result_bm1_expected;
	BUSMUX_result_bm3_expected_prev = BUSMUX_result_bm3_expected;
	clkoutIFID_expected_prev = clkoutIFID_expected;
	clock_out_expected_prev = clock_out_expected;
	currentpc_expected_prev = currentpc_expected;
	cycleCounter_expected_prev = cycleCounter_expected;
	halt_out_expected_prev = halt_out_expected;
	id_branchAddress_expected_prev = id_branchAddress_expected;
	id_branchFlag_expected_prev = id_branchFlag_expected;
	id_clkOut_expected_prev = id_clkOut_expected;
	id_haltFlag_expected_prev = id_haltFlag_expected;
	id_immediateFlag_expected_prev = id_immediateFlag_expected;
	id_labelFlag_expected_prev = id_labelFlag_expected;
	id_labelPassFlagOut_expected_prev = id_labelPassFlagOut_expected;
	id_labelValue_expected_prev = id_labelValue_expected;
	id_outputPCResetFlag_expected_prev = id_outputPCResetFlag_expected;
	id_rd2_expected_prev = id_rd2_expected;
	id_readmem_expected_prev = id_readmem_expected;
	id_regA_expected_prev = id_regA_expected;
	id_regB_expected_prev = id_regB_expected;
	id_regwrite_expected_prev = id_regwrite_expected;
	id_rs_expected_prev = id_rs_expected;
	id_rt1_expected_prev = id_rt1_expected;
	id_signFlag_expected_prev = id_signFlag_expected;
	id_writemem_expected_prev = id_writemem_expected;
	instruction_count_expected_prev = instruction_count_expected;
	instruction_value_expected_prev = instruction_value_expected;
	instructionOutIFID_expected_prev = instructionOutIFID_expected;
	labelpassIFID_expected_prev = labelpassIFID_expected;
	MWB_labelValueOut_expected_prev = MWB_labelValueOut_expected;
	MWB_qout_expected_prev = MWB_qout_expected;
	MWB_readmem_expected_prev = MWB_readmem_expected;
	MWB_resultout_expected_prev = MWB_resultout_expected;
	opcode_out_expected_prev = opcode_out_expected;
	orOut_expected_prev = orOut_expected;
	outPCResetFlag_expected_prev = outPCResetFlag_expected;
	pcOutIFID_expected_prev = pcOutIFID_expected;
	pcresetIFID_expected_prev = pcresetIFID_expected;
	ramOut_expected_prev = ramOut_expected;
	REGALU_immediateFlagOut_expected_prev = REGALU_immediateFlagOut_expected;
	REGALU_labelFlagOut_expected_prev = REGALU_labelFlagOut_expected;
	REGALU_labelValueOut_expected_prev = REGALU_labelValueOut_expected;
	REGALU_opcodeOut_expected_prev = REGALU_opcodeOut_expected;
	REGALU_readMemFlagOut_expected_prev = REGALU_readMemFlagOut_expected;
	REGALU_regAOut_expected_prev = REGALU_regAOut_expected;
	REGALU_regBOut_expected_prev = REGALU_regBOut_expected;
	REGALU_signFlagOut_expected_prev = REGALU_signFlagOut_expected;
	REGALU_valueOut_expected_prev = REGALU_valueOut_expected;
	REGALU_writeMemFlagOut_expected_prev = REGALU_writeMemFlagOut_expected;
	val_expected_prev = val_expected;
	WMB_labelflagOut_expected_prev = WMB_labelflagOut_expected;
end



// expected alu_lessThanFlag
initial
begin
	alu_lessThanFlag_expected = 1'bX;
end 
// expected alu_overflow[ 7 ]
initial
begin
	alu_overflow_expected[7] = 1'bX;
end 
// expected alu_overflow[ 6 ]
initial
begin
	alu_overflow_expected[6] = 1'bX;
end 
// expected alu_overflow[ 5 ]
initial
begin
	alu_overflow_expected[5] = 1'bX;
end 
// expected alu_overflow[ 4 ]
initial
begin
	alu_overflow_expected[4] = 1'bX;
end 
// expected alu_overflow[ 3 ]
initial
begin
	alu_overflow_expected[3] = 1'bX;
end 
// expected alu_overflow[ 2 ]
initial
begin
	alu_overflow_expected[2] = 1'bX;
end 
// expected alu_overflow[ 1 ]
initial
begin
	alu_overflow_expected[1] = 1'bX;
end 
// expected alu_overflow[ 0 ]
initial
begin
	alu_overflow_expected[0] = 1'bX;
end 

// expected alu_overflowFlag
initial
begin
	alu_overflowFlag_expected = 1'bX;
end 
// expected alu_result[ 7 ]
initial
begin
	alu_result_expected[7] = 1'bX;
end 
// expected alu_result[ 6 ]
initial
begin
	alu_result_expected[6] = 1'bX;
end 
// expected alu_result[ 5 ]
initial
begin
	alu_result_expected[5] = 1'bX;
end 
// expected alu_result[ 4 ]
initial
begin
	alu_result_expected[4] = 1'bX;
end 
// expected alu_result[ 3 ]
initial
begin
	alu_result_expected[3] = 1'bX;
end 
// expected alu_result[ 2 ]
initial
begin
	alu_result_expected[2] = 1'bX;
end 
// expected alu_result[ 1 ]
initial
begin
	alu_result_expected[1] = 1'bX;
end 
// expected alu_result[ 0 ]
initial
begin
	alu_result_expected[0] = 1'bX;
end 
// expected aluIn0[ 7 ]
initial
begin
	aluIn0_expected[7] = 1'bX;
end 
// expected aluIn0[ 6 ]
initial
begin
	aluIn0_expected[6] = 1'bX;
end 
// expected aluIn0[ 5 ]
initial
begin
	aluIn0_expected[5] = 1'bX;
end 
// expected aluIn0[ 4 ]
initial
begin
	aluIn0_expected[4] = 1'bX;
end 
// expected aluIn0[ 3 ]
initial
begin
	aluIn0_expected[3] = 1'bX;
end 
// expected aluIn0[ 2 ]
initial
begin
	aluIn0_expected[2] = 1'bX;
end 
// expected aluIn0[ 1 ]
initial
begin
	aluIn0_expected[1] = 1'bX;
end 
// expected aluIn0[ 0 ]
initial
begin
	aluIn0_expected[0] = 1'bX;
end 
// expected ALUM_ALUResultOut[ 7 ]
initial
begin
	ALUM_ALUResultOut_expected[7] = 1'bX;
end 
// expected ALUM_ALUResultOut[ 6 ]
initial
begin
	ALUM_ALUResultOut_expected[6] = 1'bX;
end 
// expected ALUM_ALUResultOut[ 5 ]
initial
begin
	ALUM_ALUResultOut_expected[5] = 1'bX;
end 
// expected ALUM_ALUResultOut[ 4 ]
initial
begin
	ALUM_ALUResultOut_expected[4] = 1'bX;
end 
// expected ALUM_ALUResultOut[ 3 ]
initial
begin
	ALUM_ALUResultOut_expected[3] = 1'bX;
end 
// expected ALUM_ALUResultOut[ 2 ]
initial
begin
	ALUM_ALUResultOut_expected[2] = 1'bX;
end 
// expected ALUM_ALUResultOut[ 1 ]
initial
begin
	ALUM_ALUResultOut_expected[1] = 1'bX;
end 
// expected ALUM_ALUResultOut[ 0 ]
initial
begin
	ALUM_ALUResultOut_expected[0] = 1'bX;
end 

// expected ALUM_labelvalueout
initial
begin
	ALUM_labelvalueout_expected = 1'bX;
end 

// expected ALUM_labelvalueout0
initial
begin
	ALUM_labelvalueout0_expected = 1'bX;
end 

// expected ALUM_labelvalueout1
initial
begin
	ALUM_labelvalueout1_expected = 1'bX;
end 

// expected ALUM_labelvalueout2
initial
begin
	ALUM_labelvalueout2_expected = 1'bX;
end 

// expected ALUM_labelvalueout3
initial
begin
	ALUM_labelvalueout3_expected = 1'bX;
end 

// expected ALUM_labelvalueout4
initial
begin
	ALUM_labelvalueout4_expected = 1'bX;
end 

// expected ALUM_labelvalueout5
initial
begin
	ALUM_labelvalueout5_expected = 1'bX;
end 

// expected ALUM_labelvalueout6
initial
begin
	ALUM_labelvalueout6_expected = 1'bX;
end 

// expected ALUM_labelvalueout7
initial
begin
	ALUM_labelvalueout7_expected = 1'bX;
end 

// expected ALUM_readMemFlagOut
initial
begin
	ALUM_readMemFlagOut_expected = 1'bX;
end 
// expected ALUM_regAOu[ 7 ]
initial
begin
	ALUM_regAOu_expected[7] = 1'bX;
end 
// expected ALUM_regAOu[ 6 ]
initial
begin
	ALUM_regAOu_expected[6] = 1'bX;
end 
// expected ALUM_regAOu[ 5 ]
initial
begin
	ALUM_regAOu_expected[5] = 1'bX;
end 
// expected ALUM_regAOu[ 4 ]
initial
begin
	ALUM_regAOu_expected[4] = 1'bX;
end 
// expected ALUM_regAOu[ 3 ]
initial
begin
	ALUM_regAOu_expected[3] = 1'bX;
end 
// expected ALUM_regAOu[ 2 ]
initial
begin
	ALUM_regAOu_expected[2] = 1'bX;
end 
// expected ALUM_regAOu[ 1 ]
initial
begin
	ALUM_regAOu_expected[1] = 1'bX;
end 
// expected ALUM_regAOu[ 0 ]
initial
begin
	ALUM_regAOu_expected[0] = 1'bX;
end 
// expected ALUM_regBOut[ 7 ]
initial
begin
	ALUM_regBOut_expected[7] = 1'bX;
end 
// expected ALUM_regBOut[ 6 ]
initial
begin
	ALUM_regBOut_expected[6] = 1'bX;
end 
// expected ALUM_regBOut[ 5 ]
initial
begin
	ALUM_regBOut_expected[5] = 1'bX;
end 
// expected ALUM_regBOut[ 4 ]
initial
begin
	ALUM_regBOut_expected[4] = 1'bX;
end 
// expected ALUM_regBOut[ 3 ]
initial
begin
	ALUM_regBOut_expected[3] = 1'bX;
end 
// expected ALUM_regBOut[ 2 ]
initial
begin
	ALUM_regBOut_expected[2] = 1'bX;
end 
// expected ALUM_regBOut[ 1 ]
initial
begin
	ALUM_regBOut_expected[1] = 1'bX;
end 
// expected ALUM_regBOut[ 0 ]
initial
begin
	ALUM_regBOut_expected[0] = 1'bX;
end 

// expected ALUM_writeMemFlagOut
initial
begin
	ALUM_writeMemFlagOut_expected = 1'bX;
end 
// expected BUSMUX_result[ 7 ]
initial
begin
	BUSMUX_result_expected[7] = 1'bX;
end 
// expected BUSMUX_result[ 6 ]
initial
begin
	BUSMUX_result_expected[6] = 1'bX;
end 
// expected BUSMUX_result[ 5 ]
initial
begin
	BUSMUX_result_expected[5] = 1'bX;
end 
// expected BUSMUX_result[ 4 ]
initial
begin
	BUSMUX_result_expected[4] = 1'bX;
end 
// expected BUSMUX_result[ 3 ]
initial
begin
	BUSMUX_result_expected[3] = 1'bX;
end 
// expected BUSMUX_result[ 2 ]
initial
begin
	BUSMUX_result_expected[2] = 1'bX;
end 
// expected BUSMUX_result[ 1 ]
initial
begin
	BUSMUX_result_expected[1] = 1'bX;
end 
// expected BUSMUX_result[ 0 ]
initial
begin
	BUSMUX_result_expected[0] = 1'bX;
end 
// expected BUSMUX_result_bm1[ 7 ]
initial
begin
	BUSMUX_result_bm1_expected[7] = 1'bX;
end 
// expected BUSMUX_result_bm1[ 6 ]
initial
begin
	BUSMUX_result_bm1_expected[6] = 1'bX;
end 
// expected BUSMUX_result_bm1[ 5 ]
initial
begin
	BUSMUX_result_bm1_expected[5] = 1'bX;
end 
// expected BUSMUX_result_bm1[ 4 ]
initial
begin
	BUSMUX_result_bm1_expected[4] = 1'bX;
end 
// expected BUSMUX_result_bm1[ 3 ]
initial
begin
	BUSMUX_result_bm1_expected[3] = 1'bX;
end 
// expected BUSMUX_result_bm1[ 2 ]
initial
begin
	BUSMUX_result_bm1_expected[2] = 1'bX;
end 
// expected BUSMUX_result_bm1[ 1 ]
initial
begin
	BUSMUX_result_bm1_expected[1] = 1'bX;
end 
// expected BUSMUX_result_bm1[ 0 ]
initial
begin
	BUSMUX_result_bm1_expected[0] = 1'bX;
end 
// expected BUSMUX_result_bm3[ 7 ]
initial
begin
	BUSMUX_result_bm3_expected[7] = 1'bX;
end 
// expected BUSMUX_result_bm3[ 6 ]
initial
begin
	BUSMUX_result_bm3_expected[6] = 1'bX;
end 
// expected BUSMUX_result_bm3[ 5 ]
initial
begin
	BUSMUX_result_bm3_expected[5] = 1'bX;
end 
// expected BUSMUX_result_bm3[ 4 ]
initial
begin
	BUSMUX_result_bm3_expected[4] = 1'bX;
end 
// expected BUSMUX_result_bm3[ 3 ]
initial
begin
	BUSMUX_result_bm3_expected[3] = 1'bX;
end 
// expected BUSMUX_result_bm3[ 2 ]
initial
begin
	BUSMUX_result_bm3_expected[2] = 1'bX;
end 
// expected BUSMUX_result_bm3[ 1 ]
initial
begin
	BUSMUX_result_bm3_expected[1] = 1'bX;
end 
// expected BUSMUX_result_bm3[ 0 ]
initial
begin
	BUSMUX_result_bm3_expected[0] = 1'bX;
end 

// expected clkoutIFID
initial
begin
	clkoutIFID_expected = 1'bX;
end 

// expected clock_out
initial
begin
	clock_out_expected = 1'bX;
end 
// expected currentpc[ 7 ]
initial
begin
	currentpc_expected[7] = 1'bX;
end 
// expected currentpc[ 6 ]
initial
begin
	currentpc_expected[6] = 1'bX;
end 
// expected currentpc[ 5 ]
initial
begin
	currentpc_expected[5] = 1'bX;
end 
// expected currentpc[ 4 ]
initial
begin
	currentpc_expected[4] = 1'bX;
end 
// expected currentpc[ 3 ]
initial
begin
	currentpc_expected[3] = 1'bX;
end 
// expected currentpc[ 2 ]
initial
begin
	currentpc_expected[2] = 1'bX;
end 
// expected currentpc[ 1 ]
initial
begin
	currentpc_expected[1] = 1'bX;
end 
// expected currentpc[ 0 ]
initial
begin
	currentpc_expected[0] = 1'bX;
end 
// expected cycleCounter[ 15 ]
initial
begin
	cycleCounter_expected[15] = 1'bX;
end 
// expected cycleCounter[ 14 ]
initial
begin
	cycleCounter_expected[14] = 1'bX;
end 
// expected cycleCounter[ 13 ]
initial
begin
	cycleCounter_expected[13] = 1'bX;
end 
// expected cycleCounter[ 12 ]
initial
begin
	cycleCounter_expected[12] = 1'bX;
end 
// expected cycleCounter[ 11 ]
initial
begin
	cycleCounter_expected[11] = 1'bX;
end 
// expected cycleCounter[ 10 ]
initial
begin
	cycleCounter_expected[10] = 1'bX;
end 
// expected cycleCounter[ 9 ]
initial
begin
	cycleCounter_expected[9] = 1'bX;
end 
// expected cycleCounter[ 8 ]
initial
begin
	cycleCounter_expected[8] = 1'bX;
end 
// expected cycleCounter[ 7 ]
initial
begin
	cycleCounter_expected[7] = 1'bX;
end 
// expected cycleCounter[ 6 ]
initial
begin
	cycleCounter_expected[6] = 1'bX;
end 
// expected cycleCounter[ 5 ]
initial
begin
	cycleCounter_expected[5] = 1'bX;
end 
// expected cycleCounter[ 4 ]
initial
begin
	cycleCounter_expected[4] = 1'bX;
end 
// expected cycleCounter[ 3 ]
initial
begin
	cycleCounter_expected[3] = 1'bX;
end 
// expected cycleCounter[ 2 ]
initial
begin
	cycleCounter_expected[2] = 1'bX;
end 
// expected cycleCounter[ 1 ]
initial
begin
	cycleCounter_expected[1] = 1'bX;
end 
// expected cycleCounter[ 0 ]
initial
begin
	cycleCounter_expected[0] = 1'bX;
end 

// expected halt_out
initial
begin
	halt_out_expected = 1'bX;
end 
// expected id_branchAddress[ 7 ]
initial
begin
	id_branchAddress_expected[7] = 1'bX;
end 
// expected id_branchAddress[ 6 ]
initial
begin
	id_branchAddress_expected[6] = 1'bX;
end 
// expected id_branchAddress[ 5 ]
initial
begin
	id_branchAddress_expected[5] = 1'bX;
end 
// expected id_branchAddress[ 4 ]
initial
begin
	id_branchAddress_expected[4] = 1'bX;
end 
// expected id_branchAddress[ 3 ]
initial
begin
	id_branchAddress_expected[3] = 1'bX;
end 
// expected id_branchAddress[ 2 ]
initial
begin
	id_branchAddress_expected[2] = 1'bX;
end 
// expected id_branchAddress[ 1 ]
initial
begin
	id_branchAddress_expected[1] = 1'bX;
end 
// expected id_branchAddress[ 0 ]
initial
begin
	id_branchAddress_expected[0] = 1'bX;
end 

// expected id_branchFlag
initial
begin
	id_branchFlag_expected = 1'bX;
end 

// expected id_clkOut
initial
begin
	id_clkOut_expected = 1'bX;
end 

// expected id_haltFlag
initial
begin
	id_haltFlag_expected = 1'bX;
end 

// expected id_immediateFlag
initial
begin
	id_immediateFlag_expected = 1'bX;
end 

// expected id_labelFlag
initial
begin
	id_labelFlag_expected = 1'bX;
end 

// expected id_labelPassFlagOut
initial
begin
	id_labelPassFlagOut_expected = 1'bX;
end 
// expected id_labelValue[ 7 ]
initial
begin
	id_labelValue_expected[7] = 1'bX;
end 
// expected id_labelValue[ 6 ]
initial
begin
	id_labelValue_expected[6] = 1'bX;
end 
// expected id_labelValue[ 5 ]
initial
begin
	id_labelValue_expected[5] = 1'bX;
end 
// expected id_labelValue[ 4 ]
initial
begin
	id_labelValue_expected[4] = 1'bX;
end 
// expected id_labelValue[ 3 ]
initial
begin
	id_labelValue_expected[3] = 1'bX;
end 
// expected id_labelValue[ 2 ]
initial
begin
	id_labelValue_expected[2] = 1'bX;
end 
// expected id_labelValue[ 1 ]
initial
begin
	id_labelValue_expected[1] = 1'bX;
end 
// expected id_labelValue[ 0 ]
initial
begin
	id_labelValue_expected[0] = 1'bX;
end 

// expected id_outputPCResetFlag
initial
begin
	id_outputPCResetFlag_expected = 1'bX;
end 
// expected id_rd2[ 3 ]
initial
begin
	id_rd2_expected[3] = 1'bX;
end 
// expected id_rd2[ 2 ]
initial
begin
	id_rd2_expected[2] = 1'bX;
end 
// expected id_rd2[ 1 ]
initial
begin
	id_rd2_expected[1] = 1'bX;
end 
// expected id_rd2[ 0 ]
initial
begin
	id_rd2_expected[0] = 1'bX;
end 

// expected id_readmem
initial
begin
	id_readmem_expected = 1'bX;
end 
// expected id_regA[ 7 ]
initial
begin
	id_regA_expected[7] = 1'bX;
end 
// expected id_regA[ 6 ]
initial
begin
	id_regA_expected[6] = 1'bX;
end 
// expected id_regA[ 5 ]
initial
begin
	id_regA_expected[5] = 1'bX;
end 
// expected id_regA[ 4 ]
initial
begin
	id_regA_expected[4] = 1'bX;
end 
// expected id_regA[ 3 ]
initial
begin
	id_regA_expected[3] = 1'bX;
end 
// expected id_regA[ 2 ]
initial
begin
	id_regA_expected[2] = 1'bX;
end 
// expected id_regA[ 1 ]
initial
begin
	id_regA_expected[1] = 1'bX;
end 
// expected id_regA[ 0 ]
initial
begin
	id_regA_expected[0] = 1'bX;
end 
// expected id_regB[ 7 ]
initial
begin
	id_regB_expected[7] = 1'bX;
end 
// expected id_regB[ 6 ]
initial
begin
	id_regB_expected[6] = 1'bX;
end 
// expected id_regB[ 5 ]
initial
begin
	id_regB_expected[5] = 1'bX;
end 
// expected id_regB[ 4 ]
initial
begin
	id_regB_expected[4] = 1'bX;
end 
// expected id_regB[ 3 ]
initial
begin
	id_regB_expected[3] = 1'bX;
end 
// expected id_regB[ 2 ]
initial
begin
	id_regB_expected[2] = 1'bX;
end 
// expected id_regB[ 1 ]
initial
begin
	id_regB_expected[1] = 1'bX;
end 
// expected id_regB[ 0 ]
initial
begin
	id_regB_expected[0] = 1'bX;
end 

// expected id_regwrite
initial
begin
	id_regwrite_expected = 1'bX;
end 
// expected id_rs[ 3 ]
initial
begin
	id_rs_expected[3] = 1'bX;
end 
// expected id_rs[ 2 ]
initial
begin
	id_rs_expected[2] = 1'bX;
end 
// expected id_rs[ 1 ]
initial
begin
	id_rs_expected[1] = 1'bX;
end 
// expected id_rs[ 0 ]
initial
begin
	id_rs_expected[0] = 1'bX;
end 
// expected id_rt1[ 3 ]
initial
begin
	id_rt1_expected[3] = 1'bX;
end 
// expected id_rt1[ 2 ]
initial
begin
	id_rt1_expected[2] = 1'bX;
end 
// expected id_rt1[ 1 ]
initial
begin
	id_rt1_expected[1] = 1'bX;
end 
// expected id_rt1[ 0 ]
initial
begin
	id_rt1_expected[0] = 1'bX;
end 

// expected id_signFlag
initial
begin
	id_signFlag_expected = 1'bX;
end 

// expected id_writemem
initial
begin
	id_writemem_expected = 1'bX;
end 
// expected instruction_count[ 15 ]
initial
begin
	instruction_count_expected[15] = 1'bX;
end 
// expected instruction_count[ 14 ]
initial
begin
	instruction_count_expected[14] = 1'bX;
end 
// expected instruction_count[ 13 ]
initial
begin
	instruction_count_expected[13] = 1'bX;
end 
// expected instruction_count[ 12 ]
initial
begin
	instruction_count_expected[12] = 1'bX;
end 
// expected instruction_count[ 11 ]
initial
begin
	instruction_count_expected[11] = 1'bX;
end 
// expected instruction_count[ 10 ]
initial
begin
	instruction_count_expected[10] = 1'bX;
end 
// expected instruction_count[ 9 ]
initial
begin
	instruction_count_expected[9] = 1'bX;
end 
// expected instruction_count[ 8 ]
initial
begin
	instruction_count_expected[8] = 1'bX;
end 
// expected instruction_count[ 7 ]
initial
begin
	instruction_count_expected[7] = 1'bX;
end 
// expected instruction_count[ 6 ]
initial
begin
	instruction_count_expected[6] = 1'bX;
end 
// expected instruction_count[ 5 ]
initial
begin
	instruction_count_expected[5] = 1'bX;
end 
// expected instruction_count[ 4 ]
initial
begin
	instruction_count_expected[4] = 1'bX;
end 
// expected instruction_count[ 3 ]
initial
begin
	instruction_count_expected[3] = 1'bX;
end 
// expected instruction_count[ 2 ]
initial
begin
	instruction_count_expected[2] = 1'bX;
end 
// expected instruction_count[ 1 ]
initial
begin
	instruction_count_expected[1] = 1'bX;
end 
// expected instruction_count[ 0 ]
initial
begin
	instruction_count_expected[0] = 1'bX;
end 
// expected instruction_value[ 7 ]
initial
begin
	instruction_value_expected[7] = 1'bX;
end 
// expected instruction_value[ 6 ]
initial
begin
	instruction_value_expected[6] = 1'bX;
end 
// expected instruction_value[ 5 ]
initial
begin
	instruction_value_expected[5] = 1'bX;
end 
// expected instruction_value[ 4 ]
initial
begin
	instruction_value_expected[4] = 1'bX;
end 
// expected instruction_value[ 3 ]
initial
begin
	instruction_value_expected[3] = 1'bX;
end 
// expected instruction_value[ 2 ]
initial
begin
	instruction_value_expected[2] = 1'bX;
end 
// expected instruction_value[ 1 ]
initial
begin
	instruction_value_expected[1] = 1'bX;
end 
// expected instruction_value[ 0 ]
initial
begin
	instruction_value_expected[0] = 1'bX;
end 
// expected instructionOutIFID[ 7 ]
initial
begin
	instructionOutIFID_expected[7] = 1'bX;
end 
// expected instructionOutIFID[ 6 ]
initial
begin
	instructionOutIFID_expected[6] = 1'bX;
end 
// expected instructionOutIFID[ 5 ]
initial
begin
	instructionOutIFID_expected[5] = 1'bX;
end 
// expected instructionOutIFID[ 4 ]
initial
begin
	instructionOutIFID_expected[4] = 1'bX;
end 
// expected instructionOutIFID[ 3 ]
initial
begin
	instructionOutIFID_expected[3] = 1'bX;
end 
// expected instructionOutIFID[ 2 ]
initial
begin
	instructionOutIFID_expected[2] = 1'bX;
end 
// expected instructionOutIFID[ 1 ]
initial
begin
	instructionOutIFID_expected[1] = 1'bX;
end 
// expected instructionOutIFID[ 0 ]
initial
begin
	instructionOutIFID_expected[0] = 1'bX;
end 

// expected labelpassIFID
initial
begin
	labelpassIFID_expected = 1'bX;
end 
// expected MWB_labelValueOut[ 7 ]
initial
begin
	MWB_labelValueOut_expected[7] = 1'bX;
end 
// expected MWB_labelValueOut[ 6 ]
initial
begin
	MWB_labelValueOut_expected[6] = 1'bX;
end 
// expected MWB_labelValueOut[ 5 ]
initial
begin
	MWB_labelValueOut_expected[5] = 1'bX;
end 
// expected MWB_labelValueOut[ 4 ]
initial
begin
	MWB_labelValueOut_expected[4] = 1'bX;
end 
// expected MWB_labelValueOut[ 3 ]
initial
begin
	MWB_labelValueOut_expected[3] = 1'bX;
end 
// expected MWB_labelValueOut[ 2 ]
initial
begin
	MWB_labelValueOut_expected[2] = 1'bX;
end 
// expected MWB_labelValueOut[ 1 ]
initial
begin
	MWB_labelValueOut_expected[1] = 1'bX;
end 
// expected MWB_labelValueOut[ 0 ]
initial
begin
	MWB_labelValueOut_expected[0] = 1'bX;
end 
// expected MWB_qout[ 7 ]
initial
begin
	MWB_qout_expected[7] = 1'bX;
end 
// expected MWB_qout[ 6 ]
initial
begin
	MWB_qout_expected[6] = 1'bX;
end 
// expected MWB_qout[ 5 ]
initial
begin
	MWB_qout_expected[5] = 1'bX;
end 
// expected MWB_qout[ 4 ]
initial
begin
	MWB_qout_expected[4] = 1'bX;
end 
// expected MWB_qout[ 3 ]
initial
begin
	MWB_qout_expected[3] = 1'bX;
end 
// expected MWB_qout[ 2 ]
initial
begin
	MWB_qout_expected[2] = 1'bX;
end 
// expected MWB_qout[ 1 ]
initial
begin
	MWB_qout_expected[1] = 1'bX;
end 
// expected MWB_qout[ 0 ]
initial
begin
	MWB_qout_expected[0] = 1'bX;
end 

// expected MWB_readmem
initial
begin
	MWB_readmem_expected = 1'bX;
end 
// expected MWB_resultout[ 7 ]
initial
begin
	MWB_resultout_expected[7] = 1'bX;
end 
// expected MWB_resultout[ 6 ]
initial
begin
	MWB_resultout_expected[6] = 1'bX;
end 
// expected MWB_resultout[ 5 ]
initial
begin
	MWB_resultout_expected[5] = 1'bX;
end 
// expected MWB_resultout[ 4 ]
initial
begin
	MWB_resultout_expected[4] = 1'bX;
end 
// expected MWB_resultout[ 3 ]
initial
begin
	MWB_resultout_expected[3] = 1'bX;
end 
// expected MWB_resultout[ 2 ]
initial
begin
	MWB_resultout_expected[2] = 1'bX;
end 
// expected MWB_resultout[ 1 ]
initial
begin
	MWB_resultout_expected[1] = 1'bX;
end 
// expected MWB_resultout[ 0 ]
initial
begin
	MWB_resultout_expected[0] = 1'bX;
end 
// expected opcode_out[ 3 ]
initial
begin
	opcode_out_expected[3] = 1'bX;
end 
// expected opcode_out[ 2 ]
initial
begin
	opcode_out_expected[2] = 1'bX;
end 
// expected opcode_out[ 1 ]
initial
begin
	opcode_out_expected[1] = 1'bX;
end 
// expected opcode_out[ 0 ]
initial
begin
	opcode_out_expected[0] = 1'bX;
end 

// expected orOut
initial
begin
	orOut_expected = 1'bX;
end 

// expected outPCResetFlag
initial
begin
	outPCResetFlag_expected = 1'bX;
end 
// expected pcOutIFID[ 7 ]
initial
begin
	pcOutIFID_expected[7] = 1'bX;
end 
// expected pcOutIFID[ 6 ]
initial
begin
	pcOutIFID_expected[6] = 1'bX;
end 
// expected pcOutIFID[ 5 ]
initial
begin
	pcOutIFID_expected[5] = 1'bX;
end 
// expected pcOutIFID[ 4 ]
initial
begin
	pcOutIFID_expected[4] = 1'bX;
end 
// expected pcOutIFID[ 3 ]
initial
begin
	pcOutIFID_expected[3] = 1'bX;
end 
// expected pcOutIFID[ 2 ]
initial
begin
	pcOutIFID_expected[2] = 1'bX;
end 
// expected pcOutIFID[ 1 ]
initial
begin
	pcOutIFID_expected[1] = 1'bX;
end 
// expected pcOutIFID[ 0 ]
initial
begin
	pcOutIFID_expected[0] = 1'bX;
end 

// expected pcresetIFID
initial
begin
	pcresetIFID_expected = 1'bX;
end 
// expected ramOut[ 7 ]
initial
begin
	ramOut_expected[7] = 1'bX;
end 
// expected ramOut[ 6 ]
initial
begin
	ramOut_expected[6] = 1'bX;
end 
// expected ramOut[ 5 ]
initial
begin
	ramOut_expected[5] = 1'bX;
end 
// expected ramOut[ 4 ]
initial
begin
	ramOut_expected[4] = 1'bX;
end 
// expected ramOut[ 3 ]
initial
begin
	ramOut_expected[3] = 1'bX;
end 
// expected ramOut[ 2 ]
initial
begin
	ramOut_expected[2] = 1'bX;
end 
// expected ramOut[ 1 ]
initial
begin
	ramOut_expected[1] = 1'bX;
end 
// expected ramOut[ 0 ]
initial
begin
	ramOut_expected[0] = 1'bX;
end 

// expected REGALU_immediateFlagOut
initial
begin
	REGALU_immediateFlagOut_expected = 1'bX;
end 

// expected REGALU_labelFlagOut
initial
begin
	REGALU_labelFlagOut_expected = 1'bX;
end 
// expected REGALU_labelValueOut[ 7 ]
initial
begin
	REGALU_labelValueOut_expected[7] = 1'bX;
end 
// expected REGALU_labelValueOut[ 6 ]
initial
begin
	REGALU_labelValueOut_expected[6] = 1'bX;
end 
// expected REGALU_labelValueOut[ 5 ]
initial
begin
	REGALU_labelValueOut_expected[5] = 1'bX;
end 
// expected REGALU_labelValueOut[ 4 ]
initial
begin
	REGALU_labelValueOut_expected[4] = 1'bX;
end 
// expected REGALU_labelValueOut[ 3 ]
initial
begin
	REGALU_labelValueOut_expected[3] = 1'bX;
end 
// expected REGALU_labelValueOut[ 2 ]
initial
begin
	REGALU_labelValueOut_expected[2] = 1'bX;
end 
// expected REGALU_labelValueOut[ 1 ]
initial
begin
	REGALU_labelValueOut_expected[1] = 1'bX;
end 
// expected REGALU_labelValueOut[ 0 ]
initial
begin
	REGALU_labelValueOut_expected[0] = 1'bX;
end 
// expected REGALU_opcodeOut[ 3 ]
initial
begin
	REGALU_opcodeOut_expected[3] = 1'bX;
end 
// expected REGALU_opcodeOut[ 2 ]
initial
begin
	REGALU_opcodeOut_expected[2] = 1'bX;
end 
// expected REGALU_opcodeOut[ 1 ]
initial
begin
	REGALU_opcodeOut_expected[1] = 1'bX;
end 
// expected REGALU_opcodeOut[ 0 ]
initial
begin
	REGALU_opcodeOut_expected[0] = 1'bX;
end 

// expected REGALU_readMemFlagOut
initial
begin
	REGALU_readMemFlagOut_expected = 1'bX;
end 
// expected REGALU_regAOut[ 7 ]
initial
begin
	REGALU_regAOut_expected[7] = 1'bX;
end 
// expected REGALU_regAOut[ 6 ]
initial
begin
	REGALU_regAOut_expected[6] = 1'bX;
end 
// expected REGALU_regAOut[ 5 ]
initial
begin
	REGALU_regAOut_expected[5] = 1'bX;
end 
// expected REGALU_regAOut[ 4 ]
initial
begin
	REGALU_regAOut_expected[4] = 1'bX;
end 
// expected REGALU_regAOut[ 3 ]
initial
begin
	REGALU_regAOut_expected[3] = 1'bX;
end 
// expected REGALU_regAOut[ 2 ]
initial
begin
	REGALU_regAOut_expected[2] = 1'bX;
end 
// expected REGALU_regAOut[ 1 ]
initial
begin
	REGALU_regAOut_expected[1] = 1'bX;
end 
// expected REGALU_regAOut[ 0 ]
initial
begin
	REGALU_regAOut_expected[0] = 1'bX;
end 
// expected REGALU_regBOut[ 7 ]
initial
begin
	REGALU_regBOut_expected[7] = 1'bX;
end 
// expected REGALU_regBOut[ 6 ]
initial
begin
	REGALU_regBOut_expected[6] = 1'bX;
end 
// expected REGALU_regBOut[ 5 ]
initial
begin
	REGALU_regBOut_expected[5] = 1'bX;
end 
// expected REGALU_regBOut[ 4 ]
initial
begin
	REGALU_regBOut_expected[4] = 1'bX;
end 
// expected REGALU_regBOut[ 3 ]
initial
begin
	REGALU_regBOut_expected[3] = 1'bX;
end 
// expected REGALU_regBOut[ 2 ]
initial
begin
	REGALU_regBOut_expected[2] = 1'bX;
end 
// expected REGALU_regBOut[ 1 ]
initial
begin
	REGALU_regBOut_expected[1] = 1'bX;
end 
// expected REGALU_regBOut[ 0 ]
initial
begin
	REGALU_regBOut_expected[0] = 1'bX;
end 

// expected REGALU_signFlagOut
initial
begin
	REGALU_signFlagOut_expected = 1'bX;
end 
// expected REGALU_valueOut[ 7 ]
initial
begin
	REGALU_valueOut_expected[7] = 1'bX;
end 
// expected REGALU_valueOut[ 6 ]
initial
begin
	REGALU_valueOut_expected[6] = 1'bX;
end 
// expected REGALU_valueOut[ 5 ]
initial
begin
	REGALU_valueOut_expected[5] = 1'bX;
end 
// expected REGALU_valueOut[ 4 ]
initial
begin
	REGALU_valueOut_expected[4] = 1'bX;
end 
// expected REGALU_valueOut[ 3 ]
initial
begin
	REGALU_valueOut_expected[3] = 1'bX;
end 
// expected REGALU_valueOut[ 2 ]
initial
begin
	REGALU_valueOut_expected[2] = 1'bX;
end 
// expected REGALU_valueOut[ 1 ]
initial
begin
	REGALU_valueOut_expected[1] = 1'bX;
end 
// expected REGALU_valueOut[ 0 ]
initial
begin
	REGALU_valueOut_expected[0] = 1'bX;
end 

// expected REGALU_writeMemFlagOut
initial
begin
	REGALU_writeMemFlagOut_expected = 1'bX;
end 
// expected val[ 7 ]
initial
begin
	val_expected[7] = 1'bX;
end 
// expected val[ 6 ]
initial
begin
	val_expected[6] = 1'bX;
end 
// expected val[ 5 ]
initial
begin
	val_expected[5] = 1'bX;
end 
// expected val[ 4 ]
initial
begin
	val_expected[4] = 1'bX;
end 
// expected val[ 3 ]
initial
begin
	val_expected[3] = 1'bX;
end 
// expected val[ 2 ]
initial
begin
	val_expected[2] = 1'bX;
end 
// expected val[ 1 ]
initial
begin
	val_expected[1] = 1'bX;
end 
// expected val[ 0 ]
initial
begin
	val_expected[0] = 1'bX;
end 

// expected WMB_labelflagOut
initial
begin
	WMB_labelflagOut_expected = 1'bX;
end 
// generate trigger
always @(alu_lessThanFlag_expected or alu_lessThanFlag or alu_overflow_expected or alu_overflow or alu_overflowFlag_expected or alu_overflowFlag or alu_result_expected or alu_result or aluIn0_expected or aluIn0 or ALUM_ALUResultOut_expected or ALUM_ALUResultOut or ALUM_labelvalueout_expected or ALUM_labelvalueout or ALUM_labelvalueout0_expected or ALUM_labelvalueout0 or ALUM_labelvalueout1_expected or ALUM_labelvalueout1 or ALUM_labelvalueout2_expected or ALUM_labelvalueout2 or ALUM_labelvalueout3_expected or ALUM_labelvalueout3 or ALUM_labelvalueout4_expected or ALUM_labelvalueout4 or ALUM_labelvalueout5_expected or ALUM_labelvalueout5 or ALUM_labelvalueout6_expected or ALUM_labelvalueout6 or ALUM_labelvalueout7_expected or ALUM_labelvalueout7 or ALUM_readMemFlagOut_expected or ALUM_readMemFlagOut or ALUM_regAOu_expected or ALUM_regAOu or ALUM_regBOut_expected or ALUM_regBOut or ALUM_writeMemFlagOut_expected or ALUM_writeMemFlagOut or BUSMUX_result_expected or BUSMUX_result or BUSMUX_result_bm1_expected or BUSMUX_result_bm1 or BUSMUX_result_bm3_expected or BUSMUX_result_bm3 or clkoutIFID_expected or clkoutIFID or clock_out_expected or clock_out or currentpc_expected or currentpc or cycleCounter_expected or cycleCounter or halt_out_expected or halt_out or id_branchAddress_expected or id_branchAddress or id_branchFlag_expected or id_branchFlag or id_clkOut_expected or id_clkOut or id_haltFlag_expected or id_haltFlag or id_immediateFlag_expected or id_immediateFlag or id_labelFlag_expected or id_labelFlag or id_labelPassFlagOut_expected or id_labelPassFlagOut or id_labelValue_expected or id_labelValue or id_outputPCResetFlag_expected or id_outputPCResetFlag or id_rd2_expected or id_rd2 or id_readmem_expected or id_readmem or id_regA_expected or id_regA or id_regB_expected or id_regB or id_regwrite_expected or id_regwrite or id_rs_expected or id_rs or id_rt1_expected or id_rt1 or id_signFlag_expected or id_signFlag or id_writemem_expected or id_writemem or instruction_count_expected or instruction_count or instruction_value_expected or instruction_value or instructionOutIFID_expected or instructionOutIFID or labelpassIFID_expected or labelpassIFID or MWB_labelValueOut_expected or MWB_labelValueOut or MWB_qout_expected or MWB_qout or MWB_readmem_expected or MWB_readmem or MWB_resultout_expected or MWB_resultout or opcode_out_expected or opcode_out or orOut_expected or orOut or outPCResetFlag_expected or outPCResetFlag or pcOutIFID_expected or pcOutIFID or pcresetIFID_expected or pcresetIFID or ramOut_expected or ramOut or REGALU_immediateFlagOut_expected or REGALU_immediateFlagOut or REGALU_labelFlagOut_expected or REGALU_labelFlagOut or REGALU_labelValueOut_expected or REGALU_labelValueOut or REGALU_opcodeOut_expected or REGALU_opcodeOut or REGALU_readMemFlagOut_expected or REGALU_readMemFlagOut or REGALU_regAOut_expected or REGALU_regAOut or REGALU_regBOut_expected or REGALU_regBOut or REGALU_signFlagOut_expected or REGALU_signFlagOut or REGALU_valueOut_expected or REGALU_valueOut or REGALU_writeMemFlagOut_expected or REGALU_writeMemFlagOut or val_expected or val or WMB_labelflagOut_expected or WMB_labelflagOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alu_lessThanFlag = %b | expected alu_overflow = %b | expected alu_overflowFlag = %b | expected alu_result = %b | expected aluIn0 = %b | expected ALUM_ALUResultOut = %b | expected ALUM_labelvalueout = %b | expected ALUM_labelvalueout0 = %b | expected ALUM_labelvalueout1 = %b | expected ALUM_labelvalueout2 = %b | expected ALUM_labelvalueout3 = %b | expected ALUM_labelvalueout4 = %b | expected ALUM_labelvalueout5 = %b | expected ALUM_labelvalueout6 = %b | expected ALUM_labelvalueout7 = %b | expected ALUM_readMemFlagOut = %b | expected ALUM_regAOu = %b | expected ALUM_regBOut = %b | expected ALUM_writeMemFlagOut = %b | expected BUSMUX_result = %b | expected BUSMUX_result_bm1 = %b | expected BUSMUX_result_bm3 = %b | expected clkoutIFID = %b | expected clock_out = %b | expected currentpc = %b | expected cycleCounter = %b | expected halt_out = %b | expected id_branchAddress = %b | expected id_branchFlag = %b | expected id_clkOut = %b | expected id_haltFlag = %b | expected id_immediateFlag = %b | expected id_labelFlag = %b | expected id_labelPassFlagOut = %b | expected id_labelValue = %b | expected id_outputPCResetFlag = %b | expected id_rd2 = %b | expected id_readmem = %b | expected id_regA = %b | expected id_regB = %b | expected id_regwrite = %b | expected id_rs = %b | expected id_rt1 = %b | expected id_signFlag = %b | expected id_writemem = %b | expected instruction_count = %b | expected instruction_value = %b | expected instructionOutIFID = %b | expected labelpassIFID = %b | expected MWB_labelValueOut = %b | expected MWB_qout = %b | expected MWB_readmem = %b | expected MWB_resultout = %b | expected opcode_out = %b | expected orOut = %b | expected outPCResetFlag = %b | expected pcOutIFID = %b | expected pcresetIFID = %b | expected ramOut = %b | expected REGALU_immediateFlagOut = %b | expected REGALU_labelFlagOut = %b | expected REGALU_labelValueOut = %b | expected REGALU_opcodeOut = %b | expected REGALU_readMemFlagOut = %b | expected REGALU_regAOut = %b | expected REGALU_regBOut = %b | expected REGALU_signFlagOut = %b | expected REGALU_valueOut = %b | expected REGALU_writeMemFlagOut = %b | expected val = %b | expected WMB_labelflagOut = %b | ",alu_lessThanFlag_expected_prev,alu_overflow_expected_prev,alu_overflowFlag_expected_prev,alu_result_expected_prev,aluIn0_expected_prev,ALUM_ALUResultOut_expected_prev,ALUM_labelvalueout_expected_prev,ALUM_labelvalueout0_expected_prev,ALUM_labelvalueout1_expected_prev,ALUM_labelvalueout2_expected_prev,ALUM_labelvalueout3_expected_prev,ALUM_labelvalueout4_expected_prev,ALUM_labelvalueout5_expected_prev,ALUM_labelvalueout6_expected_prev,ALUM_labelvalueout7_expected_prev,ALUM_readMemFlagOut_expected_prev,ALUM_regAOu_expected_prev,ALUM_regBOut_expected_prev,ALUM_writeMemFlagOut_expected_prev,BUSMUX_result_expected_prev,BUSMUX_result_bm1_expected_prev,BUSMUX_result_bm3_expected_prev,clkoutIFID_expected_prev,clock_out_expected_prev,currentpc_expected_prev,cycleCounter_expected_prev,halt_out_expected_prev,id_branchAddress_expected_prev,id_branchFlag_expected_prev,id_clkOut_expected_prev,id_haltFlag_expected_prev,id_immediateFlag_expected_prev,id_labelFlag_expected_prev,id_labelPassFlagOut_expected_prev,id_labelValue_expected_prev,id_outputPCResetFlag_expected_prev,id_rd2_expected_prev,id_readmem_expected_prev,id_regA_expected_prev,id_regB_expected_prev,id_regwrite_expected_prev,id_rs_expected_prev,id_rt1_expected_prev,id_signFlag_expected_prev,id_writemem_expected_prev,instruction_count_expected_prev,instruction_value_expected_prev,instructionOutIFID_expected_prev,labelpassIFID_expected_prev,MWB_labelValueOut_expected_prev,MWB_qout_expected_prev,MWB_readmem_expected_prev,MWB_resultout_expected_prev,opcode_out_expected_prev,orOut_expected_prev,outPCResetFlag_expected_prev,pcOutIFID_expected_prev,pcresetIFID_expected_prev,ramOut_expected_prev,REGALU_immediateFlagOut_expected_prev,REGALU_labelFlagOut_expected_prev,REGALU_labelValueOut_expected_prev,REGALU_opcodeOut_expected_prev,REGALU_readMemFlagOut_expected_prev,REGALU_regAOut_expected_prev,REGALU_regBOut_expected_prev,REGALU_signFlagOut_expected_prev,REGALU_valueOut_expected_prev,REGALU_writeMemFlagOut_expected_prev,val_expected_prev,WMB_labelflagOut_expected_prev);
	$display("| real alu_lessThanFlag = %b | real alu_overflow = %b | real alu_overflowFlag = %b | real alu_result = %b | real aluIn0 = %b | real ALUM_ALUResultOut = %b | real ALUM_labelvalueout = %b | real ALUM_labelvalueout0 = %b | real ALUM_labelvalueout1 = %b | real ALUM_labelvalueout2 = %b | real ALUM_labelvalueout3 = %b | real ALUM_labelvalueout4 = %b | real ALUM_labelvalueout5 = %b | real ALUM_labelvalueout6 = %b | real ALUM_labelvalueout7 = %b | real ALUM_readMemFlagOut = %b | real ALUM_regAOu = %b | real ALUM_regBOut = %b | real ALUM_writeMemFlagOut = %b | real BUSMUX_result = %b | real BUSMUX_result_bm1 = %b | real BUSMUX_result_bm3 = %b | real clkoutIFID = %b | real clock_out = %b | real currentpc = %b | real cycleCounter = %b | real halt_out = %b | real id_branchAddress = %b | real id_branchFlag = %b | real id_clkOut = %b | real id_haltFlag = %b | real id_immediateFlag = %b | real id_labelFlag = %b | real id_labelPassFlagOut = %b | real id_labelValue = %b | real id_outputPCResetFlag = %b | real id_rd2 = %b | real id_readmem = %b | real id_regA = %b | real id_regB = %b | real id_regwrite = %b | real id_rs = %b | real id_rt1 = %b | real id_signFlag = %b | real id_writemem = %b | real instruction_count = %b | real instruction_value = %b | real instructionOutIFID = %b | real labelpassIFID = %b | real MWB_labelValueOut = %b | real MWB_qout = %b | real MWB_readmem = %b | real MWB_resultout = %b | real opcode_out = %b | real orOut = %b | real outPCResetFlag = %b | real pcOutIFID = %b | real pcresetIFID = %b | real ramOut = %b | real REGALU_immediateFlagOut = %b | real REGALU_labelFlagOut = %b | real REGALU_labelValueOut = %b | real REGALU_opcodeOut = %b | real REGALU_readMemFlagOut = %b | real REGALU_regAOut = %b | real REGALU_regBOut = %b | real REGALU_signFlagOut = %b | real REGALU_valueOut = %b | real REGALU_writeMemFlagOut = %b | real val = %b | real WMB_labelflagOut = %b | ",alu_lessThanFlag_prev,alu_overflow_prev,alu_overflowFlag_prev,alu_result_prev,aluIn0_prev,ALUM_ALUResultOut_prev,ALUM_labelvalueout_prev,ALUM_labelvalueout0_prev,ALUM_labelvalueout1_prev,ALUM_labelvalueout2_prev,ALUM_labelvalueout3_prev,ALUM_labelvalueout4_prev,ALUM_labelvalueout5_prev,ALUM_labelvalueout6_prev,ALUM_labelvalueout7_prev,ALUM_readMemFlagOut_prev,ALUM_regAOu_prev,ALUM_regBOut_prev,ALUM_writeMemFlagOut_prev,BUSMUX_result_prev,BUSMUX_result_bm1_prev,BUSMUX_result_bm3_prev,clkoutIFID_prev,clock_out_prev,currentpc_prev,cycleCounter_prev,halt_out_prev,id_branchAddress_prev,id_branchFlag_prev,id_clkOut_prev,id_haltFlag_prev,id_immediateFlag_prev,id_labelFlag_prev,id_labelPassFlagOut_prev,id_labelValue_prev,id_outputPCResetFlag_prev,id_rd2_prev,id_readmem_prev,id_regA_prev,id_regB_prev,id_regwrite_prev,id_rs_prev,id_rt1_prev,id_signFlag_prev,id_writemem_prev,instruction_count_prev,instruction_value_prev,instructionOutIFID_prev,labelpassIFID_prev,MWB_labelValueOut_prev,MWB_qout_prev,MWB_readmem_prev,MWB_resultout_prev,opcode_out_prev,orOut_prev,outPCResetFlag_prev,pcOutIFID_prev,pcresetIFID_prev,ramOut_prev,REGALU_immediateFlagOut_prev,REGALU_labelFlagOut_prev,REGALU_labelValueOut_prev,REGALU_opcodeOut_prev,REGALU_readMemFlagOut_prev,REGALU_regAOut_prev,REGALU_regBOut_prev,REGALU_signFlagOut_prev,REGALU_valueOut_prev,REGALU_writeMemFlagOut_prev,val_prev,WMB_labelflagOut_prev);
`endif
	if (
		( alu_lessThanFlag_expected_prev !== 1'bx ) && ( alu_lessThanFlag_prev !== alu_lessThanFlag_expected_prev )
		&& ((alu_lessThanFlag_expected_prev !== last_alu_lessThanFlag_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_lessThanFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_lessThanFlag_expected_prev);
		$display ("     Real value = %b", alu_lessThanFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_lessThanFlag_exp = alu_lessThanFlag_expected_prev;
	end
	if (
		( alu_overflow_expected_prev[0] !== 1'bx ) && ( alu_overflow_prev[0] !== alu_overflow_expected_prev[0] )
		&& ((alu_overflow_expected_prev[0] !== last_alu_overflow_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_overflow[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_overflow_expected_prev);
		$display ("     Real value = %b", alu_overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_overflow_exp[0] = alu_overflow_expected_prev[0];
	end
	if (
		( alu_overflow_expected_prev[1] !== 1'bx ) && ( alu_overflow_prev[1] !== alu_overflow_expected_prev[1] )
		&& ((alu_overflow_expected_prev[1] !== last_alu_overflow_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_overflow[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_overflow_expected_prev);
		$display ("     Real value = %b", alu_overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_overflow_exp[1] = alu_overflow_expected_prev[1];
	end
	if (
		( alu_overflow_expected_prev[2] !== 1'bx ) && ( alu_overflow_prev[2] !== alu_overflow_expected_prev[2] )
		&& ((alu_overflow_expected_prev[2] !== last_alu_overflow_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_overflow[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_overflow_expected_prev);
		$display ("     Real value = %b", alu_overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_overflow_exp[2] = alu_overflow_expected_prev[2];
	end
	if (
		( alu_overflow_expected_prev[3] !== 1'bx ) && ( alu_overflow_prev[3] !== alu_overflow_expected_prev[3] )
		&& ((alu_overflow_expected_prev[3] !== last_alu_overflow_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_overflow[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_overflow_expected_prev);
		$display ("     Real value = %b", alu_overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_overflow_exp[3] = alu_overflow_expected_prev[3];
	end
	if (
		( alu_overflow_expected_prev[4] !== 1'bx ) && ( alu_overflow_prev[4] !== alu_overflow_expected_prev[4] )
		&& ((alu_overflow_expected_prev[4] !== last_alu_overflow_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_overflow[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_overflow_expected_prev);
		$display ("     Real value = %b", alu_overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_overflow_exp[4] = alu_overflow_expected_prev[4];
	end
	if (
		( alu_overflow_expected_prev[5] !== 1'bx ) && ( alu_overflow_prev[5] !== alu_overflow_expected_prev[5] )
		&& ((alu_overflow_expected_prev[5] !== last_alu_overflow_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_overflow[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_overflow_expected_prev);
		$display ("     Real value = %b", alu_overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_overflow_exp[5] = alu_overflow_expected_prev[5];
	end
	if (
		( alu_overflow_expected_prev[6] !== 1'bx ) && ( alu_overflow_prev[6] !== alu_overflow_expected_prev[6] )
		&& ((alu_overflow_expected_prev[6] !== last_alu_overflow_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_overflow[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_overflow_expected_prev);
		$display ("     Real value = %b", alu_overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_overflow_exp[6] = alu_overflow_expected_prev[6];
	end
	if (
		( alu_overflow_expected_prev[7] !== 1'bx ) && ( alu_overflow_prev[7] !== alu_overflow_expected_prev[7] )
		&& ((alu_overflow_expected_prev[7] !== last_alu_overflow_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_overflow[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_overflow_expected_prev);
		$display ("     Real value = %b", alu_overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_overflow_exp[7] = alu_overflow_expected_prev[7];
	end
	if (
		( alu_overflowFlag_expected_prev !== 1'bx ) && ( alu_overflowFlag_prev !== alu_overflowFlag_expected_prev )
		&& ((alu_overflowFlag_expected_prev !== last_alu_overflowFlag_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_overflowFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_overflowFlag_expected_prev);
		$display ("     Real value = %b", alu_overflowFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_overflowFlag_exp = alu_overflowFlag_expected_prev;
	end
	if (
		( alu_result_expected_prev[0] !== 1'bx ) && ( alu_result_prev[0] !== alu_result_expected_prev[0] )
		&& ((alu_result_expected_prev[0] !== last_alu_result_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_alu_result_exp[0] = alu_result_expected_prev[0];
	end
	if (
		( alu_result_expected_prev[1] !== 1'bx ) && ( alu_result_prev[1] !== alu_result_expected_prev[1] )
		&& ((alu_result_expected_prev[1] !== last_alu_result_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_alu_result_exp[1] = alu_result_expected_prev[1];
	end
	if (
		( alu_result_expected_prev[2] !== 1'bx ) && ( alu_result_prev[2] !== alu_result_expected_prev[2] )
		&& ((alu_result_expected_prev[2] !== last_alu_result_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_alu_result_exp[2] = alu_result_expected_prev[2];
	end
	if (
		( alu_result_expected_prev[3] !== 1'bx ) && ( alu_result_prev[3] !== alu_result_expected_prev[3] )
		&& ((alu_result_expected_prev[3] !== last_alu_result_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_alu_result_exp[3] = alu_result_expected_prev[3];
	end
	if (
		( alu_result_expected_prev[4] !== 1'bx ) && ( alu_result_prev[4] !== alu_result_expected_prev[4] )
		&& ((alu_result_expected_prev[4] !== last_alu_result_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_alu_result_exp[4] = alu_result_expected_prev[4];
	end
	if (
		( alu_result_expected_prev[5] !== 1'bx ) && ( alu_result_prev[5] !== alu_result_expected_prev[5] )
		&& ((alu_result_expected_prev[5] !== last_alu_result_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_alu_result_exp[5] = alu_result_expected_prev[5];
	end
	if (
		( alu_result_expected_prev[6] !== 1'bx ) && ( alu_result_prev[6] !== alu_result_expected_prev[6] )
		&& ((alu_result_expected_prev[6] !== last_alu_result_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_alu_result_exp[6] = alu_result_expected_prev[6];
	end
	if (
		( alu_result_expected_prev[7] !== 1'bx ) && ( alu_result_prev[7] !== alu_result_expected_prev[7] )
		&& ((alu_result_expected_prev[7] !== last_alu_result_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_alu_result_exp[7] = alu_result_expected_prev[7];
	end
	if (
		( aluIn0_expected_prev[0] !== 1'bx ) && ( aluIn0_prev[0] !== aluIn0_expected_prev[0] )
		&& ((aluIn0_expected_prev[0] !== last_aluIn0_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_aluIn0_exp[0] = aluIn0_expected_prev[0];
	end
	if (
		( aluIn0_expected_prev[1] !== 1'bx ) && ( aluIn0_prev[1] !== aluIn0_expected_prev[1] )
		&& ((aluIn0_expected_prev[1] !== last_aluIn0_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_aluIn0_exp[1] = aluIn0_expected_prev[1];
	end
	if (
		( aluIn0_expected_prev[2] !== 1'bx ) && ( aluIn0_prev[2] !== aluIn0_expected_prev[2] )
		&& ((aluIn0_expected_prev[2] !== last_aluIn0_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_aluIn0_exp[2] = aluIn0_expected_prev[2];
	end
	if (
		( aluIn0_expected_prev[3] !== 1'bx ) && ( aluIn0_prev[3] !== aluIn0_expected_prev[3] )
		&& ((aluIn0_expected_prev[3] !== last_aluIn0_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_aluIn0_exp[3] = aluIn0_expected_prev[3];
	end
	if (
		( aluIn0_expected_prev[4] !== 1'bx ) && ( aluIn0_prev[4] !== aluIn0_expected_prev[4] )
		&& ((aluIn0_expected_prev[4] !== last_aluIn0_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_aluIn0_exp[4] = aluIn0_expected_prev[4];
	end
	if (
		( aluIn0_expected_prev[5] !== 1'bx ) && ( aluIn0_prev[5] !== aluIn0_expected_prev[5] )
		&& ((aluIn0_expected_prev[5] !== last_aluIn0_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_aluIn0_exp[5] = aluIn0_expected_prev[5];
	end
	if (
		( aluIn0_expected_prev[6] !== 1'bx ) && ( aluIn0_prev[6] !== aluIn0_expected_prev[6] )
		&& ((aluIn0_expected_prev[6] !== last_aluIn0_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_aluIn0_exp[6] = aluIn0_expected_prev[6];
	end
	if (
		( aluIn0_expected_prev[7] !== 1'bx ) && ( aluIn0_prev[7] !== aluIn0_expected_prev[7] )
		&& ((aluIn0_expected_prev[7] !== last_aluIn0_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluIn0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluIn0_expected_prev);
		$display ("     Real value = %b", aluIn0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_aluIn0_exp[7] = aluIn0_expected_prev[7];
	end
	if (
		( ALUM_ALUResultOut_expected_prev[0] !== 1'bx ) && ( ALUM_ALUResultOut_prev[0] !== ALUM_ALUResultOut_expected_prev[0] )
		&& ((ALUM_ALUResultOut_expected_prev[0] !== last_ALUM_ALUResultOut_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_ALUResultOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_ALUResultOut_expected_prev);
		$display ("     Real value = %b", ALUM_ALUResultOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ALUM_ALUResultOut_exp[0] = ALUM_ALUResultOut_expected_prev[0];
	end
	if (
		( ALUM_ALUResultOut_expected_prev[1] !== 1'bx ) && ( ALUM_ALUResultOut_prev[1] !== ALUM_ALUResultOut_expected_prev[1] )
		&& ((ALUM_ALUResultOut_expected_prev[1] !== last_ALUM_ALUResultOut_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_ALUResultOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_ALUResultOut_expected_prev);
		$display ("     Real value = %b", ALUM_ALUResultOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ALUM_ALUResultOut_exp[1] = ALUM_ALUResultOut_expected_prev[1];
	end
	if (
		( ALUM_ALUResultOut_expected_prev[2] !== 1'bx ) && ( ALUM_ALUResultOut_prev[2] !== ALUM_ALUResultOut_expected_prev[2] )
		&& ((ALUM_ALUResultOut_expected_prev[2] !== last_ALUM_ALUResultOut_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_ALUResultOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_ALUResultOut_expected_prev);
		$display ("     Real value = %b", ALUM_ALUResultOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ALUM_ALUResultOut_exp[2] = ALUM_ALUResultOut_expected_prev[2];
	end
	if (
		( ALUM_ALUResultOut_expected_prev[3] !== 1'bx ) && ( ALUM_ALUResultOut_prev[3] !== ALUM_ALUResultOut_expected_prev[3] )
		&& ((ALUM_ALUResultOut_expected_prev[3] !== last_ALUM_ALUResultOut_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_ALUResultOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_ALUResultOut_expected_prev);
		$display ("     Real value = %b", ALUM_ALUResultOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ALUM_ALUResultOut_exp[3] = ALUM_ALUResultOut_expected_prev[3];
	end
	if (
		( ALUM_ALUResultOut_expected_prev[4] !== 1'bx ) && ( ALUM_ALUResultOut_prev[4] !== ALUM_ALUResultOut_expected_prev[4] )
		&& ((ALUM_ALUResultOut_expected_prev[4] !== last_ALUM_ALUResultOut_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_ALUResultOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_ALUResultOut_expected_prev);
		$display ("     Real value = %b", ALUM_ALUResultOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ALUM_ALUResultOut_exp[4] = ALUM_ALUResultOut_expected_prev[4];
	end
	if (
		( ALUM_ALUResultOut_expected_prev[5] !== 1'bx ) && ( ALUM_ALUResultOut_prev[5] !== ALUM_ALUResultOut_expected_prev[5] )
		&& ((ALUM_ALUResultOut_expected_prev[5] !== last_ALUM_ALUResultOut_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_ALUResultOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_ALUResultOut_expected_prev);
		$display ("     Real value = %b", ALUM_ALUResultOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ALUM_ALUResultOut_exp[5] = ALUM_ALUResultOut_expected_prev[5];
	end
	if (
		( ALUM_ALUResultOut_expected_prev[6] !== 1'bx ) && ( ALUM_ALUResultOut_prev[6] !== ALUM_ALUResultOut_expected_prev[6] )
		&& ((ALUM_ALUResultOut_expected_prev[6] !== last_ALUM_ALUResultOut_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_ALUResultOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_ALUResultOut_expected_prev);
		$display ("     Real value = %b", ALUM_ALUResultOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ALUM_ALUResultOut_exp[6] = ALUM_ALUResultOut_expected_prev[6];
	end
	if (
		( ALUM_ALUResultOut_expected_prev[7] !== 1'bx ) && ( ALUM_ALUResultOut_prev[7] !== ALUM_ALUResultOut_expected_prev[7] )
		&& ((ALUM_ALUResultOut_expected_prev[7] !== last_ALUM_ALUResultOut_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_ALUResultOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_ALUResultOut_expected_prev);
		$display ("     Real value = %b", ALUM_ALUResultOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ALUM_ALUResultOut_exp[7] = ALUM_ALUResultOut_expected_prev[7];
	end
	if (
		( ALUM_labelvalueout_expected_prev !== 1'bx ) && ( ALUM_labelvalueout_prev !== ALUM_labelvalueout_expected_prev )
		&& ((ALUM_labelvalueout_expected_prev !== last_ALUM_labelvalueout_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_labelvalueout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_labelvalueout_expected_prev);
		$display ("     Real value = %b", ALUM_labelvalueout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ALUM_labelvalueout_exp = ALUM_labelvalueout_expected_prev;
	end
	if (
		( ALUM_labelvalueout0_expected_prev !== 1'bx ) && ( ALUM_labelvalueout0_prev !== ALUM_labelvalueout0_expected_prev )
		&& ((ALUM_labelvalueout0_expected_prev !== last_ALUM_labelvalueout0_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_labelvalueout0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_labelvalueout0_expected_prev);
		$display ("     Real value = %b", ALUM_labelvalueout0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ALUM_labelvalueout0_exp = ALUM_labelvalueout0_expected_prev;
	end
	if (
		( ALUM_labelvalueout1_expected_prev !== 1'bx ) && ( ALUM_labelvalueout1_prev !== ALUM_labelvalueout1_expected_prev )
		&& ((ALUM_labelvalueout1_expected_prev !== last_ALUM_labelvalueout1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_labelvalueout1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_labelvalueout1_expected_prev);
		$display ("     Real value = %b", ALUM_labelvalueout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ALUM_labelvalueout1_exp = ALUM_labelvalueout1_expected_prev;
	end
	if (
		( ALUM_labelvalueout2_expected_prev !== 1'bx ) && ( ALUM_labelvalueout2_prev !== ALUM_labelvalueout2_expected_prev )
		&& ((ALUM_labelvalueout2_expected_prev !== last_ALUM_labelvalueout2_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_labelvalueout2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_labelvalueout2_expected_prev);
		$display ("     Real value = %b", ALUM_labelvalueout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ALUM_labelvalueout2_exp = ALUM_labelvalueout2_expected_prev;
	end
	if (
		( ALUM_labelvalueout3_expected_prev !== 1'bx ) && ( ALUM_labelvalueout3_prev !== ALUM_labelvalueout3_expected_prev )
		&& ((ALUM_labelvalueout3_expected_prev !== last_ALUM_labelvalueout3_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_labelvalueout3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_labelvalueout3_expected_prev);
		$display ("     Real value = %b", ALUM_labelvalueout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ALUM_labelvalueout3_exp = ALUM_labelvalueout3_expected_prev;
	end
	if (
		( ALUM_labelvalueout4_expected_prev !== 1'bx ) && ( ALUM_labelvalueout4_prev !== ALUM_labelvalueout4_expected_prev )
		&& ((ALUM_labelvalueout4_expected_prev !== last_ALUM_labelvalueout4_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_labelvalueout4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_labelvalueout4_expected_prev);
		$display ("     Real value = %b", ALUM_labelvalueout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ALUM_labelvalueout4_exp = ALUM_labelvalueout4_expected_prev;
	end
	if (
		( ALUM_labelvalueout5_expected_prev !== 1'bx ) && ( ALUM_labelvalueout5_prev !== ALUM_labelvalueout5_expected_prev )
		&& ((ALUM_labelvalueout5_expected_prev !== last_ALUM_labelvalueout5_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_labelvalueout5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_labelvalueout5_expected_prev);
		$display ("     Real value = %b", ALUM_labelvalueout5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ALUM_labelvalueout5_exp = ALUM_labelvalueout5_expected_prev;
	end
	if (
		( ALUM_labelvalueout6_expected_prev !== 1'bx ) && ( ALUM_labelvalueout6_prev !== ALUM_labelvalueout6_expected_prev )
		&& ((ALUM_labelvalueout6_expected_prev !== last_ALUM_labelvalueout6_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_labelvalueout6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_labelvalueout6_expected_prev);
		$display ("     Real value = %b", ALUM_labelvalueout6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ALUM_labelvalueout6_exp = ALUM_labelvalueout6_expected_prev;
	end
	if (
		( ALUM_labelvalueout7_expected_prev !== 1'bx ) && ( ALUM_labelvalueout7_prev !== ALUM_labelvalueout7_expected_prev )
		&& ((ALUM_labelvalueout7_expected_prev !== last_ALUM_labelvalueout7_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_labelvalueout7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_labelvalueout7_expected_prev);
		$display ("     Real value = %b", ALUM_labelvalueout7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_ALUM_labelvalueout7_exp = ALUM_labelvalueout7_expected_prev;
	end
	if (
		( ALUM_readMemFlagOut_expected_prev !== 1'bx ) && ( ALUM_readMemFlagOut_prev !== ALUM_readMemFlagOut_expected_prev )
		&& ((ALUM_readMemFlagOut_expected_prev !== last_ALUM_readMemFlagOut_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_readMemFlagOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_readMemFlagOut_expected_prev);
		$display ("     Real value = %b", ALUM_readMemFlagOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_ALUM_readMemFlagOut_exp = ALUM_readMemFlagOut_expected_prev;
	end
	if (
		( ALUM_regAOu_expected_prev[0] !== 1'bx ) && ( ALUM_regAOu_prev[0] !== ALUM_regAOu_expected_prev[0] )
		&& ((ALUM_regAOu_expected_prev[0] !== last_ALUM_regAOu_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regAOu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regAOu_expected_prev);
		$display ("     Real value = %b", ALUM_regAOu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ALUM_regAOu_exp[0] = ALUM_regAOu_expected_prev[0];
	end
	if (
		( ALUM_regAOu_expected_prev[1] !== 1'bx ) && ( ALUM_regAOu_prev[1] !== ALUM_regAOu_expected_prev[1] )
		&& ((ALUM_regAOu_expected_prev[1] !== last_ALUM_regAOu_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regAOu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regAOu_expected_prev);
		$display ("     Real value = %b", ALUM_regAOu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ALUM_regAOu_exp[1] = ALUM_regAOu_expected_prev[1];
	end
	if (
		( ALUM_regAOu_expected_prev[2] !== 1'bx ) && ( ALUM_regAOu_prev[2] !== ALUM_regAOu_expected_prev[2] )
		&& ((ALUM_regAOu_expected_prev[2] !== last_ALUM_regAOu_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regAOu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regAOu_expected_prev);
		$display ("     Real value = %b", ALUM_regAOu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ALUM_regAOu_exp[2] = ALUM_regAOu_expected_prev[2];
	end
	if (
		( ALUM_regAOu_expected_prev[3] !== 1'bx ) && ( ALUM_regAOu_prev[3] !== ALUM_regAOu_expected_prev[3] )
		&& ((ALUM_regAOu_expected_prev[3] !== last_ALUM_regAOu_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regAOu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regAOu_expected_prev);
		$display ("     Real value = %b", ALUM_regAOu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ALUM_regAOu_exp[3] = ALUM_regAOu_expected_prev[3];
	end
	if (
		( ALUM_regAOu_expected_prev[4] !== 1'bx ) && ( ALUM_regAOu_prev[4] !== ALUM_regAOu_expected_prev[4] )
		&& ((ALUM_regAOu_expected_prev[4] !== last_ALUM_regAOu_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regAOu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regAOu_expected_prev);
		$display ("     Real value = %b", ALUM_regAOu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ALUM_regAOu_exp[4] = ALUM_regAOu_expected_prev[4];
	end
	if (
		( ALUM_regAOu_expected_prev[5] !== 1'bx ) && ( ALUM_regAOu_prev[5] !== ALUM_regAOu_expected_prev[5] )
		&& ((ALUM_regAOu_expected_prev[5] !== last_ALUM_regAOu_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regAOu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regAOu_expected_prev);
		$display ("     Real value = %b", ALUM_regAOu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ALUM_regAOu_exp[5] = ALUM_regAOu_expected_prev[5];
	end
	if (
		( ALUM_regAOu_expected_prev[6] !== 1'bx ) && ( ALUM_regAOu_prev[6] !== ALUM_regAOu_expected_prev[6] )
		&& ((ALUM_regAOu_expected_prev[6] !== last_ALUM_regAOu_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regAOu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regAOu_expected_prev);
		$display ("     Real value = %b", ALUM_regAOu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ALUM_regAOu_exp[6] = ALUM_regAOu_expected_prev[6];
	end
	if (
		( ALUM_regAOu_expected_prev[7] !== 1'bx ) && ( ALUM_regAOu_prev[7] !== ALUM_regAOu_expected_prev[7] )
		&& ((ALUM_regAOu_expected_prev[7] !== last_ALUM_regAOu_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regAOu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regAOu_expected_prev);
		$display ("     Real value = %b", ALUM_regAOu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ALUM_regAOu_exp[7] = ALUM_regAOu_expected_prev[7];
	end
	if (
		( ALUM_regBOut_expected_prev[0] !== 1'bx ) && ( ALUM_regBOut_prev[0] !== ALUM_regBOut_expected_prev[0] )
		&& ((ALUM_regBOut_expected_prev[0] !== last_ALUM_regBOut_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regBOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regBOut_expected_prev);
		$display ("     Real value = %b", ALUM_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ALUM_regBOut_exp[0] = ALUM_regBOut_expected_prev[0];
	end
	if (
		( ALUM_regBOut_expected_prev[1] !== 1'bx ) && ( ALUM_regBOut_prev[1] !== ALUM_regBOut_expected_prev[1] )
		&& ((ALUM_regBOut_expected_prev[1] !== last_ALUM_regBOut_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regBOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regBOut_expected_prev);
		$display ("     Real value = %b", ALUM_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ALUM_regBOut_exp[1] = ALUM_regBOut_expected_prev[1];
	end
	if (
		( ALUM_regBOut_expected_prev[2] !== 1'bx ) && ( ALUM_regBOut_prev[2] !== ALUM_regBOut_expected_prev[2] )
		&& ((ALUM_regBOut_expected_prev[2] !== last_ALUM_regBOut_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regBOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regBOut_expected_prev);
		$display ("     Real value = %b", ALUM_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ALUM_regBOut_exp[2] = ALUM_regBOut_expected_prev[2];
	end
	if (
		( ALUM_regBOut_expected_prev[3] !== 1'bx ) && ( ALUM_regBOut_prev[3] !== ALUM_regBOut_expected_prev[3] )
		&& ((ALUM_regBOut_expected_prev[3] !== last_ALUM_regBOut_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regBOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regBOut_expected_prev);
		$display ("     Real value = %b", ALUM_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ALUM_regBOut_exp[3] = ALUM_regBOut_expected_prev[3];
	end
	if (
		( ALUM_regBOut_expected_prev[4] !== 1'bx ) && ( ALUM_regBOut_prev[4] !== ALUM_regBOut_expected_prev[4] )
		&& ((ALUM_regBOut_expected_prev[4] !== last_ALUM_regBOut_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regBOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regBOut_expected_prev);
		$display ("     Real value = %b", ALUM_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ALUM_regBOut_exp[4] = ALUM_regBOut_expected_prev[4];
	end
	if (
		( ALUM_regBOut_expected_prev[5] !== 1'bx ) && ( ALUM_regBOut_prev[5] !== ALUM_regBOut_expected_prev[5] )
		&& ((ALUM_regBOut_expected_prev[5] !== last_ALUM_regBOut_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regBOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regBOut_expected_prev);
		$display ("     Real value = %b", ALUM_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ALUM_regBOut_exp[5] = ALUM_regBOut_expected_prev[5];
	end
	if (
		( ALUM_regBOut_expected_prev[6] !== 1'bx ) && ( ALUM_regBOut_prev[6] !== ALUM_regBOut_expected_prev[6] )
		&& ((ALUM_regBOut_expected_prev[6] !== last_ALUM_regBOut_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regBOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regBOut_expected_prev);
		$display ("     Real value = %b", ALUM_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ALUM_regBOut_exp[6] = ALUM_regBOut_expected_prev[6];
	end
	if (
		( ALUM_regBOut_expected_prev[7] !== 1'bx ) && ( ALUM_regBOut_prev[7] !== ALUM_regBOut_expected_prev[7] )
		&& ((ALUM_regBOut_expected_prev[7] !== last_ALUM_regBOut_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_regBOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_regBOut_expected_prev);
		$display ("     Real value = %b", ALUM_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ALUM_regBOut_exp[7] = ALUM_regBOut_expected_prev[7];
	end
	if (
		( ALUM_writeMemFlagOut_expected_prev !== 1'bx ) && ( ALUM_writeMemFlagOut_prev !== ALUM_writeMemFlagOut_expected_prev )
		&& ((ALUM_writeMemFlagOut_expected_prev !== last_ALUM_writeMemFlagOut_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUM_writeMemFlagOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUM_writeMemFlagOut_expected_prev);
		$display ("     Real value = %b", ALUM_writeMemFlagOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ALUM_writeMemFlagOut_exp = ALUM_writeMemFlagOut_expected_prev;
	end
	if (
		( BUSMUX_result_expected_prev[0] !== 1'bx ) && ( BUSMUX_result_prev[0] !== BUSMUX_result_expected_prev[0] )
		&& ((BUSMUX_result_expected_prev[0] !== last_BUSMUX_result_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_BUSMUX_result_exp[0] = BUSMUX_result_expected_prev[0];
	end
	if (
		( BUSMUX_result_expected_prev[1] !== 1'bx ) && ( BUSMUX_result_prev[1] !== BUSMUX_result_expected_prev[1] )
		&& ((BUSMUX_result_expected_prev[1] !== last_BUSMUX_result_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_BUSMUX_result_exp[1] = BUSMUX_result_expected_prev[1];
	end
	if (
		( BUSMUX_result_expected_prev[2] !== 1'bx ) && ( BUSMUX_result_prev[2] !== BUSMUX_result_expected_prev[2] )
		&& ((BUSMUX_result_expected_prev[2] !== last_BUSMUX_result_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_BUSMUX_result_exp[2] = BUSMUX_result_expected_prev[2];
	end
	if (
		( BUSMUX_result_expected_prev[3] !== 1'bx ) && ( BUSMUX_result_prev[3] !== BUSMUX_result_expected_prev[3] )
		&& ((BUSMUX_result_expected_prev[3] !== last_BUSMUX_result_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_BUSMUX_result_exp[3] = BUSMUX_result_expected_prev[3];
	end
	if (
		( BUSMUX_result_expected_prev[4] !== 1'bx ) && ( BUSMUX_result_prev[4] !== BUSMUX_result_expected_prev[4] )
		&& ((BUSMUX_result_expected_prev[4] !== last_BUSMUX_result_exp[4]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_BUSMUX_result_exp[4] = BUSMUX_result_expected_prev[4];
	end
	if (
		( BUSMUX_result_expected_prev[5] !== 1'bx ) && ( BUSMUX_result_prev[5] !== BUSMUX_result_expected_prev[5] )
		&& ((BUSMUX_result_expected_prev[5] !== last_BUSMUX_result_exp[5]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_BUSMUX_result_exp[5] = BUSMUX_result_expected_prev[5];
	end
	if (
		( BUSMUX_result_expected_prev[6] !== 1'bx ) && ( BUSMUX_result_prev[6] !== BUSMUX_result_expected_prev[6] )
		&& ((BUSMUX_result_expected_prev[6] !== last_BUSMUX_result_exp[6]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_BUSMUX_result_exp[6] = BUSMUX_result_expected_prev[6];
	end
	if (
		( BUSMUX_result_expected_prev[7] !== 1'bx ) && ( BUSMUX_result_prev[7] !== BUSMUX_result_expected_prev[7] )
		&& ((BUSMUX_result_expected_prev[7] !== last_BUSMUX_result_exp[7]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_BUSMUX_result_exp[7] = BUSMUX_result_expected_prev[7];
	end
	if (
		( BUSMUX_result_bm1_expected_prev[0] !== 1'bx ) && ( BUSMUX_result_bm1_prev[0] !== BUSMUX_result_bm1_expected_prev[0] )
		&& ((BUSMUX_result_bm1_expected_prev[0] !== last_BUSMUX_result_bm1_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm1_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_BUSMUX_result_bm1_exp[0] = BUSMUX_result_bm1_expected_prev[0];
	end
	if (
		( BUSMUX_result_bm1_expected_prev[1] !== 1'bx ) && ( BUSMUX_result_bm1_prev[1] !== BUSMUX_result_bm1_expected_prev[1] )
		&& ((BUSMUX_result_bm1_expected_prev[1] !== last_BUSMUX_result_bm1_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm1_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_BUSMUX_result_bm1_exp[1] = BUSMUX_result_bm1_expected_prev[1];
	end
	if (
		( BUSMUX_result_bm1_expected_prev[2] !== 1'bx ) && ( BUSMUX_result_bm1_prev[2] !== BUSMUX_result_bm1_expected_prev[2] )
		&& ((BUSMUX_result_bm1_expected_prev[2] !== last_BUSMUX_result_bm1_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm1_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_BUSMUX_result_bm1_exp[2] = BUSMUX_result_bm1_expected_prev[2];
	end
	if (
		( BUSMUX_result_bm1_expected_prev[3] !== 1'bx ) && ( BUSMUX_result_bm1_prev[3] !== BUSMUX_result_bm1_expected_prev[3] )
		&& ((BUSMUX_result_bm1_expected_prev[3] !== last_BUSMUX_result_bm1_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm1_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_BUSMUX_result_bm1_exp[3] = BUSMUX_result_bm1_expected_prev[3];
	end
	if (
		( BUSMUX_result_bm1_expected_prev[4] !== 1'bx ) && ( BUSMUX_result_bm1_prev[4] !== BUSMUX_result_bm1_expected_prev[4] )
		&& ((BUSMUX_result_bm1_expected_prev[4] !== last_BUSMUX_result_bm1_exp[4]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm1_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_BUSMUX_result_bm1_exp[4] = BUSMUX_result_bm1_expected_prev[4];
	end
	if (
		( BUSMUX_result_bm1_expected_prev[5] !== 1'bx ) && ( BUSMUX_result_bm1_prev[5] !== BUSMUX_result_bm1_expected_prev[5] )
		&& ((BUSMUX_result_bm1_expected_prev[5] !== last_BUSMUX_result_bm1_exp[5]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm1_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_BUSMUX_result_bm1_exp[5] = BUSMUX_result_bm1_expected_prev[5];
	end
	if (
		( BUSMUX_result_bm1_expected_prev[6] !== 1'bx ) && ( BUSMUX_result_bm1_prev[6] !== BUSMUX_result_bm1_expected_prev[6] )
		&& ((BUSMUX_result_bm1_expected_prev[6] !== last_BUSMUX_result_bm1_exp[6]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm1_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_BUSMUX_result_bm1_exp[6] = BUSMUX_result_bm1_expected_prev[6];
	end
	if (
		( BUSMUX_result_bm1_expected_prev[7] !== 1'bx ) && ( BUSMUX_result_bm1_prev[7] !== BUSMUX_result_bm1_expected_prev[7] )
		&& ((BUSMUX_result_bm1_expected_prev[7] !== last_BUSMUX_result_bm1_exp[7]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm1_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_BUSMUX_result_bm1_exp[7] = BUSMUX_result_bm1_expected_prev[7];
	end
	if (
		( BUSMUX_result_bm3_expected_prev[0] !== 1'bx ) && ( BUSMUX_result_bm3_prev[0] !== BUSMUX_result_bm3_expected_prev[0] )
		&& ((BUSMUX_result_bm3_expected_prev[0] !== last_BUSMUX_result_bm3_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm3_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_BUSMUX_result_bm3_exp[0] = BUSMUX_result_bm3_expected_prev[0];
	end
	if (
		( BUSMUX_result_bm3_expected_prev[1] !== 1'bx ) && ( BUSMUX_result_bm3_prev[1] !== BUSMUX_result_bm3_expected_prev[1] )
		&& ((BUSMUX_result_bm3_expected_prev[1] !== last_BUSMUX_result_bm3_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm3_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_BUSMUX_result_bm3_exp[1] = BUSMUX_result_bm3_expected_prev[1];
	end
	if (
		( BUSMUX_result_bm3_expected_prev[2] !== 1'bx ) && ( BUSMUX_result_bm3_prev[2] !== BUSMUX_result_bm3_expected_prev[2] )
		&& ((BUSMUX_result_bm3_expected_prev[2] !== last_BUSMUX_result_bm3_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm3_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_BUSMUX_result_bm3_exp[2] = BUSMUX_result_bm3_expected_prev[2];
	end
	if (
		( BUSMUX_result_bm3_expected_prev[3] !== 1'bx ) && ( BUSMUX_result_bm3_prev[3] !== BUSMUX_result_bm3_expected_prev[3] )
		&& ((BUSMUX_result_bm3_expected_prev[3] !== last_BUSMUX_result_bm3_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm3_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_BUSMUX_result_bm3_exp[3] = BUSMUX_result_bm3_expected_prev[3];
	end
	if (
		( BUSMUX_result_bm3_expected_prev[4] !== 1'bx ) && ( BUSMUX_result_bm3_prev[4] !== BUSMUX_result_bm3_expected_prev[4] )
		&& ((BUSMUX_result_bm3_expected_prev[4] !== last_BUSMUX_result_bm3_exp[4]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm3_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_BUSMUX_result_bm3_exp[4] = BUSMUX_result_bm3_expected_prev[4];
	end
	if (
		( BUSMUX_result_bm3_expected_prev[5] !== 1'bx ) && ( BUSMUX_result_bm3_prev[5] !== BUSMUX_result_bm3_expected_prev[5] )
		&& ((BUSMUX_result_bm3_expected_prev[5] !== last_BUSMUX_result_bm3_exp[5]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm3_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_BUSMUX_result_bm3_exp[5] = BUSMUX_result_bm3_expected_prev[5];
	end
	if (
		( BUSMUX_result_bm3_expected_prev[6] !== 1'bx ) && ( BUSMUX_result_bm3_prev[6] !== BUSMUX_result_bm3_expected_prev[6] )
		&& ((BUSMUX_result_bm3_expected_prev[6] !== last_BUSMUX_result_bm3_exp[6]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm3_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_BUSMUX_result_bm3_exp[6] = BUSMUX_result_bm3_expected_prev[6];
	end
	if (
		( BUSMUX_result_bm3_expected_prev[7] !== 1'bx ) && ( BUSMUX_result_bm3_prev[7] !== BUSMUX_result_bm3_expected_prev[7] )
		&& ((BUSMUX_result_bm3_expected_prev[7] !== last_BUSMUX_result_bm3_exp[7]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUSMUX_result_bm3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUSMUX_result_bm3_expected_prev);
		$display ("     Real value = %b", BUSMUX_result_bm3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_BUSMUX_result_bm3_exp[7] = BUSMUX_result_bm3_expected_prev[7];
	end
	if (
		( clkoutIFID_expected_prev !== 1'bx ) && ( clkoutIFID_prev !== clkoutIFID_expected_prev )
		&& ((clkoutIFID_expected_prev !== last_clkoutIFID_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clkoutIFID :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clkoutIFID_expected_prev);
		$display ("     Real value = %b", clkoutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_clkoutIFID_exp = clkoutIFID_expected_prev;
	end
	if (
		( clock_out_expected_prev !== 1'bx ) && ( clock_out_prev !== clock_out_expected_prev )
		&& ((clock_out_expected_prev !== last_clock_out_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_out_expected_prev);
		$display ("     Real value = %b", clock_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_clock_out_exp = clock_out_expected_prev;
	end
	if (
		( currentpc_expected_prev[0] !== 1'bx ) && ( currentpc_prev[0] !== currentpc_expected_prev[0] )
		&& ((currentpc_expected_prev[0] !== last_currentpc_exp[0]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[0] = currentpc_expected_prev[0];
	end
	if (
		( currentpc_expected_prev[1] !== 1'bx ) && ( currentpc_prev[1] !== currentpc_expected_prev[1] )
		&& ((currentpc_expected_prev[1] !== last_currentpc_exp[1]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[1] = currentpc_expected_prev[1];
	end
	if (
		( currentpc_expected_prev[2] !== 1'bx ) && ( currentpc_prev[2] !== currentpc_expected_prev[2] )
		&& ((currentpc_expected_prev[2] !== last_currentpc_exp[2]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[2] = currentpc_expected_prev[2];
	end
	if (
		( currentpc_expected_prev[3] !== 1'bx ) && ( currentpc_prev[3] !== currentpc_expected_prev[3] )
		&& ((currentpc_expected_prev[3] !== last_currentpc_exp[3]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[3] = currentpc_expected_prev[3];
	end
	if (
		( currentpc_expected_prev[4] !== 1'bx ) && ( currentpc_prev[4] !== currentpc_expected_prev[4] )
		&& ((currentpc_expected_prev[4] !== last_currentpc_exp[4]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[4] = currentpc_expected_prev[4];
	end
	if (
		( currentpc_expected_prev[5] !== 1'bx ) && ( currentpc_prev[5] !== currentpc_expected_prev[5] )
		&& ((currentpc_expected_prev[5] !== last_currentpc_exp[5]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[5] = currentpc_expected_prev[5];
	end
	if (
		( currentpc_expected_prev[6] !== 1'bx ) && ( currentpc_prev[6] !== currentpc_expected_prev[6] )
		&& ((currentpc_expected_prev[6] !== last_currentpc_exp[6]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[6] = currentpc_expected_prev[6];
	end
	if (
		( currentpc_expected_prev[7] !== 1'bx ) && ( currentpc_prev[7] !== currentpc_expected_prev[7] )
		&& ((currentpc_expected_prev[7] !== last_currentpc_exp[7]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[7] = currentpc_expected_prev[7];
	end
	if (
		( cycleCounter_expected_prev[0] !== 1'bx ) && ( cycleCounter_prev[0] !== cycleCounter_expected_prev[0] )
		&& ((cycleCounter_expected_prev[0] !== last_cycleCounter_exp[0]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[0] = cycleCounter_expected_prev[0];
	end
	if (
		( cycleCounter_expected_prev[1] !== 1'bx ) && ( cycleCounter_prev[1] !== cycleCounter_expected_prev[1] )
		&& ((cycleCounter_expected_prev[1] !== last_cycleCounter_exp[1]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[1] = cycleCounter_expected_prev[1];
	end
	if (
		( cycleCounter_expected_prev[2] !== 1'bx ) && ( cycleCounter_prev[2] !== cycleCounter_expected_prev[2] )
		&& ((cycleCounter_expected_prev[2] !== last_cycleCounter_exp[2]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[2] = cycleCounter_expected_prev[2];
	end
	if (
		( cycleCounter_expected_prev[3] !== 1'bx ) && ( cycleCounter_prev[3] !== cycleCounter_expected_prev[3] )
		&& ((cycleCounter_expected_prev[3] !== last_cycleCounter_exp[3]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[3] = cycleCounter_expected_prev[3];
	end
	if (
		( cycleCounter_expected_prev[4] !== 1'bx ) && ( cycleCounter_prev[4] !== cycleCounter_expected_prev[4] )
		&& ((cycleCounter_expected_prev[4] !== last_cycleCounter_exp[4]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[4] = cycleCounter_expected_prev[4];
	end
	if (
		( cycleCounter_expected_prev[5] !== 1'bx ) && ( cycleCounter_prev[5] !== cycleCounter_expected_prev[5] )
		&& ((cycleCounter_expected_prev[5] !== last_cycleCounter_exp[5]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[5] = cycleCounter_expected_prev[5];
	end
	if (
		( cycleCounter_expected_prev[6] !== 1'bx ) && ( cycleCounter_prev[6] !== cycleCounter_expected_prev[6] )
		&& ((cycleCounter_expected_prev[6] !== last_cycleCounter_exp[6]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[6] = cycleCounter_expected_prev[6];
	end
	if (
		( cycleCounter_expected_prev[7] !== 1'bx ) && ( cycleCounter_prev[7] !== cycleCounter_expected_prev[7] )
		&& ((cycleCounter_expected_prev[7] !== last_cycleCounter_exp[7]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[7] = cycleCounter_expected_prev[7];
	end
	if (
		( cycleCounter_expected_prev[8] !== 1'bx ) && ( cycleCounter_prev[8] !== cycleCounter_expected_prev[8] )
		&& ((cycleCounter_expected_prev[8] !== last_cycleCounter_exp[8]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[8] = cycleCounter_expected_prev[8];
	end
	if (
		( cycleCounter_expected_prev[9] !== 1'bx ) && ( cycleCounter_prev[9] !== cycleCounter_expected_prev[9] )
		&& ((cycleCounter_expected_prev[9] !== last_cycleCounter_exp[9]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[9] = cycleCounter_expected_prev[9];
	end
	if (
		( cycleCounter_expected_prev[10] !== 1'bx ) && ( cycleCounter_prev[10] !== cycleCounter_expected_prev[10] )
		&& ((cycleCounter_expected_prev[10] !== last_cycleCounter_exp[10]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[10] = cycleCounter_expected_prev[10];
	end
	if (
		( cycleCounter_expected_prev[11] !== 1'bx ) && ( cycleCounter_prev[11] !== cycleCounter_expected_prev[11] )
		&& ((cycleCounter_expected_prev[11] !== last_cycleCounter_exp[11]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[11] = cycleCounter_expected_prev[11];
	end
	if (
		( cycleCounter_expected_prev[12] !== 1'bx ) && ( cycleCounter_prev[12] !== cycleCounter_expected_prev[12] )
		&& ((cycleCounter_expected_prev[12] !== last_cycleCounter_exp[12]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[12] = cycleCounter_expected_prev[12];
	end
	if (
		( cycleCounter_expected_prev[13] !== 1'bx ) && ( cycleCounter_prev[13] !== cycleCounter_expected_prev[13] )
		&& ((cycleCounter_expected_prev[13] !== last_cycleCounter_exp[13]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[13] = cycleCounter_expected_prev[13];
	end
	if (
		( cycleCounter_expected_prev[14] !== 1'bx ) && ( cycleCounter_prev[14] !== cycleCounter_expected_prev[14] )
		&& ((cycleCounter_expected_prev[14] !== last_cycleCounter_exp[14]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[14] = cycleCounter_expected_prev[14];
	end
	if (
		( cycleCounter_expected_prev[15] !== 1'bx ) && ( cycleCounter_prev[15] !== cycleCounter_expected_prev[15] )
		&& ((cycleCounter_expected_prev[15] !== last_cycleCounter_exp[15]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[15] = cycleCounter_expected_prev[15];
	end
	if (
		( halt_out_expected_prev !== 1'bx ) && ( halt_out_prev !== halt_out_expected_prev )
		&& ((halt_out_expected_prev !== last_halt_out_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port halt_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", halt_out_expected_prev);
		$display ("     Real value = %b", halt_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_halt_out_exp = halt_out_expected_prev;
	end
	if (
		( id_branchAddress_expected_prev[0] !== 1'bx ) && ( id_branchAddress_prev[0] !== id_branchAddress_expected_prev[0] )
		&& ((id_branchAddress_expected_prev[0] !== last_id_branchAddress_exp[0]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_branchAddress[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_branchAddress_expected_prev);
		$display ("     Real value = %b", id_branchAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_id_branchAddress_exp[0] = id_branchAddress_expected_prev[0];
	end
	if (
		( id_branchAddress_expected_prev[1] !== 1'bx ) && ( id_branchAddress_prev[1] !== id_branchAddress_expected_prev[1] )
		&& ((id_branchAddress_expected_prev[1] !== last_id_branchAddress_exp[1]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_branchAddress[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_branchAddress_expected_prev);
		$display ("     Real value = %b", id_branchAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_id_branchAddress_exp[1] = id_branchAddress_expected_prev[1];
	end
	if (
		( id_branchAddress_expected_prev[2] !== 1'bx ) && ( id_branchAddress_prev[2] !== id_branchAddress_expected_prev[2] )
		&& ((id_branchAddress_expected_prev[2] !== last_id_branchAddress_exp[2]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_branchAddress[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_branchAddress_expected_prev);
		$display ("     Real value = %b", id_branchAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_id_branchAddress_exp[2] = id_branchAddress_expected_prev[2];
	end
	if (
		( id_branchAddress_expected_prev[3] !== 1'bx ) && ( id_branchAddress_prev[3] !== id_branchAddress_expected_prev[3] )
		&& ((id_branchAddress_expected_prev[3] !== last_id_branchAddress_exp[3]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_branchAddress[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_branchAddress_expected_prev);
		$display ("     Real value = %b", id_branchAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_id_branchAddress_exp[3] = id_branchAddress_expected_prev[3];
	end
	if (
		( id_branchAddress_expected_prev[4] !== 1'bx ) && ( id_branchAddress_prev[4] !== id_branchAddress_expected_prev[4] )
		&& ((id_branchAddress_expected_prev[4] !== last_id_branchAddress_exp[4]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_branchAddress[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_branchAddress_expected_prev);
		$display ("     Real value = %b", id_branchAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_id_branchAddress_exp[4] = id_branchAddress_expected_prev[4];
	end
	if (
		( id_branchAddress_expected_prev[5] !== 1'bx ) && ( id_branchAddress_prev[5] !== id_branchAddress_expected_prev[5] )
		&& ((id_branchAddress_expected_prev[5] !== last_id_branchAddress_exp[5]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_branchAddress[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_branchAddress_expected_prev);
		$display ("     Real value = %b", id_branchAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_id_branchAddress_exp[5] = id_branchAddress_expected_prev[5];
	end
	if (
		( id_branchAddress_expected_prev[6] !== 1'bx ) && ( id_branchAddress_prev[6] !== id_branchAddress_expected_prev[6] )
		&& ((id_branchAddress_expected_prev[6] !== last_id_branchAddress_exp[6]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_branchAddress[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_branchAddress_expected_prev);
		$display ("     Real value = %b", id_branchAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_id_branchAddress_exp[6] = id_branchAddress_expected_prev[6];
	end
	if (
		( id_branchAddress_expected_prev[7] !== 1'bx ) && ( id_branchAddress_prev[7] !== id_branchAddress_expected_prev[7] )
		&& ((id_branchAddress_expected_prev[7] !== last_id_branchAddress_exp[7]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_branchAddress[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_branchAddress_expected_prev);
		$display ("     Real value = %b", id_branchAddress_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_id_branchAddress_exp[7] = id_branchAddress_expected_prev[7];
	end
	if (
		( id_branchFlag_expected_prev !== 1'bx ) && ( id_branchFlag_prev !== id_branchFlag_expected_prev )
		&& ((id_branchFlag_expected_prev !== last_id_branchFlag_exp) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_branchFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_branchFlag_expected_prev);
		$display ("     Real value = %b", id_branchFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_id_branchFlag_exp = id_branchFlag_expected_prev;
	end
	if (
		( id_clkOut_expected_prev !== 1'bx ) && ( id_clkOut_prev !== id_clkOut_expected_prev )
		&& ((id_clkOut_expected_prev !== last_id_clkOut_exp) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_clkOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_clkOut_expected_prev);
		$display ("     Real value = %b", id_clkOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_id_clkOut_exp = id_clkOut_expected_prev;
	end
	if (
		( id_haltFlag_expected_prev !== 1'bx ) && ( id_haltFlag_prev !== id_haltFlag_expected_prev )
		&& ((id_haltFlag_expected_prev !== last_id_haltFlag_exp) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_haltFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_haltFlag_expected_prev);
		$display ("     Real value = %b", id_haltFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_id_haltFlag_exp = id_haltFlag_expected_prev;
	end
	if (
		( id_immediateFlag_expected_prev !== 1'bx ) && ( id_immediateFlag_prev !== id_immediateFlag_expected_prev )
		&& ((id_immediateFlag_expected_prev !== last_id_immediateFlag_exp) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_immediateFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_immediateFlag_expected_prev);
		$display ("     Real value = %b", id_immediateFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_id_immediateFlag_exp = id_immediateFlag_expected_prev;
	end
	if (
		( id_labelFlag_expected_prev !== 1'bx ) && ( id_labelFlag_prev !== id_labelFlag_expected_prev )
		&& ((id_labelFlag_expected_prev !== last_id_labelFlag_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelFlag_expected_prev);
		$display ("     Real value = %b", id_labelFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_id_labelFlag_exp = id_labelFlag_expected_prev;
	end
	if (
		( id_labelPassFlagOut_expected_prev !== 1'bx ) && ( id_labelPassFlagOut_prev !== id_labelPassFlagOut_expected_prev )
		&& ((id_labelPassFlagOut_expected_prev !== last_id_labelPassFlagOut_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelPassFlagOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelPassFlagOut_expected_prev);
		$display ("     Real value = %b", id_labelPassFlagOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_id_labelPassFlagOut_exp = id_labelPassFlagOut_expected_prev;
	end
	if (
		( id_labelValue_expected_prev[0] !== 1'bx ) && ( id_labelValue_prev[0] !== id_labelValue_expected_prev[0] )
		&& ((id_labelValue_expected_prev[0] !== last_id_labelValue_exp[0]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_id_labelValue_exp[0] = id_labelValue_expected_prev[0];
	end
	if (
		( id_labelValue_expected_prev[1] !== 1'bx ) && ( id_labelValue_prev[1] !== id_labelValue_expected_prev[1] )
		&& ((id_labelValue_expected_prev[1] !== last_id_labelValue_exp[1]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_id_labelValue_exp[1] = id_labelValue_expected_prev[1];
	end
	if (
		( id_labelValue_expected_prev[2] !== 1'bx ) && ( id_labelValue_prev[2] !== id_labelValue_expected_prev[2] )
		&& ((id_labelValue_expected_prev[2] !== last_id_labelValue_exp[2]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_id_labelValue_exp[2] = id_labelValue_expected_prev[2];
	end
	if (
		( id_labelValue_expected_prev[3] !== 1'bx ) && ( id_labelValue_prev[3] !== id_labelValue_expected_prev[3] )
		&& ((id_labelValue_expected_prev[3] !== last_id_labelValue_exp[3]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_id_labelValue_exp[3] = id_labelValue_expected_prev[3];
	end
	if (
		( id_labelValue_expected_prev[4] !== 1'bx ) && ( id_labelValue_prev[4] !== id_labelValue_expected_prev[4] )
		&& ((id_labelValue_expected_prev[4] !== last_id_labelValue_exp[4]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_id_labelValue_exp[4] = id_labelValue_expected_prev[4];
	end
	if (
		( id_labelValue_expected_prev[5] !== 1'bx ) && ( id_labelValue_prev[5] !== id_labelValue_expected_prev[5] )
		&& ((id_labelValue_expected_prev[5] !== last_id_labelValue_exp[5]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_id_labelValue_exp[5] = id_labelValue_expected_prev[5];
	end
	if (
		( id_labelValue_expected_prev[6] !== 1'bx ) && ( id_labelValue_prev[6] !== id_labelValue_expected_prev[6] )
		&& ((id_labelValue_expected_prev[6] !== last_id_labelValue_exp[6]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_id_labelValue_exp[6] = id_labelValue_expected_prev[6];
	end
	if (
		( id_labelValue_expected_prev[7] !== 1'bx ) && ( id_labelValue_prev[7] !== id_labelValue_expected_prev[7] )
		&& ((id_labelValue_expected_prev[7] !== last_id_labelValue_exp[7]) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_id_labelValue_exp[7] = id_labelValue_expected_prev[7];
	end
	if (
		( id_outputPCResetFlag_expected_prev !== 1'bx ) && ( id_outputPCResetFlag_prev !== id_outputPCResetFlag_expected_prev )
		&& ((id_outputPCResetFlag_expected_prev !== last_id_outputPCResetFlag_exp) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_outputPCResetFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_outputPCResetFlag_expected_prev);
		$display ("     Real value = %b", id_outputPCResetFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_id_outputPCResetFlag_exp = id_outputPCResetFlag_expected_prev;
	end
	if (
		( id_rd2_expected_prev[0] !== 1'bx ) && ( id_rd2_prev[0] !== id_rd2_expected_prev[0] )
		&& ((id_rd2_expected_prev[0] !== last_id_rd2_exp[0]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rd2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rd2_expected_prev);
		$display ("     Real value = %b", id_rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_id_rd2_exp[0] = id_rd2_expected_prev[0];
	end
	if (
		( id_rd2_expected_prev[1] !== 1'bx ) && ( id_rd2_prev[1] !== id_rd2_expected_prev[1] )
		&& ((id_rd2_expected_prev[1] !== last_id_rd2_exp[1]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rd2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rd2_expected_prev);
		$display ("     Real value = %b", id_rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_id_rd2_exp[1] = id_rd2_expected_prev[1];
	end
	if (
		( id_rd2_expected_prev[2] !== 1'bx ) && ( id_rd2_prev[2] !== id_rd2_expected_prev[2] )
		&& ((id_rd2_expected_prev[2] !== last_id_rd2_exp[2]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rd2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rd2_expected_prev);
		$display ("     Real value = %b", id_rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_id_rd2_exp[2] = id_rd2_expected_prev[2];
	end
	if (
		( id_rd2_expected_prev[3] !== 1'bx ) && ( id_rd2_prev[3] !== id_rd2_expected_prev[3] )
		&& ((id_rd2_expected_prev[3] !== last_id_rd2_exp[3]) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rd2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rd2_expected_prev);
		$display ("     Real value = %b", id_rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_id_rd2_exp[3] = id_rd2_expected_prev[3];
	end
	if (
		( id_readmem_expected_prev !== 1'bx ) && ( id_readmem_prev !== id_readmem_expected_prev )
		&& ((id_readmem_expected_prev !== last_id_readmem_exp) ||
			on_first_change[38])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_readmem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_readmem_expected_prev);
		$display ("     Real value = %b", id_readmem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[38] = 1'b0;
		last_id_readmem_exp = id_readmem_expected_prev;
	end
	if (
		( id_regA_expected_prev[0] !== 1'bx ) && ( id_regA_prev[0] !== id_regA_expected_prev[0] )
		&& ((id_regA_expected_prev[0] !== last_id_regA_exp[0]) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regA_expected_prev);
		$display ("     Real value = %b", id_regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_id_regA_exp[0] = id_regA_expected_prev[0];
	end
	if (
		( id_regA_expected_prev[1] !== 1'bx ) && ( id_regA_prev[1] !== id_regA_expected_prev[1] )
		&& ((id_regA_expected_prev[1] !== last_id_regA_exp[1]) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regA_expected_prev);
		$display ("     Real value = %b", id_regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_id_regA_exp[1] = id_regA_expected_prev[1];
	end
	if (
		( id_regA_expected_prev[2] !== 1'bx ) && ( id_regA_prev[2] !== id_regA_expected_prev[2] )
		&& ((id_regA_expected_prev[2] !== last_id_regA_exp[2]) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regA_expected_prev);
		$display ("     Real value = %b", id_regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_id_regA_exp[2] = id_regA_expected_prev[2];
	end
	if (
		( id_regA_expected_prev[3] !== 1'bx ) && ( id_regA_prev[3] !== id_regA_expected_prev[3] )
		&& ((id_regA_expected_prev[3] !== last_id_regA_exp[3]) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regA_expected_prev);
		$display ("     Real value = %b", id_regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_id_regA_exp[3] = id_regA_expected_prev[3];
	end
	if (
		( id_regA_expected_prev[4] !== 1'bx ) && ( id_regA_prev[4] !== id_regA_expected_prev[4] )
		&& ((id_regA_expected_prev[4] !== last_id_regA_exp[4]) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regA_expected_prev);
		$display ("     Real value = %b", id_regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_id_regA_exp[4] = id_regA_expected_prev[4];
	end
	if (
		( id_regA_expected_prev[5] !== 1'bx ) && ( id_regA_prev[5] !== id_regA_expected_prev[5] )
		&& ((id_regA_expected_prev[5] !== last_id_regA_exp[5]) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regA_expected_prev);
		$display ("     Real value = %b", id_regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_id_regA_exp[5] = id_regA_expected_prev[5];
	end
	if (
		( id_regA_expected_prev[6] !== 1'bx ) && ( id_regA_prev[6] !== id_regA_expected_prev[6] )
		&& ((id_regA_expected_prev[6] !== last_id_regA_exp[6]) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regA_expected_prev);
		$display ("     Real value = %b", id_regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_id_regA_exp[6] = id_regA_expected_prev[6];
	end
	if (
		( id_regA_expected_prev[7] !== 1'bx ) && ( id_regA_prev[7] !== id_regA_expected_prev[7] )
		&& ((id_regA_expected_prev[7] !== last_id_regA_exp[7]) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regA_expected_prev);
		$display ("     Real value = %b", id_regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_id_regA_exp[7] = id_regA_expected_prev[7];
	end
	if (
		( id_regB_expected_prev[0] !== 1'bx ) && ( id_regB_prev[0] !== id_regB_expected_prev[0] )
		&& ((id_regB_expected_prev[0] !== last_id_regB_exp[0]) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regB_expected_prev);
		$display ("     Real value = %b", id_regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_id_regB_exp[0] = id_regB_expected_prev[0];
	end
	if (
		( id_regB_expected_prev[1] !== 1'bx ) && ( id_regB_prev[1] !== id_regB_expected_prev[1] )
		&& ((id_regB_expected_prev[1] !== last_id_regB_exp[1]) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regB_expected_prev);
		$display ("     Real value = %b", id_regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_id_regB_exp[1] = id_regB_expected_prev[1];
	end
	if (
		( id_regB_expected_prev[2] !== 1'bx ) && ( id_regB_prev[2] !== id_regB_expected_prev[2] )
		&& ((id_regB_expected_prev[2] !== last_id_regB_exp[2]) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regB_expected_prev);
		$display ("     Real value = %b", id_regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_id_regB_exp[2] = id_regB_expected_prev[2];
	end
	if (
		( id_regB_expected_prev[3] !== 1'bx ) && ( id_regB_prev[3] !== id_regB_expected_prev[3] )
		&& ((id_regB_expected_prev[3] !== last_id_regB_exp[3]) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regB_expected_prev);
		$display ("     Real value = %b", id_regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_id_regB_exp[3] = id_regB_expected_prev[3];
	end
	if (
		( id_regB_expected_prev[4] !== 1'bx ) && ( id_regB_prev[4] !== id_regB_expected_prev[4] )
		&& ((id_regB_expected_prev[4] !== last_id_regB_exp[4]) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regB_expected_prev);
		$display ("     Real value = %b", id_regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_id_regB_exp[4] = id_regB_expected_prev[4];
	end
	if (
		( id_regB_expected_prev[5] !== 1'bx ) && ( id_regB_prev[5] !== id_regB_expected_prev[5] )
		&& ((id_regB_expected_prev[5] !== last_id_regB_exp[5]) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regB_expected_prev);
		$display ("     Real value = %b", id_regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_id_regB_exp[5] = id_regB_expected_prev[5];
	end
	if (
		( id_regB_expected_prev[6] !== 1'bx ) && ( id_regB_prev[6] !== id_regB_expected_prev[6] )
		&& ((id_regB_expected_prev[6] !== last_id_regB_exp[6]) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regB_expected_prev);
		$display ("     Real value = %b", id_regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_id_regB_exp[6] = id_regB_expected_prev[6];
	end
	if (
		( id_regB_expected_prev[7] !== 1'bx ) && ( id_regB_prev[7] !== id_regB_expected_prev[7] )
		&& ((id_regB_expected_prev[7] !== last_id_regB_exp[7]) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regB_expected_prev);
		$display ("     Real value = %b", id_regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_id_regB_exp[7] = id_regB_expected_prev[7];
	end
	if (
		( id_regwrite_expected_prev !== 1'bx ) && ( id_regwrite_prev !== id_regwrite_expected_prev )
		&& ((id_regwrite_expected_prev !== last_id_regwrite_exp) ||
			on_first_change[41])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regwrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regwrite_expected_prev);
		$display ("     Real value = %b", id_regwrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[41] = 1'b0;
		last_id_regwrite_exp = id_regwrite_expected_prev;
	end
	if (
		( id_rs_expected_prev[0] !== 1'bx ) && ( id_rs_prev[0] !== id_rs_expected_prev[0] )
		&& ((id_rs_expected_prev[0] !== last_id_rs_exp[0]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rs_expected_prev);
		$display ("     Real value = %b", id_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_id_rs_exp[0] = id_rs_expected_prev[0];
	end
	if (
		( id_rs_expected_prev[1] !== 1'bx ) && ( id_rs_prev[1] !== id_rs_expected_prev[1] )
		&& ((id_rs_expected_prev[1] !== last_id_rs_exp[1]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rs_expected_prev);
		$display ("     Real value = %b", id_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_id_rs_exp[1] = id_rs_expected_prev[1];
	end
	if (
		( id_rs_expected_prev[2] !== 1'bx ) && ( id_rs_prev[2] !== id_rs_expected_prev[2] )
		&& ((id_rs_expected_prev[2] !== last_id_rs_exp[2]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rs_expected_prev);
		$display ("     Real value = %b", id_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_id_rs_exp[2] = id_rs_expected_prev[2];
	end
	if (
		( id_rs_expected_prev[3] !== 1'bx ) && ( id_rs_prev[3] !== id_rs_expected_prev[3] )
		&& ((id_rs_expected_prev[3] !== last_id_rs_exp[3]) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rs[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rs_expected_prev);
		$display ("     Real value = %b", id_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_id_rs_exp[3] = id_rs_expected_prev[3];
	end
	if (
		( id_rt1_expected_prev[0] !== 1'bx ) && ( id_rt1_prev[0] !== id_rt1_expected_prev[0] )
		&& ((id_rt1_expected_prev[0] !== last_id_rt1_exp[0]) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rt1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rt1_expected_prev);
		$display ("     Real value = %b", id_rt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_id_rt1_exp[0] = id_rt1_expected_prev[0];
	end
	if (
		( id_rt1_expected_prev[1] !== 1'bx ) && ( id_rt1_prev[1] !== id_rt1_expected_prev[1] )
		&& ((id_rt1_expected_prev[1] !== last_id_rt1_exp[1]) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rt1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rt1_expected_prev);
		$display ("     Real value = %b", id_rt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_id_rt1_exp[1] = id_rt1_expected_prev[1];
	end
	if (
		( id_rt1_expected_prev[2] !== 1'bx ) && ( id_rt1_prev[2] !== id_rt1_expected_prev[2] )
		&& ((id_rt1_expected_prev[2] !== last_id_rt1_exp[2]) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rt1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rt1_expected_prev);
		$display ("     Real value = %b", id_rt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_id_rt1_exp[2] = id_rt1_expected_prev[2];
	end
	if (
		( id_rt1_expected_prev[3] !== 1'bx ) && ( id_rt1_prev[3] !== id_rt1_expected_prev[3] )
		&& ((id_rt1_expected_prev[3] !== last_id_rt1_exp[3]) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rt1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rt1_expected_prev);
		$display ("     Real value = %b", id_rt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_id_rt1_exp[3] = id_rt1_expected_prev[3];
	end
	if (
		( id_signFlag_expected_prev !== 1'bx ) && ( id_signFlag_prev !== id_signFlag_expected_prev )
		&& ((id_signFlag_expected_prev !== last_id_signFlag_exp) ||
			on_first_change[44])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_signFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_signFlag_expected_prev);
		$display ("     Real value = %b", id_signFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[44] = 1'b0;
		last_id_signFlag_exp = id_signFlag_expected_prev;
	end
	if (
		( id_writemem_expected_prev !== 1'bx ) && ( id_writemem_prev !== id_writemem_expected_prev )
		&& ((id_writemem_expected_prev !== last_id_writemem_exp) ||
			on_first_change[45])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_writemem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_writemem_expected_prev);
		$display ("     Real value = %b", id_writemem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[45] = 1'b0;
		last_id_writemem_exp = id_writemem_expected_prev;
	end
	if (
		( instruction_count_expected_prev[0] !== 1'bx ) && ( instruction_count_prev[0] !== instruction_count_expected_prev[0] )
		&& ((instruction_count_expected_prev[0] !== last_instruction_count_exp[0]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[0] = instruction_count_expected_prev[0];
	end
	if (
		( instruction_count_expected_prev[1] !== 1'bx ) && ( instruction_count_prev[1] !== instruction_count_expected_prev[1] )
		&& ((instruction_count_expected_prev[1] !== last_instruction_count_exp[1]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[1] = instruction_count_expected_prev[1];
	end
	if (
		( instruction_count_expected_prev[2] !== 1'bx ) && ( instruction_count_prev[2] !== instruction_count_expected_prev[2] )
		&& ((instruction_count_expected_prev[2] !== last_instruction_count_exp[2]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[2] = instruction_count_expected_prev[2];
	end
	if (
		( instruction_count_expected_prev[3] !== 1'bx ) && ( instruction_count_prev[3] !== instruction_count_expected_prev[3] )
		&& ((instruction_count_expected_prev[3] !== last_instruction_count_exp[3]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[3] = instruction_count_expected_prev[3];
	end
	if (
		( instruction_count_expected_prev[4] !== 1'bx ) && ( instruction_count_prev[4] !== instruction_count_expected_prev[4] )
		&& ((instruction_count_expected_prev[4] !== last_instruction_count_exp[4]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[4] = instruction_count_expected_prev[4];
	end
	if (
		( instruction_count_expected_prev[5] !== 1'bx ) && ( instruction_count_prev[5] !== instruction_count_expected_prev[5] )
		&& ((instruction_count_expected_prev[5] !== last_instruction_count_exp[5]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[5] = instruction_count_expected_prev[5];
	end
	if (
		( instruction_count_expected_prev[6] !== 1'bx ) && ( instruction_count_prev[6] !== instruction_count_expected_prev[6] )
		&& ((instruction_count_expected_prev[6] !== last_instruction_count_exp[6]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[6] = instruction_count_expected_prev[6];
	end
	if (
		( instruction_count_expected_prev[7] !== 1'bx ) && ( instruction_count_prev[7] !== instruction_count_expected_prev[7] )
		&& ((instruction_count_expected_prev[7] !== last_instruction_count_exp[7]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[7] = instruction_count_expected_prev[7];
	end
	if (
		( instruction_count_expected_prev[8] !== 1'bx ) && ( instruction_count_prev[8] !== instruction_count_expected_prev[8] )
		&& ((instruction_count_expected_prev[8] !== last_instruction_count_exp[8]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[8] = instruction_count_expected_prev[8];
	end
	if (
		( instruction_count_expected_prev[9] !== 1'bx ) && ( instruction_count_prev[9] !== instruction_count_expected_prev[9] )
		&& ((instruction_count_expected_prev[9] !== last_instruction_count_exp[9]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[9] = instruction_count_expected_prev[9];
	end
	if (
		( instruction_count_expected_prev[10] !== 1'bx ) && ( instruction_count_prev[10] !== instruction_count_expected_prev[10] )
		&& ((instruction_count_expected_prev[10] !== last_instruction_count_exp[10]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[10] = instruction_count_expected_prev[10];
	end
	if (
		( instruction_count_expected_prev[11] !== 1'bx ) && ( instruction_count_prev[11] !== instruction_count_expected_prev[11] )
		&& ((instruction_count_expected_prev[11] !== last_instruction_count_exp[11]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[11] = instruction_count_expected_prev[11];
	end
	if (
		( instruction_count_expected_prev[12] !== 1'bx ) && ( instruction_count_prev[12] !== instruction_count_expected_prev[12] )
		&& ((instruction_count_expected_prev[12] !== last_instruction_count_exp[12]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[12] = instruction_count_expected_prev[12];
	end
	if (
		( instruction_count_expected_prev[13] !== 1'bx ) && ( instruction_count_prev[13] !== instruction_count_expected_prev[13] )
		&& ((instruction_count_expected_prev[13] !== last_instruction_count_exp[13]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[13] = instruction_count_expected_prev[13];
	end
	if (
		( instruction_count_expected_prev[14] !== 1'bx ) && ( instruction_count_prev[14] !== instruction_count_expected_prev[14] )
		&& ((instruction_count_expected_prev[14] !== last_instruction_count_exp[14]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[14] = instruction_count_expected_prev[14];
	end
	if (
		( instruction_count_expected_prev[15] !== 1'bx ) && ( instruction_count_prev[15] !== instruction_count_expected_prev[15] )
		&& ((instruction_count_expected_prev[15] !== last_instruction_count_exp[15]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_count[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_count_expected_prev);
		$display ("     Real value = %b", instruction_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_count_exp[15] = instruction_count_expected_prev[15];
	end
	if (
		( instruction_value_expected_prev[0] !== 1'bx ) && ( instruction_value_prev[0] !== instruction_value_expected_prev[0] )
		&& ((instruction_value_expected_prev[0] !== last_instruction_value_exp[0]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_instruction_value_exp[0] = instruction_value_expected_prev[0];
	end
	if (
		( instruction_value_expected_prev[1] !== 1'bx ) && ( instruction_value_prev[1] !== instruction_value_expected_prev[1] )
		&& ((instruction_value_expected_prev[1] !== last_instruction_value_exp[1]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_instruction_value_exp[1] = instruction_value_expected_prev[1];
	end
	if (
		( instruction_value_expected_prev[2] !== 1'bx ) && ( instruction_value_prev[2] !== instruction_value_expected_prev[2] )
		&& ((instruction_value_expected_prev[2] !== last_instruction_value_exp[2]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_instruction_value_exp[2] = instruction_value_expected_prev[2];
	end
	if (
		( instruction_value_expected_prev[3] !== 1'bx ) && ( instruction_value_prev[3] !== instruction_value_expected_prev[3] )
		&& ((instruction_value_expected_prev[3] !== last_instruction_value_exp[3]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_instruction_value_exp[3] = instruction_value_expected_prev[3];
	end
	if (
		( instruction_value_expected_prev[4] !== 1'bx ) && ( instruction_value_prev[4] !== instruction_value_expected_prev[4] )
		&& ((instruction_value_expected_prev[4] !== last_instruction_value_exp[4]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_instruction_value_exp[4] = instruction_value_expected_prev[4];
	end
	if (
		( instruction_value_expected_prev[5] !== 1'bx ) && ( instruction_value_prev[5] !== instruction_value_expected_prev[5] )
		&& ((instruction_value_expected_prev[5] !== last_instruction_value_exp[5]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_instruction_value_exp[5] = instruction_value_expected_prev[5];
	end
	if (
		( instruction_value_expected_prev[6] !== 1'bx ) && ( instruction_value_prev[6] !== instruction_value_expected_prev[6] )
		&& ((instruction_value_expected_prev[6] !== last_instruction_value_exp[6]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_instruction_value_exp[6] = instruction_value_expected_prev[6];
	end
	if (
		( instruction_value_expected_prev[7] !== 1'bx ) && ( instruction_value_prev[7] !== instruction_value_expected_prev[7] )
		&& ((instruction_value_expected_prev[7] !== last_instruction_value_exp[7]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_instruction_value_exp[7] = instruction_value_expected_prev[7];
	end
	if (
		( instructionOutIFID_expected_prev[0] !== 1'bx ) && ( instructionOutIFID_prev[0] !== instructionOutIFID_expected_prev[0] )
		&& ((instructionOutIFID_expected_prev[0] !== last_instructionOutIFID_exp[0]) ||
			on_first_change[48])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOutIFID[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOutIFID_expected_prev);
		$display ("     Real value = %b", instructionOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[48] = 1'b0;
		last_instructionOutIFID_exp[0] = instructionOutIFID_expected_prev[0];
	end
	if (
		( instructionOutIFID_expected_prev[1] !== 1'bx ) && ( instructionOutIFID_prev[1] !== instructionOutIFID_expected_prev[1] )
		&& ((instructionOutIFID_expected_prev[1] !== last_instructionOutIFID_exp[1]) ||
			on_first_change[48])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOutIFID[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOutIFID_expected_prev);
		$display ("     Real value = %b", instructionOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[48] = 1'b0;
		last_instructionOutIFID_exp[1] = instructionOutIFID_expected_prev[1];
	end
	if (
		( instructionOutIFID_expected_prev[2] !== 1'bx ) && ( instructionOutIFID_prev[2] !== instructionOutIFID_expected_prev[2] )
		&& ((instructionOutIFID_expected_prev[2] !== last_instructionOutIFID_exp[2]) ||
			on_first_change[48])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOutIFID[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOutIFID_expected_prev);
		$display ("     Real value = %b", instructionOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[48] = 1'b0;
		last_instructionOutIFID_exp[2] = instructionOutIFID_expected_prev[2];
	end
	if (
		( instructionOutIFID_expected_prev[3] !== 1'bx ) && ( instructionOutIFID_prev[3] !== instructionOutIFID_expected_prev[3] )
		&& ((instructionOutIFID_expected_prev[3] !== last_instructionOutIFID_exp[3]) ||
			on_first_change[48])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOutIFID[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOutIFID_expected_prev);
		$display ("     Real value = %b", instructionOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[48] = 1'b0;
		last_instructionOutIFID_exp[3] = instructionOutIFID_expected_prev[3];
	end
	if (
		( instructionOutIFID_expected_prev[4] !== 1'bx ) && ( instructionOutIFID_prev[4] !== instructionOutIFID_expected_prev[4] )
		&& ((instructionOutIFID_expected_prev[4] !== last_instructionOutIFID_exp[4]) ||
			on_first_change[48])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOutIFID[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOutIFID_expected_prev);
		$display ("     Real value = %b", instructionOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[48] = 1'b0;
		last_instructionOutIFID_exp[4] = instructionOutIFID_expected_prev[4];
	end
	if (
		( instructionOutIFID_expected_prev[5] !== 1'bx ) && ( instructionOutIFID_prev[5] !== instructionOutIFID_expected_prev[5] )
		&& ((instructionOutIFID_expected_prev[5] !== last_instructionOutIFID_exp[5]) ||
			on_first_change[48])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOutIFID[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOutIFID_expected_prev);
		$display ("     Real value = %b", instructionOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[48] = 1'b0;
		last_instructionOutIFID_exp[5] = instructionOutIFID_expected_prev[5];
	end
	if (
		( instructionOutIFID_expected_prev[6] !== 1'bx ) && ( instructionOutIFID_prev[6] !== instructionOutIFID_expected_prev[6] )
		&& ((instructionOutIFID_expected_prev[6] !== last_instructionOutIFID_exp[6]) ||
			on_first_change[48])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOutIFID[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOutIFID_expected_prev);
		$display ("     Real value = %b", instructionOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[48] = 1'b0;
		last_instructionOutIFID_exp[6] = instructionOutIFID_expected_prev[6];
	end
	if (
		( instructionOutIFID_expected_prev[7] !== 1'bx ) && ( instructionOutIFID_prev[7] !== instructionOutIFID_expected_prev[7] )
		&& ((instructionOutIFID_expected_prev[7] !== last_instructionOutIFID_exp[7]) ||
			on_first_change[48])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instructionOutIFID[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instructionOutIFID_expected_prev);
		$display ("     Real value = %b", instructionOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[48] = 1'b0;
		last_instructionOutIFID_exp[7] = instructionOutIFID_expected_prev[7];
	end
	if (
		( labelpassIFID_expected_prev !== 1'bx ) && ( labelpassIFID_prev !== labelpassIFID_expected_prev )
		&& ((labelpassIFID_expected_prev !== last_labelpassIFID_exp) ||
			on_first_change[49])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port labelpassIFID :: @time = %t",  $realtime);
		$display ("     Expected value = %b", labelpassIFID_expected_prev);
		$display ("     Real value = %b", labelpassIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[49] = 1'b0;
		last_labelpassIFID_exp = labelpassIFID_expected_prev;
	end
	if (
		( MWB_labelValueOut_expected_prev[0] !== 1'bx ) && ( MWB_labelValueOut_prev[0] !== MWB_labelValueOut_expected_prev[0] )
		&& ((MWB_labelValueOut_expected_prev[0] !== last_MWB_labelValueOut_exp[0]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_labelValueOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_labelValueOut_expected_prev);
		$display ("     Real value = %b", MWB_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_MWB_labelValueOut_exp[0] = MWB_labelValueOut_expected_prev[0];
	end
	if (
		( MWB_labelValueOut_expected_prev[1] !== 1'bx ) && ( MWB_labelValueOut_prev[1] !== MWB_labelValueOut_expected_prev[1] )
		&& ((MWB_labelValueOut_expected_prev[1] !== last_MWB_labelValueOut_exp[1]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_labelValueOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_labelValueOut_expected_prev);
		$display ("     Real value = %b", MWB_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_MWB_labelValueOut_exp[1] = MWB_labelValueOut_expected_prev[1];
	end
	if (
		( MWB_labelValueOut_expected_prev[2] !== 1'bx ) && ( MWB_labelValueOut_prev[2] !== MWB_labelValueOut_expected_prev[2] )
		&& ((MWB_labelValueOut_expected_prev[2] !== last_MWB_labelValueOut_exp[2]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_labelValueOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_labelValueOut_expected_prev);
		$display ("     Real value = %b", MWB_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_MWB_labelValueOut_exp[2] = MWB_labelValueOut_expected_prev[2];
	end
	if (
		( MWB_labelValueOut_expected_prev[3] !== 1'bx ) && ( MWB_labelValueOut_prev[3] !== MWB_labelValueOut_expected_prev[3] )
		&& ((MWB_labelValueOut_expected_prev[3] !== last_MWB_labelValueOut_exp[3]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_labelValueOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_labelValueOut_expected_prev);
		$display ("     Real value = %b", MWB_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_MWB_labelValueOut_exp[3] = MWB_labelValueOut_expected_prev[3];
	end
	if (
		( MWB_labelValueOut_expected_prev[4] !== 1'bx ) && ( MWB_labelValueOut_prev[4] !== MWB_labelValueOut_expected_prev[4] )
		&& ((MWB_labelValueOut_expected_prev[4] !== last_MWB_labelValueOut_exp[4]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_labelValueOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_labelValueOut_expected_prev);
		$display ("     Real value = %b", MWB_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_MWB_labelValueOut_exp[4] = MWB_labelValueOut_expected_prev[4];
	end
	if (
		( MWB_labelValueOut_expected_prev[5] !== 1'bx ) && ( MWB_labelValueOut_prev[5] !== MWB_labelValueOut_expected_prev[5] )
		&& ((MWB_labelValueOut_expected_prev[5] !== last_MWB_labelValueOut_exp[5]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_labelValueOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_labelValueOut_expected_prev);
		$display ("     Real value = %b", MWB_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_MWB_labelValueOut_exp[5] = MWB_labelValueOut_expected_prev[5];
	end
	if (
		( MWB_labelValueOut_expected_prev[6] !== 1'bx ) && ( MWB_labelValueOut_prev[6] !== MWB_labelValueOut_expected_prev[6] )
		&& ((MWB_labelValueOut_expected_prev[6] !== last_MWB_labelValueOut_exp[6]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_labelValueOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_labelValueOut_expected_prev);
		$display ("     Real value = %b", MWB_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_MWB_labelValueOut_exp[6] = MWB_labelValueOut_expected_prev[6];
	end
	if (
		( MWB_labelValueOut_expected_prev[7] !== 1'bx ) && ( MWB_labelValueOut_prev[7] !== MWB_labelValueOut_expected_prev[7] )
		&& ((MWB_labelValueOut_expected_prev[7] !== last_MWB_labelValueOut_exp[7]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_labelValueOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_labelValueOut_expected_prev);
		$display ("     Real value = %b", MWB_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_MWB_labelValueOut_exp[7] = MWB_labelValueOut_expected_prev[7];
	end
	if (
		( MWB_qout_expected_prev[0] !== 1'bx ) && ( MWB_qout_prev[0] !== MWB_qout_expected_prev[0] )
		&& ((MWB_qout_expected_prev[0] !== last_MWB_qout_exp[0]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_qout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_qout_expected_prev);
		$display ("     Real value = %b", MWB_qout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_MWB_qout_exp[0] = MWB_qout_expected_prev[0];
	end
	if (
		( MWB_qout_expected_prev[1] !== 1'bx ) && ( MWB_qout_prev[1] !== MWB_qout_expected_prev[1] )
		&& ((MWB_qout_expected_prev[1] !== last_MWB_qout_exp[1]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_qout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_qout_expected_prev);
		$display ("     Real value = %b", MWB_qout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_MWB_qout_exp[1] = MWB_qout_expected_prev[1];
	end
	if (
		( MWB_qout_expected_prev[2] !== 1'bx ) && ( MWB_qout_prev[2] !== MWB_qout_expected_prev[2] )
		&& ((MWB_qout_expected_prev[2] !== last_MWB_qout_exp[2]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_qout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_qout_expected_prev);
		$display ("     Real value = %b", MWB_qout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_MWB_qout_exp[2] = MWB_qout_expected_prev[2];
	end
	if (
		( MWB_qout_expected_prev[3] !== 1'bx ) && ( MWB_qout_prev[3] !== MWB_qout_expected_prev[3] )
		&& ((MWB_qout_expected_prev[3] !== last_MWB_qout_exp[3]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_qout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_qout_expected_prev);
		$display ("     Real value = %b", MWB_qout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_MWB_qout_exp[3] = MWB_qout_expected_prev[3];
	end
	if (
		( MWB_qout_expected_prev[4] !== 1'bx ) && ( MWB_qout_prev[4] !== MWB_qout_expected_prev[4] )
		&& ((MWB_qout_expected_prev[4] !== last_MWB_qout_exp[4]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_qout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_qout_expected_prev);
		$display ("     Real value = %b", MWB_qout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_MWB_qout_exp[4] = MWB_qout_expected_prev[4];
	end
	if (
		( MWB_qout_expected_prev[5] !== 1'bx ) && ( MWB_qout_prev[5] !== MWB_qout_expected_prev[5] )
		&& ((MWB_qout_expected_prev[5] !== last_MWB_qout_exp[5]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_qout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_qout_expected_prev);
		$display ("     Real value = %b", MWB_qout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_MWB_qout_exp[5] = MWB_qout_expected_prev[5];
	end
	if (
		( MWB_qout_expected_prev[6] !== 1'bx ) && ( MWB_qout_prev[6] !== MWB_qout_expected_prev[6] )
		&& ((MWB_qout_expected_prev[6] !== last_MWB_qout_exp[6]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_qout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_qout_expected_prev);
		$display ("     Real value = %b", MWB_qout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_MWB_qout_exp[6] = MWB_qout_expected_prev[6];
	end
	if (
		( MWB_qout_expected_prev[7] !== 1'bx ) && ( MWB_qout_prev[7] !== MWB_qout_expected_prev[7] )
		&& ((MWB_qout_expected_prev[7] !== last_MWB_qout_exp[7]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_qout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_qout_expected_prev);
		$display ("     Real value = %b", MWB_qout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_MWB_qout_exp[7] = MWB_qout_expected_prev[7];
	end
	if (
		( MWB_readmem_expected_prev !== 1'bx ) && ( MWB_readmem_prev !== MWB_readmem_expected_prev )
		&& ((MWB_readmem_expected_prev !== last_MWB_readmem_exp) ||
			on_first_change[52])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_readmem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_readmem_expected_prev);
		$display ("     Real value = %b", MWB_readmem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[52] = 1'b0;
		last_MWB_readmem_exp = MWB_readmem_expected_prev;
	end
	if (
		( MWB_resultout_expected_prev[0] !== 1'bx ) && ( MWB_resultout_prev[0] !== MWB_resultout_expected_prev[0] )
		&& ((MWB_resultout_expected_prev[0] !== last_MWB_resultout_exp[0]) ||
			on_first_change[53])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_resultout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_resultout_expected_prev);
		$display ("     Real value = %b", MWB_resultout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[53] = 1'b0;
		last_MWB_resultout_exp[0] = MWB_resultout_expected_prev[0];
	end
	if (
		( MWB_resultout_expected_prev[1] !== 1'bx ) && ( MWB_resultout_prev[1] !== MWB_resultout_expected_prev[1] )
		&& ((MWB_resultout_expected_prev[1] !== last_MWB_resultout_exp[1]) ||
			on_first_change[53])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_resultout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_resultout_expected_prev);
		$display ("     Real value = %b", MWB_resultout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[53] = 1'b0;
		last_MWB_resultout_exp[1] = MWB_resultout_expected_prev[1];
	end
	if (
		( MWB_resultout_expected_prev[2] !== 1'bx ) && ( MWB_resultout_prev[2] !== MWB_resultout_expected_prev[2] )
		&& ((MWB_resultout_expected_prev[2] !== last_MWB_resultout_exp[2]) ||
			on_first_change[53])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_resultout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_resultout_expected_prev);
		$display ("     Real value = %b", MWB_resultout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[53] = 1'b0;
		last_MWB_resultout_exp[2] = MWB_resultout_expected_prev[2];
	end
	if (
		( MWB_resultout_expected_prev[3] !== 1'bx ) && ( MWB_resultout_prev[3] !== MWB_resultout_expected_prev[3] )
		&& ((MWB_resultout_expected_prev[3] !== last_MWB_resultout_exp[3]) ||
			on_first_change[53])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_resultout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_resultout_expected_prev);
		$display ("     Real value = %b", MWB_resultout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[53] = 1'b0;
		last_MWB_resultout_exp[3] = MWB_resultout_expected_prev[3];
	end
	if (
		( MWB_resultout_expected_prev[4] !== 1'bx ) && ( MWB_resultout_prev[4] !== MWB_resultout_expected_prev[4] )
		&& ((MWB_resultout_expected_prev[4] !== last_MWB_resultout_exp[4]) ||
			on_first_change[53])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_resultout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_resultout_expected_prev);
		$display ("     Real value = %b", MWB_resultout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[53] = 1'b0;
		last_MWB_resultout_exp[4] = MWB_resultout_expected_prev[4];
	end
	if (
		( MWB_resultout_expected_prev[5] !== 1'bx ) && ( MWB_resultout_prev[5] !== MWB_resultout_expected_prev[5] )
		&& ((MWB_resultout_expected_prev[5] !== last_MWB_resultout_exp[5]) ||
			on_first_change[53])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_resultout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_resultout_expected_prev);
		$display ("     Real value = %b", MWB_resultout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[53] = 1'b0;
		last_MWB_resultout_exp[5] = MWB_resultout_expected_prev[5];
	end
	if (
		( MWB_resultout_expected_prev[6] !== 1'bx ) && ( MWB_resultout_prev[6] !== MWB_resultout_expected_prev[6] )
		&& ((MWB_resultout_expected_prev[6] !== last_MWB_resultout_exp[6]) ||
			on_first_change[53])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_resultout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_resultout_expected_prev);
		$display ("     Real value = %b", MWB_resultout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[53] = 1'b0;
		last_MWB_resultout_exp[6] = MWB_resultout_expected_prev[6];
	end
	if (
		( MWB_resultout_expected_prev[7] !== 1'bx ) && ( MWB_resultout_prev[7] !== MWB_resultout_expected_prev[7] )
		&& ((MWB_resultout_expected_prev[7] !== last_MWB_resultout_exp[7]) ||
			on_first_change[53])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWB_resultout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWB_resultout_expected_prev);
		$display ("     Real value = %b", MWB_resultout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[53] = 1'b0;
		last_MWB_resultout_exp[7] = MWB_resultout_expected_prev[7];
	end
	if (
		( opcode_out_expected_prev[0] !== 1'bx ) && ( opcode_out_prev[0] !== opcode_out_expected_prev[0] )
		&& ((opcode_out_expected_prev[0] !== last_opcode_out_exp[0]) ||
			on_first_change[54])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[54] = 1'b0;
		last_opcode_out_exp[0] = opcode_out_expected_prev[0];
	end
	if (
		( opcode_out_expected_prev[1] !== 1'bx ) && ( opcode_out_prev[1] !== opcode_out_expected_prev[1] )
		&& ((opcode_out_expected_prev[1] !== last_opcode_out_exp[1]) ||
			on_first_change[54])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[54] = 1'b0;
		last_opcode_out_exp[1] = opcode_out_expected_prev[1];
	end
	if (
		( opcode_out_expected_prev[2] !== 1'bx ) && ( opcode_out_prev[2] !== opcode_out_expected_prev[2] )
		&& ((opcode_out_expected_prev[2] !== last_opcode_out_exp[2]) ||
			on_first_change[54])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[54] = 1'b0;
		last_opcode_out_exp[2] = opcode_out_expected_prev[2];
	end
	if (
		( opcode_out_expected_prev[3] !== 1'bx ) && ( opcode_out_prev[3] !== opcode_out_expected_prev[3] )
		&& ((opcode_out_expected_prev[3] !== last_opcode_out_exp[3]) ||
			on_first_change[54])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[54] = 1'b0;
		last_opcode_out_exp[3] = opcode_out_expected_prev[3];
	end
	if (
		( orOut_expected_prev !== 1'bx ) && ( orOut_prev !== orOut_expected_prev )
		&& ((orOut_expected_prev !== last_orOut_exp) ||
			on_first_change[55])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port orOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", orOut_expected_prev);
		$display ("     Real value = %b", orOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[55] = 1'b0;
		last_orOut_exp = orOut_expected_prev;
	end
	if (
		( outPCResetFlag_expected_prev !== 1'bx ) && ( outPCResetFlag_prev !== outPCResetFlag_expected_prev )
		&& ((outPCResetFlag_expected_prev !== last_outPCResetFlag_exp) ||
			on_first_change[56])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outPCResetFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outPCResetFlag_expected_prev);
		$display ("     Real value = %b", outPCResetFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[56] = 1'b0;
		last_outPCResetFlag_exp = outPCResetFlag_expected_prev;
	end
	if (
		( pcOutIFID_expected_prev[0] !== 1'bx ) && ( pcOutIFID_prev[0] !== pcOutIFID_expected_prev[0] )
		&& ((pcOutIFID_expected_prev[0] !== last_pcOutIFID_exp[0]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOutIFID[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOutIFID_expected_prev);
		$display ("     Real value = %b", pcOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_pcOutIFID_exp[0] = pcOutIFID_expected_prev[0];
	end
	if (
		( pcOutIFID_expected_prev[1] !== 1'bx ) && ( pcOutIFID_prev[1] !== pcOutIFID_expected_prev[1] )
		&& ((pcOutIFID_expected_prev[1] !== last_pcOutIFID_exp[1]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOutIFID[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOutIFID_expected_prev);
		$display ("     Real value = %b", pcOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_pcOutIFID_exp[1] = pcOutIFID_expected_prev[1];
	end
	if (
		( pcOutIFID_expected_prev[2] !== 1'bx ) && ( pcOutIFID_prev[2] !== pcOutIFID_expected_prev[2] )
		&& ((pcOutIFID_expected_prev[2] !== last_pcOutIFID_exp[2]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOutIFID[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOutIFID_expected_prev);
		$display ("     Real value = %b", pcOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_pcOutIFID_exp[2] = pcOutIFID_expected_prev[2];
	end
	if (
		( pcOutIFID_expected_prev[3] !== 1'bx ) && ( pcOutIFID_prev[3] !== pcOutIFID_expected_prev[3] )
		&& ((pcOutIFID_expected_prev[3] !== last_pcOutIFID_exp[3]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOutIFID[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOutIFID_expected_prev);
		$display ("     Real value = %b", pcOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_pcOutIFID_exp[3] = pcOutIFID_expected_prev[3];
	end
	if (
		( pcOutIFID_expected_prev[4] !== 1'bx ) && ( pcOutIFID_prev[4] !== pcOutIFID_expected_prev[4] )
		&& ((pcOutIFID_expected_prev[4] !== last_pcOutIFID_exp[4]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOutIFID[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOutIFID_expected_prev);
		$display ("     Real value = %b", pcOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_pcOutIFID_exp[4] = pcOutIFID_expected_prev[4];
	end
	if (
		( pcOutIFID_expected_prev[5] !== 1'bx ) && ( pcOutIFID_prev[5] !== pcOutIFID_expected_prev[5] )
		&& ((pcOutIFID_expected_prev[5] !== last_pcOutIFID_exp[5]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOutIFID[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOutIFID_expected_prev);
		$display ("     Real value = %b", pcOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_pcOutIFID_exp[5] = pcOutIFID_expected_prev[5];
	end
	if (
		( pcOutIFID_expected_prev[6] !== 1'bx ) && ( pcOutIFID_prev[6] !== pcOutIFID_expected_prev[6] )
		&& ((pcOutIFID_expected_prev[6] !== last_pcOutIFID_exp[6]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOutIFID[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOutIFID_expected_prev);
		$display ("     Real value = %b", pcOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_pcOutIFID_exp[6] = pcOutIFID_expected_prev[6];
	end
	if (
		( pcOutIFID_expected_prev[7] !== 1'bx ) && ( pcOutIFID_prev[7] !== pcOutIFID_expected_prev[7] )
		&& ((pcOutIFID_expected_prev[7] !== last_pcOutIFID_exp[7]) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOutIFID[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOutIFID_expected_prev);
		$display ("     Real value = %b", pcOutIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_pcOutIFID_exp[7] = pcOutIFID_expected_prev[7];
	end
	if (
		( pcresetIFID_expected_prev !== 1'bx ) && ( pcresetIFID_prev !== pcresetIFID_expected_prev )
		&& ((pcresetIFID_expected_prev !== last_pcresetIFID_exp) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcresetIFID :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcresetIFID_expected_prev);
		$display ("     Real value = %b", pcresetIFID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_pcresetIFID_exp = pcresetIFID_expected_prev;
	end
	if (
		( ramOut_expected_prev[0] !== 1'bx ) && ( ramOut_prev[0] !== ramOut_expected_prev[0] )
		&& ((ramOut_expected_prev[0] !== last_ramOut_exp[0]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_ramOut_exp[0] = ramOut_expected_prev[0];
	end
	if (
		( ramOut_expected_prev[1] !== 1'bx ) && ( ramOut_prev[1] !== ramOut_expected_prev[1] )
		&& ((ramOut_expected_prev[1] !== last_ramOut_exp[1]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_ramOut_exp[1] = ramOut_expected_prev[1];
	end
	if (
		( ramOut_expected_prev[2] !== 1'bx ) && ( ramOut_prev[2] !== ramOut_expected_prev[2] )
		&& ((ramOut_expected_prev[2] !== last_ramOut_exp[2]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_ramOut_exp[2] = ramOut_expected_prev[2];
	end
	if (
		( ramOut_expected_prev[3] !== 1'bx ) && ( ramOut_prev[3] !== ramOut_expected_prev[3] )
		&& ((ramOut_expected_prev[3] !== last_ramOut_exp[3]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_ramOut_exp[3] = ramOut_expected_prev[3];
	end
	if (
		( ramOut_expected_prev[4] !== 1'bx ) && ( ramOut_prev[4] !== ramOut_expected_prev[4] )
		&& ((ramOut_expected_prev[4] !== last_ramOut_exp[4]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_ramOut_exp[4] = ramOut_expected_prev[4];
	end
	if (
		( ramOut_expected_prev[5] !== 1'bx ) && ( ramOut_prev[5] !== ramOut_expected_prev[5] )
		&& ((ramOut_expected_prev[5] !== last_ramOut_exp[5]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_ramOut_exp[5] = ramOut_expected_prev[5];
	end
	if (
		( ramOut_expected_prev[6] !== 1'bx ) && ( ramOut_prev[6] !== ramOut_expected_prev[6] )
		&& ((ramOut_expected_prev[6] !== last_ramOut_exp[6]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_ramOut_exp[6] = ramOut_expected_prev[6];
	end
	if (
		( ramOut_expected_prev[7] !== 1'bx ) && ( ramOut_prev[7] !== ramOut_expected_prev[7] )
		&& ((ramOut_expected_prev[7] !== last_ramOut_exp[7]) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOut_expected_prev);
		$display ("     Real value = %b", ramOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_ramOut_exp[7] = ramOut_expected_prev[7];
	end
	if (
		( REGALU_immediateFlagOut_expected_prev !== 1'bx ) && ( REGALU_immediateFlagOut_prev !== REGALU_immediateFlagOut_expected_prev )
		&& ((REGALU_immediateFlagOut_expected_prev !== last_REGALU_immediateFlagOut_exp) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_immediateFlagOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_immediateFlagOut_expected_prev);
		$display ("     Real value = %b", REGALU_immediateFlagOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_REGALU_immediateFlagOut_exp = REGALU_immediateFlagOut_expected_prev;
	end
	if (
		( REGALU_labelFlagOut_expected_prev !== 1'bx ) && ( REGALU_labelFlagOut_prev !== REGALU_labelFlagOut_expected_prev )
		&& ((REGALU_labelFlagOut_expected_prev !== last_REGALU_labelFlagOut_exp) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_labelFlagOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_labelFlagOut_expected_prev);
		$display ("     Real value = %b", REGALU_labelFlagOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_REGALU_labelFlagOut_exp = REGALU_labelFlagOut_expected_prev;
	end
	if (
		( REGALU_labelValueOut_expected_prev[0] !== 1'bx ) && ( REGALU_labelValueOut_prev[0] !== REGALU_labelValueOut_expected_prev[0] )
		&& ((REGALU_labelValueOut_expected_prev[0] !== last_REGALU_labelValueOut_exp[0]) ||
			on_first_change[62])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_labelValueOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_labelValueOut_expected_prev);
		$display ("     Real value = %b", REGALU_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[62] = 1'b0;
		last_REGALU_labelValueOut_exp[0] = REGALU_labelValueOut_expected_prev[0];
	end
	if (
		( REGALU_labelValueOut_expected_prev[1] !== 1'bx ) && ( REGALU_labelValueOut_prev[1] !== REGALU_labelValueOut_expected_prev[1] )
		&& ((REGALU_labelValueOut_expected_prev[1] !== last_REGALU_labelValueOut_exp[1]) ||
			on_first_change[62])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_labelValueOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_labelValueOut_expected_prev);
		$display ("     Real value = %b", REGALU_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[62] = 1'b0;
		last_REGALU_labelValueOut_exp[1] = REGALU_labelValueOut_expected_prev[1];
	end
	if (
		( REGALU_labelValueOut_expected_prev[2] !== 1'bx ) && ( REGALU_labelValueOut_prev[2] !== REGALU_labelValueOut_expected_prev[2] )
		&& ((REGALU_labelValueOut_expected_prev[2] !== last_REGALU_labelValueOut_exp[2]) ||
			on_first_change[62])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_labelValueOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_labelValueOut_expected_prev);
		$display ("     Real value = %b", REGALU_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[62] = 1'b0;
		last_REGALU_labelValueOut_exp[2] = REGALU_labelValueOut_expected_prev[2];
	end
	if (
		( REGALU_labelValueOut_expected_prev[3] !== 1'bx ) && ( REGALU_labelValueOut_prev[3] !== REGALU_labelValueOut_expected_prev[3] )
		&& ((REGALU_labelValueOut_expected_prev[3] !== last_REGALU_labelValueOut_exp[3]) ||
			on_first_change[62])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_labelValueOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_labelValueOut_expected_prev);
		$display ("     Real value = %b", REGALU_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[62] = 1'b0;
		last_REGALU_labelValueOut_exp[3] = REGALU_labelValueOut_expected_prev[3];
	end
	if (
		( REGALU_labelValueOut_expected_prev[4] !== 1'bx ) && ( REGALU_labelValueOut_prev[4] !== REGALU_labelValueOut_expected_prev[4] )
		&& ((REGALU_labelValueOut_expected_prev[4] !== last_REGALU_labelValueOut_exp[4]) ||
			on_first_change[62])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_labelValueOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_labelValueOut_expected_prev);
		$display ("     Real value = %b", REGALU_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[62] = 1'b0;
		last_REGALU_labelValueOut_exp[4] = REGALU_labelValueOut_expected_prev[4];
	end
	if (
		( REGALU_labelValueOut_expected_prev[5] !== 1'bx ) && ( REGALU_labelValueOut_prev[5] !== REGALU_labelValueOut_expected_prev[5] )
		&& ((REGALU_labelValueOut_expected_prev[5] !== last_REGALU_labelValueOut_exp[5]) ||
			on_first_change[62])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_labelValueOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_labelValueOut_expected_prev);
		$display ("     Real value = %b", REGALU_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[62] = 1'b0;
		last_REGALU_labelValueOut_exp[5] = REGALU_labelValueOut_expected_prev[5];
	end
	if (
		( REGALU_labelValueOut_expected_prev[6] !== 1'bx ) && ( REGALU_labelValueOut_prev[6] !== REGALU_labelValueOut_expected_prev[6] )
		&& ((REGALU_labelValueOut_expected_prev[6] !== last_REGALU_labelValueOut_exp[6]) ||
			on_first_change[62])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_labelValueOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_labelValueOut_expected_prev);
		$display ("     Real value = %b", REGALU_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[62] = 1'b0;
		last_REGALU_labelValueOut_exp[6] = REGALU_labelValueOut_expected_prev[6];
	end
	if (
		( REGALU_labelValueOut_expected_prev[7] !== 1'bx ) && ( REGALU_labelValueOut_prev[7] !== REGALU_labelValueOut_expected_prev[7] )
		&& ((REGALU_labelValueOut_expected_prev[7] !== last_REGALU_labelValueOut_exp[7]) ||
			on_first_change[62])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_labelValueOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_labelValueOut_expected_prev);
		$display ("     Real value = %b", REGALU_labelValueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[62] = 1'b0;
		last_REGALU_labelValueOut_exp[7] = REGALU_labelValueOut_expected_prev[7];
	end
	if (
		( REGALU_opcodeOut_expected_prev[0] !== 1'bx ) && ( REGALU_opcodeOut_prev[0] !== REGALU_opcodeOut_expected_prev[0] )
		&& ((REGALU_opcodeOut_expected_prev[0] !== last_REGALU_opcodeOut_exp[0]) ||
			on_first_change[63])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_opcodeOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_opcodeOut_expected_prev);
		$display ("     Real value = %b", REGALU_opcodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[63] = 1'b0;
		last_REGALU_opcodeOut_exp[0] = REGALU_opcodeOut_expected_prev[0];
	end
	if (
		( REGALU_opcodeOut_expected_prev[1] !== 1'bx ) && ( REGALU_opcodeOut_prev[1] !== REGALU_opcodeOut_expected_prev[1] )
		&& ((REGALU_opcodeOut_expected_prev[1] !== last_REGALU_opcodeOut_exp[1]) ||
			on_first_change[63])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_opcodeOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_opcodeOut_expected_prev);
		$display ("     Real value = %b", REGALU_opcodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[63] = 1'b0;
		last_REGALU_opcodeOut_exp[1] = REGALU_opcodeOut_expected_prev[1];
	end
	if (
		( REGALU_opcodeOut_expected_prev[2] !== 1'bx ) && ( REGALU_opcodeOut_prev[2] !== REGALU_opcodeOut_expected_prev[2] )
		&& ((REGALU_opcodeOut_expected_prev[2] !== last_REGALU_opcodeOut_exp[2]) ||
			on_first_change[63])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_opcodeOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_opcodeOut_expected_prev);
		$display ("     Real value = %b", REGALU_opcodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[63] = 1'b0;
		last_REGALU_opcodeOut_exp[2] = REGALU_opcodeOut_expected_prev[2];
	end
	if (
		( REGALU_opcodeOut_expected_prev[3] !== 1'bx ) && ( REGALU_opcodeOut_prev[3] !== REGALU_opcodeOut_expected_prev[3] )
		&& ((REGALU_opcodeOut_expected_prev[3] !== last_REGALU_opcodeOut_exp[3]) ||
			on_first_change[63])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_opcodeOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_opcodeOut_expected_prev);
		$display ("     Real value = %b", REGALU_opcodeOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[63] = 1'b0;
		last_REGALU_opcodeOut_exp[3] = REGALU_opcodeOut_expected_prev[3];
	end
	if (
		( REGALU_readMemFlagOut_expected_prev !== 1'bx ) && ( REGALU_readMemFlagOut_prev !== REGALU_readMemFlagOut_expected_prev )
		&& ((REGALU_readMemFlagOut_expected_prev !== last_REGALU_readMemFlagOut_exp) ||
			on_first_change[64])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_readMemFlagOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_readMemFlagOut_expected_prev);
		$display ("     Real value = %b", REGALU_readMemFlagOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[64] = 1'b0;
		last_REGALU_readMemFlagOut_exp = REGALU_readMemFlagOut_expected_prev;
	end
	if (
		( REGALU_regAOut_expected_prev[0] !== 1'bx ) && ( REGALU_regAOut_prev[0] !== REGALU_regAOut_expected_prev[0] )
		&& ((REGALU_regAOut_expected_prev[0] !== last_REGALU_regAOut_exp[0]) ||
			on_first_change[65])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regAOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regAOut_expected_prev);
		$display ("     Real value = %b", REGALU_regAOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[65] = 1'b0;
		last_REGALU_regAOut_exp[0] = REGALU_regAOut_expected_prev[0];
	end
	if (
		( REGALU_regAOut_expected_prev[1] !== 1'bx ) && ( REGALU_regAOut_prev[1] !== REGALU_regAOut_expected_prev[1] )
		&& ((REGALU_regAOut_expected_prev[1] !== last_REGALU_regAOut_exp[1]) ||
			on_first_change[65])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regAOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regAOut_expected_prev);
		$display ("     Real value = %b", REGALU_regAOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[65] = 1'b0;
		last_REGALU_regAOut_exp[1] = REGALU_regAOut_expected_prev[1];
	end
	if (
		( REGALU_regAOut_expected_prev[2] !== 1'bx ) && ( REGALU_regAOut_prev[2] !== REGALU_regAOut_expected_prev[2] )
		&& ((REGALU_regAOut_expected_prev[2] !== last_REGALU_regAOut_exp[2]) ||
			on_first_change[65])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regAOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regAOut_expected_prev);
		$display ("     Real value = %b", REGALU_regAOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[65] = 1'b0;
		last_REGALU_regAOut_exp[2] = REGALU_regAOut_expected_prev[2];
	end
	if (
		( REGALU_regAOut_expected_prev[3] !== 1'bx ) && ( REGALU_regAOut_prev[3] !== REGALU_regAOut_expected_prev[3] )
		&& ((REGALU_regAOut_expected_prev[3] !== last_REGALU_regAOut_exp[3]) ||
			on_first_change[65])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regAOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regAOut_expected_prev);
		$display ("     Real value = %b", REGALU_regAOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[65] = 1'b0;
		last_REGALU_regAOut_exp[3] = REGALU_regAOut_expected_prev[3];
	end
	if (
		( REGALU_regAOut_expected_prev[4] !== 1'bx ) && ( REGALU_regAOut_prev[4] !== REGALU_regAOut_expected_prev[4] )
		&& ((REGALU_regAOut_expected_prev[4] !== last_REGALU_regAOut_exp[4]) ||
			on_first_change[65])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regAOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regAOut_expected_prev);
		$display ("     Real value = %b", REGALU_regAOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[65] = 1'b0;
		last_REGALU_regAOut_exp[4] = REGALU_regAOut_expected_prev[4];
	end
	if (
		( REGALU_regAOut_expected_prev[5] !== 1'bx ) && ( REGALU_regAOut_prev[5] !== REGALU_regAOut_expected_prev[5] )
		&& ((REGALU_regAOut_expected_prev[5] !== last_REGALU_regAOut_exp[5]) ||
			on_first_change[65])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regAOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regAOut_expected_prev);
		$display ("     Real value = %b", REGALU_regAOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[65] = 1'b0;
		last_REGALU_regAOut_exp[5] = REGALU_regAOut_expected_prev[5];
	end
	if (
		( REGALU_regAOut_expected_prev[6] !== 1'bx ) && ( REGALU_regAOut_prev[6] !== REGALU_regAOut_expected_prev[6] )
		&& ((REGALU_regAOut_expected_prev[6] !== last_REGALU_regAOut_exp[6]) ||
			on_first_change[65])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regAOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regAOut_expected_prev);
		$display ("     Real value = %b", REGALU_regAOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[65] = 1'b0;
		last_REGALU_regAOut_exp[6] = REGALU_regAOut_expected_prev[6];
	end
	if (
		( REGALU_regAOut_expected_prev[7] !== 1'bx ) && ( REGALU_regAOut_prev[7] !== REGALU_regAOut_expected_prev[7] )
		&& ((REGALU_regAOut_expected_prev[7] !== last_REGALU_regAOut_exp[7]) ||
			on_first_change[65])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regAOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regAOut_expected_prev);
		$display ("     Real value = %b", REGALU_regAOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[65] = 1'b0;
		last_REGALU_regAOut_exp[7] = REGALU_regAOut_expected_prev[7];
	end
	if (
		( REGALU_regBOut_expected_prev[0] !== 1'bx ) && ( REGALU_regBOut_prev[0] !== REGALU_regBOut_expected_prev[0] )
		&& ((REGALU_regBOut_expected_prev[0] !== last_REGALU_regBOut_exp[0]) ||
			on_first_change[66])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regBOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regBOut_expected_prev);
		$display ("     Real value = %b", REGALU_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[66] = 1'b0;
		last_REGALU_regBOut_exp[0] = REGALU_regBOut_expected_prev[0];
	end
	if (
		( REGALU_regBOut_expected_prev[1] !== 1'bx ) && ( REGALU_regBOut_prev[1] !== REGALU_regBOut_expected_prev[1] )
		&& ((REGALU_regBOut_expected_prev[1] !== last_REGALU_regBOut_exp[1]) ||
			on_first_change[66])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regBOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regBOut_expected_prev);
		$display ("     Real value = %b", REGALU_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[66] = 1'b0;
		last_REGALU_regBOut_exp[1] = REGALU_regBOut_expected_prev[1];
	end
	if (
		( REGALU_regBOut_expected_prev[2] !== 1'bx ) && ( REGALU_regBOut_prev[2] !== REGALU_regBOut_expected_prev[2] )
		&& ((REGALU_regBOut_expected_prev[2] !== last_REGALU_regBOut_exp[2]) ||
			on_first_change[66])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regBOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regBOut_expected_prev);
		$display ("     Real value = %b", REGALU_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[66] = 1'b0;
		last_REGALU_regBOut_exp[2] = REGALU_regBOut_expected_prev[2];
	end
	if (
		( REGALU_regBOut_expected_prev[3] !== 1'bx ) && ( REGALU_regBOut_prev[3] !== REGALU_regBOut_expected_prev[3] )
		&& ((REGALU_regBOut_expected_prev[3] !== last_REGALU_regBOut_exp[3]) ||
			on_first_change[66])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regBOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regBOut_expected_prev);
		$display ("     Real value = %b", REGALU_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[66] = 1'b0;
		last_REGALU_regBOut_exp[3] = REGALU_regBOut_expected_prev[3];
	end
	if (
		( REGALU_regBOut_expected_prev[4] !== 1'bx ) && ( REGALU_regBOut_prev[4] !== REGALU_regBOut_expected_prev[4] )
		&& ((REGALU_regBOut_expected_prev[4] !== last_REGALU_regBOut_exp[4]) ||
			on_first_change[66])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regBOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regBOut_expected_prev);
		$display ("     Real value = %b", REGALU_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[66] = 1'b0;
		last_REGALU_regBOut_exp[4] = REGALU_regBOut_expected_prev[4];
	end
	if (
		( REGALU_regBOut_expected_prev[5] !== 1'bx ) && ( REGALU_regBOut_prev[5] !== REGALU_regBOut_expected_prev[5] )
		&& ((REGALU_regBOut_expected_prev[5] !== last_REGALU_regBOut_exp[5]) ||
			on_first_change[66])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regBOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regBOut_expected_prev);
		$display ("     Real value = %b", REGALU_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[66] = 1'b0;
		last_REGALU_regBOut_exp[5] = REGALU_regBOut_expected_prev[5];
	end
	if (
		( REGALU_regBOut_expected_prev[6] !== 1'bx ) && ( REGALU_regBOut_prev[6] !== REGALU_regBOut_expected_prev[6] )
		&& ((REGALU_regBOut_expected_prev[6] !== last_REGALU_regBOut_exp[6]) ||
			on_first_change[66])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regBOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regBOut_expected_prev);
		$display ("     Real value = %b", REGALU_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[66] = 1'b0;
		last_REGALU_regBOut_exp[6] = REGALU_regBOut_expected_prev[6];
	end
	if (
		( REGALU_regBOut_expected_prev[7] !== 1'bx ) && ( REGALU_regBOut_prev[7] !== REGALU_regBOut_expected_prev[7] )
		&& ((REGALU_regBOut_expected_prev[7] !== last_REGALU_regBOut_exp[7]) ||
			on_first_change[66])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_regBOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_regBOut_expected_prev);
		$display ("     Real value = %b", REGALU_regBOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[66] = 1'b0;
		last_REGALU_regBOut_exp[7] = REGALU_regBOut_expected_prev[7];
	end
	if (
		( REGALU_signFlagOut_expected_prev !== 1'bx ) && ( REGALU_signFlagOut_prev !== REGALU_signFlagOut_expected_prev )
		&& ((REGALU_signFlagOut_expected_prev !== last_REGALU_signFlagOut_exp) ||
			on_first_change[67])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_signFlagOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_signFlagOut_expected_prev);
		$display ("     Real value = %b", REGALU_signFlagOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[67] = 1'b0;
		last_REGALU_signFlagOut_exp = REGALU_signFlagOut_expected_prev;
	end
	if (
		( REGALU_valueOut_expected_prev[0] !== 1'bx ) && ( REGALU_valueOut_prev[0] !== REGALU_valueOut_expected_prev[0] )
		&& ((REGALU_valueOut_expected_prev[0] !== last_REGALU_valueOut_exp[0]) ||
			on_first_change[68])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_valueOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_valueOut_expected_prev);
		$display ("     Real value = %b", REGALU_valueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[68] = 1'b0;
		last_REGALU_valueOut_exp[0] = REGALU_valueOut_expected_prev[0];
	end
	if (
		( REGALU_valueOut_expected_prev[1] !== 1'bx ) && ( REGALU_valueOut_prev[1] !== REGALU_valueOut_expected_prev[1] )
		&& ((REGALU_valueOut_expected_prev[1] !== last_REGALU_valueOut_exp[1]) ||
			on_first_change[68])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_valueOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_valueOut_expected_prev);
		$display ("     Real value = %b", REGALU_valueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[68] = 1'b0;
		last_REGALU_valueOut_exp[1] = REGALU_valueOut_expected_prev[1];
	end
	if (
		( REGALU_valueOut_expected_prev[2] !== 1'bx ) && ( REGALU_valueOut_prev[2] !== REGALU_valueOut_expected_prev[2] )
		&& ((REGALU_valueOut_expected_prev[2] !== last_REGALU_valueOut_exp[2]) ||
			on_first_change[68])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_valueOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_valueOut_expected_prev);
		$display ("     Real value = %b", REGALU_valueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[68] = 1'b0;
		last_REGALU_valueOut_exp[2] = REGALU_valueOut_expected_prev[2];
	end
	if (
		( REGALU_valueOut_expected_prev[3] !== 1'bx ) && ( REGALU_valueOut_prev[3] !== REGALU_valueOut_expected_prev[3] )
		&& ((REGALU_valueOut_expected_prev[3] !== last_REGALU_valueOut_exp[3]) ||
			on_first_change[68])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_valueOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_valueOut_expected_prev);
		$display ("     Real value = %b", REGALU_valueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[68] = 1'b0;
		last_REGALU_valueOut_exp[3] = REGALU_valueOut_expected_prev[3];
	end
	if (
		( REGALU_valueOut_expected_prev[4] !== 1'bx ) && ( REGALU_valueOut_prev[4] !== REGALU_valueOut_expected_prev[4] )
		&& ((REGALU_valueOut_expected_prev[4] !== last_REGALU_valueOut_exp[4]) ||
			on_first_change[68])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_valueOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_valueOut_expected_prev);
		$display ("     Real value = %b", REGALU_valueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[68] = 1'b0;
		last_REGALU_valueOut_exp[4] = REGALU_valueOut_expected_prev[4];
	end
	if (
		( REGALU_valueOut_expected_prev[5] !== 1'bx ) && ( REGALU_valueOut_prev[5] !== REGALU_valueOut_expected_prev[5] )
		&& ((REGALU_valueOut_expected_prev[5] !== last_REGALU_valueOut_exp[5]) ||
			on_first_change[68])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_valueOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_valueOut_expected_prev);
		$display ("     Real value = %b", REGALU_valueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[68] = 1'b0;
		last_REGALU_valueOut_exp[5] = REGALU_valueOut_expected_prev[5];
	end
	if (
		( REGALU_valueOut_expected_prev[6] !== 1'bx ) && ( REGALU_valueOut_prev[6] !== REGALU_valueOut_expected_prev[6] )
		&& ((REGALU_valueOut_expected_prev[6] !== last_REGALU_valueOut_exp[6]) ||
			on_first_change[68])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_valueOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_valueOut_expected_prev);
		$display ("     Real value = %b", REGALU_valueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[68] = 1'b0;
		last_REGALU_valueOut_exp[6] = REGALU_valueOut_expected_prev[6];
	end
	if (
		( REGALU_valueOut_expected_prev[7] !== 1'bx ) && ( REGALU_valueOut_prev[7] !== REGALU_valueOut_expected_prev[7] )
		&& ((REGALU_valueOut_expected_prev[7] !== last_REGALU_valueOut_exp[7]) ||
			on_first_change[68])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_valueOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_valueOut_expected_prev);
		$display ("     Real value = %b", REGALU_valueOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[68] = 1'b0;
		last_REGALU_valueOut_exp[7] = REGALU_valueOut_expected_prev[7];
	end
	if (
		( REGALU_writeMemFlagOut_expected_prev !== 1'bx ) && ( REGALU_writeMemFlagOut_prev !== REGALU_writeMemFlagOut_expected_prev )
		&& ((REGALU_writeMemFlagOut_expected_prev !== last_REGALU_writeMemFlagOut_exp) ||
			on_first_change[69])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REGALU_writeMemFlagOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REGALU_writeMemFlagOut_expected_prev);
		$display ("     Real value = %b", REGALU_writeMemFlagOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[69] = 1'b0;
		last_REGALU_writeMemFlagOut_exp = REGALU_writeMemFlagOut_expected_prev;
	end
	if (
		( val_expected_prev[0] !== 1'bx ) && ( val_prev[0] !== val_expected_prev[0] )
		&& ((val_expected_prev[0] !== last_val_exp[0]) ||
			on_first_change[70])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[70] = 1'b0;
		last_val_exp[0] = val_expected_prev[0];
	end
	if (
		( val_expected_prev[1] !== 1'bx ) && ( val_prev[1] !== val_expected_prev[1] )
		&& ((val_expected_prev[1] !== last_val_exp[1]) ||
			on_first_change[70])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[70] = 1'b0;
		last_val_exp[1] = val_expected_prev[1];
	end
	if (
		( val_expected_prev[2] !== 1'bx ) && ( val_prev[2] !== val_expected_prev[2] )
		&& ((val_expected_prev[2] !== last_val_exp[2]) ||
			on_first_change[70])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[70] = 1'b0;
		last_val_exp[2] = val_expected_prev[2];
	end
	if (
		( val_expected_prev[3] !== 1'bx ) && ( val_prev[3] !== val_expected_prev[3] )
		&& ((val_expected_prev[3] !== last_val_exp[3]) ||
			on_first_change[70])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[70] = 1'b0;
		last_val_exp[3] = val_expected_prev[3];
	end
	if (
		( val_expected_prev[4] !== 1'bx ) && ( val_prev[4] !== val_expected_prev[4] )
		&& ((val_expected_prev[4] !== last_val_exp[4]) ||
			on_first_change[70])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[70] = 1'b0;
		last_val_exp[4] = val_expected_prev[4];
	end
	if (
		( val_expected_prev[5] !== 1'bx ) && ( val_prev[5] !== val_expected_prev[5] )
		&& ((val_expected_prev[5] !== last_val_exp[5]) ||
			on_first_change[70])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[70] = 1'b0;
		last_val_exp[5] = val_expected_prev[5];
	end
	if (
		( val_expected_prev[6] !== 1'bx ) && ( val_prev[6] !== val_expected_prev[6] )
		&& ((val_expected_prev[6] !== last_val_exp[6]) ||
			on_first_change[70])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[70] = 1'b0;
		last_val_exp[6] = val_expected_prev[6];
	end
	if (
		( val_expected_prev[7] !== 1'bx ) && ( val_prev[7] !== val_expected_prev[7] )
		&& ((val_expected_prev[7] !== last_val_exp[7]) ||
			on_first_change[70])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[70] = 1'b0;
		last_val_exp[7] = val_expected_prev[7];
	end
	if (
		( WMB_labelflagOut_expected_prev !== 1'bx ) && ( WMB_labelflagOut_prev !== WMB_labelflagOut_expected_prev )
		&& ((WMB_labelflagOut_expected_prev !== last_WMB_labelflagOut_exp) ||
			on_first_change[71])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WMB_labelflagOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WMB_labelflagOut_expected_prev);
		$display ("     Real value = %b", WMB_labelflagOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[71] = 1'b0;
		last_WMB_labelflagOut_exp = WMB_labelflagOut_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module CS141L_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg labelPassButton;
reg start;
reg [7:0] startAddress;
reg zero;
// wires                                               
wire alu_lessThanFlag;
wire [7:0] alu_overflow;
wire alu_overflowFlag;
wire [7:0] alu_result;
wire [7:0] aluIn0;
wire [7:0] ALUM_ALUResultOut;
wire ALUM_labelvalueout;
wire ALUM_labelvalueout0;
wire ALUM_labelvalueout1;
wire ALUM_labelvalueout2;
wire ALUM_labelvalueout3;
wire ALUM_labelvalueout4;
wire ALUM_labelvalueout5;
wire ALUM_labelvalueout6;
wire ALUM_labelvalueout7;
wire ALUM_readMemFlagOut;
wire [7:0] ALUM_regAOu;
wire [7:0] ALUM_regBOut;
wire ALUM_writeMemFlagOut;
wire [7:0] BUSMUX_result;
wire [7:0] BUSMUX_result_bm1;
wire [7:0] BUSMUX_result_bm3;
wire clkoutIFID;
wire clock_out;
wire [7:0] currentpc;
wire [15:0] cycleCounter;
wire halt_out;
wire [7:0] id_branchAddress;
wire id_branchFlag;
wire id_clkOut;
wire id_haltFlag;
wire id_immediateFlag;
wire id_labelFlag;
wire id_labelPassFlagOut;
wire [7:0] id_labelValue;
wire id_outputPCResetFlag;
wire [3:0] id_rd2;
wire id_readmem;
wire [7:0] id_regA;
wire [7:0] id_regB;
wire id_regwrite;
wire [3:0] id_rs;
wire [3:0] id_rt1;
wire id_signFlag;
wire id_writemem;
wire [15:0] instruction_count;
wire [7:0] instruction_value;
wire [7:0] instructionOutIFID;
wire labelpassIFID;
wire [7:0] MWB_labelValueOut;
wire [7:0] MWB_qout;
wire MWB_readmem;
wire [7:0] MWB_resultout;
wire [3:0] opcode_out;
wire orOut;
wire outPCResetFlag;
wire [7:0] pcOutIFID;
wire pcresetIFID;
wire [7:0] ramOut;
wire REGALU_immediateFlagOut;
wire REGALU_labelFlagOut;
wire [7:0] REGALU_labelValueOut;
wire [3:0] REGALU_opcodeOut;
wire REGALU_readMemFlagOut;
wire [7:0] REGALU_regAOut;
wire [7:0] REGALU_regBOut;
wire REGALU_signFlagOut;
wire [7:0] REGALU_valueOut;
wire REGALU_writeMemFlagOut;
wire [7:0] val;
wire WMB_labelflagOut;

wire sampler;                             

// assign statements (if any)                          
CS141L i1 (
// port map - connection between master ports and signals/registers   
	.alu_lessThanFlag(alu_lessThanFlag),
	.alu_overflow(alu_overflow),
	.alu_overflowFlag(alu_overflowFlag),
	.alu_result(alu_result),
	.aluIn0(aluIn0),
	.ALUM_ALUResultOut(ALUM_ALUResultOut),
	.ALUM_labelvalueout(ALUM_labelvalueout),
	.ALUM_labelvalueout0(ALUM_labelvalueout0),
	.ALUM_labelvalueout1(ALUM_labelvalueout1),
	.ALUM_labelvalueout2(ALUM_labelvalueout2),
	.ALUM_labelvalueout3(ALUM_labelvalueout3),
	.ALUM_labelvalueout4(ALUM_labelvalueout4),
	.ALUM_labelvalueout5(ALUM_labelvalueout5),
	.ALUM_labelvalueout6(ALUM_labelvalueout6),
	.ALUM_labelvalueout7(ALUM_labelvalueout7),
	.ALUM_readMemFlagOut(ALUM_readMemFlagOut),
	.ALUM_regAOu(ALUM_regAOu),
	.ALUM_regBOut(ALUM_regBOut),
	.ALUM_writeMemFlagOut(ALUM_writeMemFlagOut),
	.BUSMUX_result(BUSMUX_result),
	.BUSMUX_result_bm1(BUSMUX_result_bm1),
	.BUSMUX_result_bm3(BUSMUX_result_bm3),
	.clk(clk),
	.clkoutIFID(clkoutIFID),
	.clock_out(clock_out),
	.currentpc(currentpc),
	.cycleCounter(cycleCounter),
	.halt_out(halt_out),
	.id_branchAddress(id_branchAddress),
	.id_branchFlag(id_branchFlag),
	.id_clkOut(id_clkOut),
	.id_haltFlag(id_haltFlag),
	.id_immediateFlag(id_immediateFlag),
	.id_labelFlag(id_labelFlag),
	.id_labelPassFlagOut(id_labelPassFlagOut),
	.id_labelValue(id_labelValue),
	.id_outputPCResetFlag(id_outputPCResetFlag),
	.id_rd2(id_rd2),
	.id_readmem(id_readmem),
	.id_regA(id_regA),
	.id_regB(id_regB),
	.id_regwrite(id_regwrite),
	.id_rs(id_rs),
	.id_rt1(id_rt1),
	.id_signFlag(id_signFlag),
	.id_writemem(id_writemem),
	.instruction_count(instruction_count),
	.instruction_value(instruction_value),
	.instructionOutIFID(instructionOutIFID),
	.labelPassButton(labelPassButton),
	.labelpassIFID(labelpassIFID),
	.MWB_labelValueOut(MWB_labelValueOut),
	.MWB_qout(MWB_qout),
	.MWB_readmem(MWB_readmem),
	.MWB_resultout(MWB_resultout),
	.opcode_out(opcode_out),
	.orOut(orOut),
	.outPCResetFlag(outPCResetFlag),
	.pcOutIFID(pcOutIFID),
	.pcresetIFID(pcresetIFID),
	.ramOut(ramOut),
	.REGALU_immediateFlagOut(REGALU_immediateFlagOut),
	.REGALU_labelFlagOut(REGALU_labelFlagOut),
	.REGALU_labelValueOut(REGALU_labelValueOut),
	.REGALU_opcodeOut(REGALU_opcodeOut),
	.REGALU_readMemFlagOut(REGALU_readMemFlagOut),
	.REGALU_regAOut(REGALU_regAOut),
	.REGALU_regBOut(REGALU_regBOut),
	.REGALU_signFlagOut(REGALU_signFlagOut),
	.REGALU_valueOut(REGALU_valueOut),
	.REGALU_writeMemFlagOut(REGALU_writeMemFlagOut),
	.start(start),
	.startAddress(startAddress),
	.val(val),
	.WMB_labelflagOut(WMB_labelflagOut),
	.zero(zero)
);

// clk
always
begin
	clk = 1'b0;
	clk = #500000 1'b1;
	#500000;
end 

// labelPassButton
initial
begin
	labelPassButton = 1'b0;
end 

// start
initial
begin
	start = 1'b0;
end 
// startAddress[ 7 ]
initial
begin
	startAddress[7] = 1'b0;
end 
// startAddress[ 6 ]
initial
begin
	startAddress[6] = 1'b0;
end 
// startAddress[ 5 ]
initial
begin
	startAddress[5] = 1'b0;
end 
// startAddress[ 4 ]
initial
begin
	startAddress[4] = 1'b0;
end 
// startAddress[ 3 ]
initial
begin
	startAddress[3] = 1'b0;
end 
// startAddress[ 2 ]
initial
begin
	startAddress[2] = 1'b0;
end 
// startAddress[ 1 ]
initial
begin
	startAddress[1] = 1'b0;
end 
// startAddress[ 0 ]
initial
begin
	startAddress[0] = 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
end 

CS141L_vlg_sample_tst tb_sample (
	.clk(clk),
	.labelPassButton(labelPassButton),
	.start(start),
	.startAddress(startAddress),
	.zero(zero),
	.sampler_tx(sampler)
);

CS141L_vlg_check_tst tb_out(
	.alu_lessThanFlag(alu_lessThanFlag),
	.alu_overflow(alu_overflow),
	.alu_overflowFlag(alu_overflowFlag),
	.alu_result(alu_result),
	.aluIn0(aluIn0),
	.ALUM_ALUResultOut(ALUM_ALUResultOut),
	.ALUM_labelvalueout(ALUM_labelvalueout),
	.ALUM_labelvalueout0(ALUM_labelvalueout0),
	.ALUM_labelvalueout1(ALUM_labelvalueout1),
	.ALUM_labelvalueout2(ALUM_labelvalueout2),
	.ALUM_labelvalueout3(ALUM_labelvalueout3),
	.ALUM_labelvalueout4(ALUM_labelvalueout4),
	.ALUM_labelvalueout5(ALUM_labelvalueout5),
	.ALUM_labelvalueout6(ALUM_labelvalueout6),
	.ALUM_labelvalueout7(ALUM_labelvalueout7),
	.ALUM_readMemFlagOut(ALUM_readMemFlagOut),
	.ALUM_regAOu(ALUM_regAOu),
	.ALUM_regBOut(ALUM_regBOut),
	.ALUM_writeMemFlagOut(ALUM_writeMemFlagOut),
	.BUSMUX_result(BUSMUX_result),
	.BUSMUX_result_bm1(BUSMUX_result_bm1),
	.BUSMUX_result_bm3(BUSMUX_result_bm3),
	.clkoutIFID(clkoutIFID),
	.clock_out(clock_out),
	.currentpc(currentpc),
	.cycleCounter(cycleCounter),
	.halt_out(halt_out),
	.id_branchAddress(id_branchAddress),
	.id_branchFlag(id_branchFlag),
	.id_clkOut(id_clkOut),
	.id_haltFlag(id_haltFlag),
	.id_immediateFlag(id_immediateFlag),
	.id_labelFlag(id_labelFlag),
	.id_labelPassFlagOut(id_labelPassFlagOut),
	.id_labelValue(id_labelValue),
	.id_outputPCResetFlag(id_outputPCResetFlag),
	.id_rd2(id_rd2),
	.id_readmem(id_readmem),
	.id_regA(id_regA),
	.id_regB(id_regB),
	.id_regwrite(id_regwrite),
	.id_rs(id_rs),
	.id_rt1(id_rt1),
	.id_signFlag(id_signFlag),
	.id_writemem(id_writemem),
	.instruction_count(instruction_count),
	.instruction_value(instruction_value),
	.instructionOutIFID(instructionOutIFID),
	.labelpassIFID(labelpassIFID),
	.MWB_labelValueOut(MWB_labelValueOut),
	.MWB_qout(MWB_qout),
	.MWB_readmem(MWB_readmem),
	.MWB_resultout(MWB_resultout),
	.opcode_out(opcode_out),
	.orOut(orOut),
	.outPCResetFlag(outPCResetFlag),
	.pcOutIFID(pcOutIFID),
	.pcresetIFID(pcresetIFID),
	.ramOut(ramOut),
	.REGALU_immediateFlagOut(REGALU_immediateFlagOut),
	.REGALU_labelFlagOut(REGALU_labelFlagOut),
	.REGALU_labelValueOut(REGALU_labelValueOut),
	.REGALU_opcodeOut(REGALU_opcodeOut),
	.REGALU_readMemFlagOut(REGALU_readMemFlagOut),
	.REGALU_regAOut(REGALU_regAOut),
	.REGALU_regBOut(REGALU_regBOut),
	.REGALU_signFlagOut(REGALU_signFlagOut),
	.REGALU_valueOut(REGALU_valueOut),
	.REGALU_writeMemFlagOut(REGALU_writeMemFlagOut),
	.val(val),
	.WMB_labelflagOut(WMB_labelflagOut),
	.sampler_rx(sampler)
);
endmodule

