// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.


// Generated by Quartus II 64-Bit Version 14.1 (Build Build 186 12/03/2014)
// Created on Sun Mar 08 11:35:42 2015

CS141L CS141L_inst
(
	.clk(clk_sig) ,	// input  clk_sig
	.start(start_sig) ,	// input  start_sig
	.startAddress(startAddress_sig) ,	// input [7:0] startAddress_sig
	.zero(zero_sig) ,	// input  zero_sig
	.labelPassButton(labelPassButton_sig) ,	// input  labelPassButton_sig
	.instruction_value(instruction_value_sig) ,	// output [7:0] instruction_value_sig
	.halt_out(halt_out_sig) ,	// output  halt_out_sig
	.opcode_out(opcode_out_sig) ,	// output [3:0] opcode_out_sig
	.outPCResetFlag(outPCResetFlag_sig) ,	// output  outPCResetFlag_sig
	.orOut(orOut_sig) ,	// output  orOut_sig
	.cycleCounter(cycleCounter_sig) ,	// output [15:0] cycleCounter_sig
	.ramOut(ramOut_sig) ,	// output [7:0] ramOut_sig
	.aluIn0(aluIn0_sig) ,	// output [7:0] aluIn0_sig
	.val(val_sig) ,	// output [7:0] val_sig
	.currentpc(currentpc_sig) ,	// output [7:0] currentpc_sig
	.id_rs(id_rs_sig) ,	// output [3:0] id_rs_sig
	.clkoutIFID(clkoutIFID_sig) ,	// output  clkoutIFID_sig
	.instructionOutIFID(instructionOutIFID_sig) ,	// output [7:0] instructionOutIFID_sig
	.pcresetIFID(pcresetIFID_sig) ,	// output  pcresetIFID_sig
	.pcOutIFID(pcOutIFID_sig) ,	// output [7:0] pcOutIFID_sig
	.labelpassIFID(labelpassIFID_sig) ,	// output  labelpassIFID_sig
	.id_rt1(id_rt1_sig) ,	// output [3:0] id_rt1_sig
	.id_rd2(id_rd2_sig) ,	// output [3:0] id_rd2_sig
	.id_branchFlag(id_branchFlag_sig) ,	// output  id_branchFlag_sig
	.id_labelPassFlagOut(id_labelPassFlagOut_sig) ,	// output  id_labelPassFlagOut_sig
	.id_outputPCResetFlag(id_outputPCResetFlag_sig) ,	// output  id_outputPCResetFlag_sig
	.id_haltFlag(id_haltFlag_sig) ,	// output  id_haltFlag_sig
	.id_labelFlag(id_labelFlag_sig) ,	// output  id_labelFlag_sig
	.id_immediateFlag(id_immediateFlag_sig) ,	// output  id_immediateFlag_sig
	.id_signFlag(id_signFlag_sig) ,	// output  id_signFlag_sig
	.id_writemem(id_writemem_sig) ,	// output  id_writemem_sig
	.id_readmem(id_readmem_sig) ,	// output  id_readmem_sig
	.id_regwrite(id_regwrite_sig) ,	// output  id_regwrite_sig
	.id_labelValue(id_labelValue_sig) ,	// output [7:0] id_labelValue_sig
	.id_clkOut(id_clkOut_sig) ,	// output  id_clkOut_sig
	.MWB_clkOut(MWB_clkOut_sig) ,	// output  MWB_clkOut_sig
	.WMB_labelflagOut(WMB_labelflagOut_sig) ,	// output  WMB_labelflagOut_sig
	.MWB_readmem(MWB_readmem_sig) ,	// output  MWB_readmem_sig
	.MWB_labelValueOut(MWB_labelValueOut_sig) ,	// output [7:0] MWB_labelValueOut_sig
	.MWB_resultout(MWB_resultout_sig) ,	// output [7:0] MWB_resultout_sig
	.MWB_qout(MWB_qout_sig) ,	// output [7:0] MWB_qout_sig
	.ALUM_labelvalueout(ALUM_labelvalueout_sig) ,	// output [7:0] ALUM_labelvalueout_sig
	.ALUM_labelValueOut(ALUM_labelValueOut_sig) ,	// output  ALUM_labelValueOut_sig
	.ALUM_writeMemFlagOut(ALUM_writeMemFlagOut_sig) ,	// output  ALUM_writeMemFlagOut_sig
	.ALUM_readMemFlagOut(ALUM_readMemFlagOut_sig) ,	// output  ALUM_readMemFlagOut_sig
	.ALUM_ALUResultOut(ALUM_ALUResultOut_sig) ,	// output [7:0] ALUM_ALUResultOut_sig
	.ALUM_regAOu(ALUM_regAOu_sig) ,	// output [7:0] ALUM_regAOu_sig
	.ALUM_regBOut(ALUM_regBOut_sig) ,	// output [7:0] ALUM_regBOut_sig
	.REGALU_clkOut(REGALU_clkOut_sig) ,	// output  REGALU_clkOut_sig
	.REGALU_valueOut(REGALU_valueOut_sig) ,	// output [7:0] REGALU_valueOut_sig
	.REGALU_labelFlagOut(REGALU_labelFlagOut_sig) ,	// output  REGALU_labelFlagOut_sig
	.REGALU_writeMemFlagOut(REGALU_writeMemFlagOut_sig) ,	// output  REGALU_writeMemFlagOut_sig
	.REGALU_readMemFlagOut(REGALU_readMemFlagOut_sig) ,	// output  REGALU_readMemFlagOut_sig
	.REGALU_immediateFlagOut(REGALU_immediateFlagOut_sig) ,	// output  REGALU_immediateFlagOut_sig
	.REGALU_signFlagOut(REGALU_signFlagOut_sig) ,	// output  REGALU_signFlagOut_sig
	.REGALU_regBOut(REGALU_regBOut_sig) ,	// output [7:0] REGALU_regBOut_sig
	.REGALU_regAOut(REGALU_regAOut_sig) ,	// output [7:0] REGALU_regAOut_sig
	.BUSMUX_result(BUSMUX_result_sig) ,	// output [7:0] BUSMUX_result_sig
	.BUSMUX_result_bm1(BUSMUX_result_bm1_sig) ,	// output [7:0] BUSMUX_result_bm1_sig
	.BUSMUX_result_bm3(BUSMUX_result_bm3_sig) ,	// output [7:0] BUSMUX_result_bm3_sig
	.REGALU_labelValueOut(REGALU_labelValueOut_sig) ,	// output [7:0] REGALU_labelValueOut_sig
	.id_branchAddress(id_branchAddress_sig) ,	// output [7:0] id_branchAddress_sig
	.id_regA(id_regA_sig) ,	// output [7:0] id_regA_sig
	.id_regB(id_regB_sig) ,	// output [7:0] id_regB_sig
	.alu_overflowFlag(alu_overflowFlag_sig) ,	// output  alu_overflowFlag_sig
	.alu_lessThanFlag(alu_lessThanFlag_sig) ,	// output  alu_lessThanFlag_sig
	.alu_result(alu_result_sig) ,	// output [7:0] alu_result_sig
	.alu_overflow(alu_overflow_sig) ,	// output [7:0] alu_overflow_sig
	.REGALU_opcodeOut(REGALU_opcodeOut_sig) 	// output [3:0] REGALU_opcodeOut_sig
);

