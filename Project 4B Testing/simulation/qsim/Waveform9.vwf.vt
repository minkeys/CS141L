// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/08/2015 00:03:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CS141L
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CS141L_vlg_sample_tst(
	clk,
	labelPassButton,
	start,
	startAddress,
	zero,
	sampler_tx
);
input  clk;
input  labelPassButton;
input  start;
input [7:0] startAddress;
input  zero;
output sampler_tx;

reg sample;
time current_time;
always @(clk or labelPassButton or start or startAddress or zero)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CS141L_vlg_check_tst (
	alu_lessThanFlag,
	alu_overflow,
	alu_overflowFlag,
	alu_result,
	aluIn0,
	ALUM_ALUResultOut,
	ALUM_labelvalueout,
	ALUM_labelvalueout0,
	ALUM_labelvalueout1,
	ALUM_labelvalueout2,
	ALUM_labelvalueout3,
	ALUM_labelvalueout4,
	ALUM_labelvalueout5,
	ALUM_labelvalueout6,
	ALUM_labelvalueout7,
	ALUM_readMemFlagOut,
	ALUM_regAOu,
	ALUM_regBOut,
	ALUM_writeMemFlagOut,
	BUSMUX_result,
	BUSMUX_result_bm1,
	BUSMUX_result_bm3,
	clkoutIFID,
	clock_out,
	currentpc,
	cycleCounter,
	halt_out,
	id_branchAddress,
	id_branchFlag,
	id_clkOut,
	id_haltFlag,
	id_immediateFlag,
	id_labelFlag,
	id_labelPassFlagOut,
	id_labelValue,
	id_outputPCResetFlag,
	id_rd2,
	id_readmem,
	id_regA,
	id_regB,
	id_regwrite,
	id_rs,
	id_rt1,
	id_signFlag,
	id_writemem,
	instruction_value,
	instructionOutIFID,
	labelpassIFID,
	MWB_clkOut,
	MWB_labelValueOut,
	MWB_qout,
	MWB_readmem,
	MWB_resultout,
	opcode_out,
	orOut,
	outPCResetFlag,
	pcOutIFID,
	pcresetIFID,
	ramOut,
	REGALU_clkOut,
	REGALU_immediateFlagOut,
	REGALU_labelFlagOut,
	REGALU_labelValueOut,
	REGALU_opcodeOut,
	REGALU_readMemFlagOut,
	REGALU_regAOut,
	REGALU_regBOut,
	REGALU_signFlagOut,
	REGALU_valueOut,
	REGALU_writeMemFlagOut,
	val,
	WMB_labelflagOut,
	sampler_rx
);
input  alu_lessThanFlag;
input [7:0] alu_overflow;
input  alu_overflowFlag;
input [7:0] alu_result;
input [7:0] aluIn0;
input [7:0] ALUM_ALUResultOut;
input  ALUM_labelvalueout;
input  ALUM_labelvalueout0;
input  ALUM_labelvalueout1;
input  ALUM_labelvalueout2;
input  ALUM_labelvalueout3;
input  ALUM_labelvalueout4;
input  ALUM_labelvalueout5;
input  ALUM_labelvalueout6;
input  ALUM_labelvalueout7;
input  ALUM_readMemFlagOut;
input [7:0] ALUM_regAOu;
input [7:0] ALUM_regBOut;
input  ALUM_writeMemFlagOut;
input [7:0] BUSMUX_result;
input [7:0] BUSMUX_result_bm1;
input [7:0] BUSMUX_result_bm3;
input  clkoutIFID;
input  clock_out;
input [7:0] currentpc;
input [15:0] cycleCounter;
input  halt_out;
input [7:0] id_branchAddress;
input  id_branchFlag;
input  id_clkOut;
input  id_haltFlag;
input  id_immediateFlag;
input  id_labelFlag;
input  id_labelPassFlagOut;
input [7:0] id_labelValue;
input  id_outputPCResetFlag;
input [3:0] id_rd2;
input  id_readmem;
input [7:0] id_regA;
input [7:0] id_regB;
input  id_regwrite;
input [3:0] id_rs;
input [3:0] id_rt1;
input  id_signFlag;
input  id_writemem;
input [7:0] instruction_value;
input [7:0] instructionOutIFID;
input  labelpassIFID;
input  MWB_clkOut;
input [7:0] MWB_labelValueOut;
input [7:0] MWB_qout;
input  MWB_readmem;
input [7:0] MWB_resultout;
input [3:0] opcode_out;
input  orOut;
input  outPCResetFlag;
input [7:0] pcOutIFID;
input  pcresetIFID;
input [7:0] ramOut;
input  REGALU_clkOut;
input  REGALU_immediateFlagOut;
input  REGALU_labelFlagOut;
input [7:0] REGALU_labelValueOut;
input [3:0] REGALU_opcodeOut;
input  REGALU_readMemFlagOut;
input [7:0] REGALU_regAOut;
input [7:0] REGALU_regBOut;
input  REGALU_signFlagOut;
input [7:0] REGALU_valueOut;
input  REGALU_writeMemFlagOut;
input [7:0] val;
input  WMB_labelflagOut;
input sampler_rx;

reg  alu_lessThanFlag_expected;
reg [7:0] alu_overflow_expected;
reg  alu_overflowFlag_expected;
reg [7:0] alu_result_expected;
reg [7:0] aluIn0_expected;
reg [7:0] ALUM_ALUResultOut_expected;
reg  ALUM_labelvalueout_expected;
reg  ALUM_labelvalueout0_expected;
reg  ALUM_labelvalueout1_expected;
reg  ALUM_labelvalueout2_expected;
reg  ALUM_labelvalueout3_expected;
reg  ALUM_labelvalueout4_expected;
reg  ALUM_labelvalueout5_expected;
reg  ALUM_labelvalueout6_expected;
reg  ALUM_labelvalueout7_expected;
reg  ALUM_readMemFlagOut_expected;
reg [7:0] ALUM_regAOu_expected;
reg [7:0] ALUM_regBOut_expected;
reg  ALUM_writeMemFlagOut_expected;
reg [7:0] BUSMUX_result_expected;
reg [7:0] BUSMUX_result_bm1_expected;
reg [7:0] BUSMUX_result_bm3_expected;
reg  clkoutIFID_expected;
reg  clock_out_expected;
reg [7:0] currentpc_expected;
reg [15:0] cycleCounter_expected;
reg  halt_out_expected;
reg [7:0] id_branchAddress_expected;
reg  id_branchFlag_expected;
reg  id_clkOut_expected;
reg  id_haltFlag_expected;
reg  id_immediateFlag_expected;
reg  id_labelFlag_expected;
reg  id_labelPassFlagOut_expected;
reg [7:0] id_labelValue_expected;
reg  id_outputPCResetFlag_expected;
reg [3:0] id_rd2_expected;
reg  id_readmem_expected;
reg [7:0] id_regA_expected;
reg [7:0] id_regB_expected;
reg  id_regwrite_expected;
reg [3:0] id_rs_expected;
reg [3:0] id_rt1_expected;
reg  id_signFlag_expected;
reg  id_writemem_expected;
reg [7:0] instruction_value_expected;
reg [7:0] instructionOutIFID_expected;
reg  labelpassIFID_expected;
reg  MWB_clkOut_expected;
reg [7:0] MWB_labelValueOut_expected;
reg [7:0] MWB_qout_expected;
reg  MWB_readmem_expected;
reg [7:0] MWB_resultout_expected;
reg [3:0] opcode_out_expected;
reg  orOut_expected;
reg  outPCResetFlag_expected;
reg [7:0] pcOutIFID_expected;
reg  pcresetIFID_expected;
reg [7:0] ramOut_expected;
reg  REGALU_clkOut_expected;
reg  REGALU_immediateFlagOut_expected;
reg  REGALU_labelFlagOut_expected;
reg [7:0] REGALU_labelValueOut_expected;
reg [3:0] REGALU_opcodeOut_expected;
reg  REGALU_readMemFlagOut_expected;
reg [7:0] REGALU_regAOut_expected;
reg [7:0] REGALU_regBOut_expected;
reg  REGALU_signFlagOut_expected;
reg [7:0] REGALU_valueOut_expected;
reg  REGALU_writeMemFlagOut_expected;
reg [7:0] val_expected;
reg  WMB_labelflagOut_expected;

reg  alu_lessThanFlag_prev;
reg [7:0] alu_overflow_prev;
reg  alu_overflowFlag_prev;
reg [7:0] alu_result_prev;
reg [7:0] aluIn0_prev;
reg [7:0] ALUM_ALUResultOut_prev;
reg  ALUM_labelvalueout_prev;
reg  ALUM_labelvalueout0_prev;
reg  ALUM_labelvalueout1_prev;
reg  ALUM_labelvalueout2_prev;
reg  ALUM_labelvalueout3_prev;
reg  ALUM_labelvalueout4_prev;
reg  ALUM_labelvalueout5_prev;
reg  ALUM_labelvalueout6_prev;
reg  ALUM_labelvalueout7_prev;
reg  ALUM_readMemFlagOut_prev;
reg [7:0] ALUM_regAOu_prev;
reg [7:0] ALUM_regBOut_prev;
reg  ALUM_writeMemFlagOut_prev;
reg [7:0] BUSMUX_result_prev;
reg [7:0] BUSMUX_result_bm1_prev;
reg [7:0] BUSMUX_result_bm3_prev;
reg  clkoutIFID_prev;
reg  clock_out_prev;
reg [7:0] currentpc_prev;
reg [15:0] cycleCounter_prev;
reg  halt_out_prev;
reg [7:0] id_branchAddress_prev;
reg  id_branchFlag_prev;
reg  id_clkOut_prev;
reg  id_haltFlag_prev;
reg  id_immediateFlag_prev;
reg  id_labelFlag_prev;
reg  id_labelPassFlagOut_prev;
reg [7:0] id_labelValue_prev;
reg  id_outputPCResetFlag_prev;
reg [3:0] id_rd2_prev;
reg  id_readmem_prev;
reg [7:0] id_regA_prev;
reg [7:0] id_regB_prev;
reg  id_regwrite_prev;
reg [3:0] id_rs_prev;
reg [3:0] id_rt1_prev;
reg  id_signFlag_prev;
reg  id_writemem_prev;
reg [7:0] instruction_value_prev;
reg [7:0] instructionOutIFID_prev;
reg  labelpassIFID_prev;
reg  MWB_clkOut_prev;
reg [7:0] MWB_labelValueOut_prev;
reg [7:0] MWB_qout_prev;
reg  MWB_readmem_prev;
reg [7:0] MWB_resultout_prev;
reg [3:0] opcode_out_prev;
reg  orOut_prev;
reg  outPCResetFlag_prev;
reg [7:0] pcOutIFID_prev;
reg  pcresetIFID_prev;
reg [7:0] ramOut_prev;
reg  REGALU_clkOut_prev;
reg  REGALU_immediateFlagOut_prev;
reg  REGALU_labelFlagOut_prev;
reg [7:0] REGALU_labelValueOut_prev;
reg [3:0] REGALU_opcodeOut_prev;
reg  REGALU_readMemFlagOut_prev;
reg [7:0] REGALU_regAOut_prev;
reg [7:0] REGALU_regBOut_prev;
reg  REGALU_signFlagOut_prev;
reg [7:0] REGALU_valueOut_prev;
reg  REGALU_writeMemFlagOut_prev;
reg [7:0] val_prev;
reg  WMB_labelflagOut_prev;

reg  clock_out_expected_prev;
reg [7:0] currentpc_expected_prev;
reg [15:0] cycleCounter_expected_prev;
reg  halt_out_expected_prev;
reg [7:0] instruction_value_expected_prev;
reg [3:0] opcode_out_expected_prev;
reg  orOut_expected_prev;
reg  outPCResetFlag_expected_prev;

reg  last_clock_out_exp;
reg [7:0] last_currentpc_exp;
reg [15:0] last_cycleCounter_exp;
reg  last_halt_out_exp;
reg [7:0] last_instruction_value_exp;
reg [3:0] last_opcode_out_exp;
reg  last_orOut_exp;
reg  last_outPCResetFlag_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:72] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 72'b1;
end

// update real /o prevs

always @(trigger)
begin
	alu_lessThanFlag_prev = alu_lessThanFlag;
	alu_overflow_prev = alu_overflow;
	alu_overflowFlag_prev = alu_overflowFlag;
	alu_result_prev = alu_result;
	aluIn0_prev = aluIn0;
	ALUM_ALUResultOut_prev = ALUM_ALUResultOut;
	ALUM_labelvalueout_prev = ALUM_labelvalueout;
	ALUM_labelvalueout0_prev = ALUM_labelvalueout0;
	ALUM_labelvalueout1_prev = ALUM_labelvalueout1;
	ALUM_labelvalueout2_prev = ALUM_labelvalueout2;
	ALUM_labelvalueout3_prev = ALUM_labelvalueout3;
	ALUM_labelvalueout4_prev = ALUM_labelvalueout4;
	ALUM_labelvalueout5_prev = ALUM_labelvalueout5;
	ALUM_labelvalueout6_prev = ALUM_labelvalueout6;
	ALUM_labelvalueout7_prev = ALUM_labelvalueout7;
	ALUM_readMemFlagOut_prev = ALUM_readMemFlagOut;
	ALUM_regAOu_prev = ALUM_regAOu;
	ALUM_regBOut_prev = ALUM_regBOut;
	ALUM_writeMemFlagOut_prev = ALUM_writeMemFlagOut;
	BUSMUX_result_prev = BUSMUX_result;
	BUSMUX_result_bm1_prev = BUSMUX_result_bm1;
	BUSMUX_result_bm3_prev = BUSMUX_result_bm3;
	clkoutIFID_prev = clkoutIFID;
	clock_out_prev = clock_out;
	currentpc_prev = currentpc;
	cycleCounter_prev = cycleCounter;
	halt_out_prev = halt_out;
	id_branchAddress_prev = id_branchAddress;
	id_branchFlag_prev = id_branchFlag;
	id_clkOut_prev = id_clkOut;
	id_haltFlag_prev = id_haltFlag;
	id_immediateFlag_prev = id_immediateFlag;
	id_labelFlag_prev = id_labelFlag;
	id_labelPassFlagOut_prev = id_labelPassFlagOut;
	id_labelValue_prev = id_labelValue;
	id_outputPCResetFlag_prev = id_outputPCResetFlag;
	id_rd2_prev = id_rd2;
	id_readmem_prev = id_readmem;
	id_regA_prev = id_regA;
	id_regB_prev = id_regB;
	id_regwrite_prev = id_regwrite;
	id_rs_prev = id_rs;
	id_rt1_prev = id_rt1;
	id_signFlag_prev = id_signFlag;
	id_writemem_prev = id_writemem;
	instruction_value_prev = instruction_value;
	instructionOutIFID_prev = instructionOutIFID;
	labelpassIFID_prev = labelpassIFID;
	MWB_clkOut_prev = MWB_clkOut;
	MWB_labelValueOut_prev = MWB_labelValueOut;
	MWB_qout_prev = MWB_qout;
	MWB_readmem_prev = MWB_readmem;
	MWB_resultout_prev = MWB_resultout;
	opcode_out_prev = opcode_out;
	orOut_prev = orOut;
	outPCResetFlag_prev = outPCResetFlag;
	pcOutIFID_prev = pcOutIFID;
	pcresetIFID_prev = pcresetIFID;
	ramOut_prev = ramOut;
	REGALU_clkOut_prev = REGALU_clkOut;
	REGALU_immediateFlagOut_prev = REGALU_immediateFlagOut;
	REGALU_labelFlagOut_prev = REGALU_labelFlagOut;
	REGALU_labelValueOut_prev = REGALU_labelValueOut;
	REGALU_opcodeOut_prev = REGALU_opcodeOut;
	REGALU_readMemFlagOut_prev = REGALU_readMemFlagOut;
	REGALU_regAOut_prev = REGALU_regAOut;
	REGALU_regBOut_prev = REGALU_regBOut;
	REGALU_signFlagOut_prev = REGALU_signFlagOut;
	REGALU_valueOut_prev = REGALU_valueOut;
	REGALU_writeMemFlagOut_prev = REGALU_writeMemFlagOut;
	val_prev = val;
	WMB_labelflagOut_prev = WMB_labelflagOut;
end

// update expected /o prevs

always @(trigger)
begin
	clock_out_expected_prev = clock_out_expected;
	currentpc_expected_prev = currentpc_expected;
	cycleCounter_expected_prev = cycleCounter_expected;
	halt_out_expected_prev = halt_out_expected;
	instruction_value_expected_prev = instruction_value_expected;
	opcode_out_expected_prev = opcode_out_expected;
	orOut_expected_prev = orOut_expected;
	outPCResetFlag_expected_prev = outPCResetFlag_expected;
end



// expected clock_out
initial
begin
	clock_out_expected = 1'bX;
	clock_out_expected = #999000 1'b0;
end 
// expected currentpc[ 7 ]
initial
begin
	currentpc_expected[7] = 1'bX;
	currentpc_expected[7] = #999000 1'b0;
end 
// expected currentpc[ 6 ]
initial
begin
	currentpc_expected[6] = 1'bX;
	currentpc_expected[6] = #999000 1'b0;
end 
// expected currentpc[ 5 ]
initial
begin
	currentpc_expected[5] = 1'bX;
	currentpc_expected[5] = #999000 1'b0;
end 
// expected currentpc[ 4 ]
initial
begin
	currentpc_expected[4] = 1'bX;
	currentpc_expected[4] = #999000 1'b0;
end 
// expected currentpc[ 3 ]
initial
begin
	currentpc_expected[3] = 1'bX;
	currentpc_expected[3] = #999000 1'b0;
end 
// expected currentpc[ 2 ]
initial
begin
	currentpc_expected[2] = 1'bX;
	currentpc_expected[2] = #999000 1'b0;
end 
// expected currentpc[ 1 ]
initial
begin
	currentpc_expected[1] = 1'bX;
	currentpc_expected[1] = #999000 1'b0;
end 
// expected currentpc[ 0 ]
initial
begin
	currentpc_expected[0] = 1'bX;
	currentpc_expected[0] = #999000 1'b0;
end 

// expected halt_out
initial
begin
	halt_out_expected = 1'bX;
	halt_out_expected = #999000 1'b0;
end 
// expected instruction_value[ 7 ]
initial
begin
	instruction_value_expected[7] = 1'bX;
	instruction_value_expected[7] = #999000 1'b0;
end 
// expected instruction_value[ 6 ]
initial
begin
	instruction_value_expected[6] = 1'bX;
	instruction_value_expected[6] = #999000 1'b0;
end 
// expected instruction_value[ 5 ]
initial
begin
	instruction_value_expected[5] = 1'bX;
	instruction_value_expected[5] = #999000 1'b0;
end 
// expected instruction_value[ 4 ]
initial
begin
	instruction_value_expected[4] = 1'bX;
	instruction_value_expected[4] = #999000 1'b0;
end 
// expected instruction_value[ 3 ]
initial
begin
	instruction_value_expected[3] = 1'bX;
	instruction_value_expected[3] = #999000 1'b0;
end 
// expected instruction_value[ 2 ]
initial
begin
	instruction_value_expected[2] = 1'bX;
	instruction_value_expected[2] = #999000 1'b0;
end 
// expected instruction_value[ 1 ]
initial
begin
	instruction_value_expected[1] = 1'bX;
	instruction_value_expected[1] = #999000 1'b0;
end 
// expected instruction_value[ 0 ]
initial
begin
	instruction_value_expected[0] = 1'bX;
	instruction_value_expected[0] = #999000 1'b0;
end 
// expected opcode_out[ 3 ]
initial
begin
	opcode_out_expected[3] = 1'bX;
	opcode_out_expected[3] = #999000 1'b0;
end 
// expected opcode_out[ 2 ]
initial
begin
	opcode_out_expected[2] = 1'bX;
	opcode_out_expected[2] = #999000 1'b0;
end 
// expected opcode_out[ 1 ]
initial
begin
	opcode_out_expected[1] = 1'bX;
	opcode_out_expected[1] = #999000 1'b0;
end 
// expected opcode_out[ 0 ]
initial
begin
	opcode_out_expected[0] = 1'bX;
	opcode_out_expected[0] = #999000 1'b0;
end 

// expected outPCResetFlag
initial
begin
	outPCResetFlag_expected = 1'bX;
	outPCResetFlag_expected = #999000 1'b0;
end 

// expected orOut
initial
begin
	orOut_expected = 1'bX;
	orOut_expected = #999000 1'b0;
end 
// expected cycleCounter[ 15 ]
initial
begin
	cycleCounter_expected[15] = 1'bX;
	cycleCounter_expected[15] = #999000 1'b0;
end 
// expected cycleCounter[ 14 ]
initial
begin
	cycleCounter_expected[14] = 1'bX;
	cycleCounter_expected[14] = #999000 1'b0;
end 
// expected cycleCounter[ 13 ]
initial
begin
	cycleCounter_expected[13] = 1'bX;
	cycleCounter_expected[13] = #999000 1'b0;
end 
// expected cycleCounter[ 12 ]
initial
begin
	cycleCounter_expected[12] = 1'bX;
	cycleCounter_expected[12] = #999000 1'b0;
end 
// expected cycleCounter[ 11 ]
initial
begin
	cycleCounter_expected[11] = 1'bX;
	cycleCounter_expected[11] = #999000 1'b0;
end 
// expected cycleCounter[ 10 ]
initial
begin
	cycleCounter_expected[10] = 1'bX;
	cycleCounter_expected[10] = #999000 1'b0;
end 
// expected cycleCounter[ 9 ]
initial
begin
	cycleCounter_expected[9] = 1'bX;
	cycleCounter_expected[9] = #999000 1'b0;
end 
// expected cycleCounter[ 8 ]
initial
begin
	cycleCounter_expected[8] = 1'bX;
	cycleCounter_expected[8] = #999000 1'b0;
end 
// expected cycleCounter[ 7 ]
initial
begin
	cycleCounter_expected[7] = 1'bX;
	cycleCounter_expected[7] = #999000 1'b0;
end 
// expected cycleCounter[ 6 ]
initial
begin
	cycleCounter_expected[6] = 1'bX;
	cycleCounter_expected[6] = #999000 1'b0;
end 
// expected cycleCounter[ 5 ]
initial
begin
	cycleCounter_expected[5] = 1'bX;
	cycleCounter_expected[5] = #999000 1'b0;
end 
// expected cycleCounter[ 4 ]
initial
begin
	cycleCounter_expected[4] = 1'bX;
	cycleCounter_expected[4] = #999000 1'b0;
end 
// expected cycleCounter[ 3 ]
initial
begin
	cycleCounter_expected[3] = 1'bX;
	cycleCounter_expected[3] = #999000 1'b0;
end 
// expected cycleCounter[ 2 ]
initial
begin
	cycleCounter_expected[2] = 1'bX;
	cycleCounter_expected[2] = #999000 1'b0;
end 
// expected cycleCounter[ 1 ]
initial
begin
	cycleCounter_expected[1] = 1'bX;
	cycleCounter_expected[1] = #999000 1'b0;
end 
// expected cycleCounter[ 0 ]
initial
begin
	cycleCounter_expected[0] = 1'bX;
	cycleCounter_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(alu_lessThanFlag_expected or alu_lessThanFlag or alu_overflow_expected or alu_overflow or alu_overflowFlag_expected or alu_overflowFlag or alu_result_expected or alu_result or aluIn0_expected or aluIn0 or ALUM_ALUResultOut_expected or ALUM_ALUResultOut or ALUM_labelvalueout_expected or ALUM_labelvalueout or ALUM_labelvalueout0_expected or ALUM_labelvalueout0 or ALUM_labelvalueout1_expected or ALUM_labelvalueout1 or ALUM_labelvalueout2_expected or ALUM_labelvalueout2 or ALUM_labelvalueout3_expected or ALUM_labelvalueout3 or ALUM_labelvalueout4_expected or ALUM_labelvalueout4 or ALUM_labelvalueout5_expected or ALUM_labelvalueout5 or ALUM_labelvalueout6_expected or ALUM_labelvalueout6 or ALUM_labelvalueout7_expected or ALUM_labelvalueout7 or ALUM_readMemFlagOut_expected or ALUM_readMemFlagOut or ALUM_regAOu_expected or ALUM_regAOu or ALUM_regBOut_expected or ALUM_regBOut or ALUM_writeMemFlagOut_expected or ALUM_writeMemFlagOut or BUSMUX_result_expected or BUSMUX_result or BUSMUX_result_bm1_expected or BUSMUX_result_bm1 or BUSMUX_result_bm3_expected or BUSMUX_result_bm3 or clkoutIFID_expected or clkoutIFID or clock_out_expected or clock_out or currentpc_expected or currentpc or cycleCounter_expected or cycleCounter or halt_out_expected or halt_out or id_branchAddress_expected or id_branchAddress or id_branchFlag_expected or id_branchFlag or id_clkOut_expected or id_clkOut or id_haltFlag_expected or id_haltFlag or id_immediateFlag_expected or id_immediateFlag or id_labelFlag_expected or id_labelFlag or id_labelPassFlagOut_expected or id_labelPassFlagOut or id_labelValue_expected or id_labelValue or id_outputPCResetFlag_expected or id_outputPCResetFlag or id_rd2_expected or id_rd2 or id_readmem_expected or id_readmem or id_regA_expected or id_regA or id_regB_expected or id_regB or id_regwrite_expected or id_regwrite or id_rs_expected or id_rs or id_rt1_expected or id_rt1 or id_signFlag_expected or id_signFlag or id_writemem_expected or id_writemem or instruction_value_expected or instruction_value or instructionOutIFID_expected or instructionOutIFID or labelpassIFID_expected or labelpassIFID or MWB_clkOut_expected or MWB_clkOut or MWB_labelValueOut_expected or MWB_labelValueOut or MWB_qout_expected or MWB_qout or MWB_readmem_expected or MWB_readmem or MWB_resultout_expected or MWB_resultout or opcode_out_expected or opcode_out or orOut_expected or orOut or outPCResetFlag_expected or outPCResetFlag or pcOutIFID_expected or pcOutIFID or pcresetIFID_expected or pcresetIFID or ramOut_expected or ramOut or REGALU_clkOut_expected or REGALU_clkOut or REGALU_immediateFlagOut_expected or REGALU_immediateFlagOut or REGALU_labelFlagOut_expected or REGALU_labelFlagOut or REGALU_labelValueOut_expected or REGALU_labelValueOut or REGALU_opcodeOut_expected or REGALU_opcodeOut or REGALU_readMemFlagOut_expected or REGALU_readMemFlagOut or REGALU_regAOut_expected or REGALU_regAOut or REGALU_regBOut_expected or REGALU_regBOut or REGALU_signFlagOut_expected or REGALU_signFlagOut or REGALU_valueOut_expected or REGALU_valueOut or REGALU_writeMemFlagOut_expected or REGALU_writeMemFlagOut or val_expected or val or WMB_labelflagOut_expected or WMB_labelflagOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alu_lessThanFlag = %b | expected alu_overflow = %b | expected alu_overflowFlag = %b | expected alu_result = %b | expected aluIn0 = %b | expected ALUM_ALUResultOut = %b | expected ALUM_labelvalueout = %b | expected ALUM_labelvalueout0 = %b | expected ALUM_labelvalueout1 = %b | expected ALUM_labelvalueout2 = %b | expected ALUM_labelvalueout3 = %b | expected ALUM_labelvalueout4 = %b | expected ALUM_labelvalueout5 = %b | expected ALUM_labelvalueout6 = %b | expected ALUM_labelvalueout7 = %b | expected ALUM_readMemFlagOut = %b | expected ALUM_regAOu = %b | expected ALUM_regBOut = %b | expected ALUM_writeMemFlagOut = %b | expected BUSMUX_result = %b | expected BUSMUX_result_bm1 = %b | expected BUSMUX_result_bm3 = %b | expected clkoutIFID = %b | expected clock_out = %b | expected currentpc = %b | expected cycleCounter = %b | expected halt_out = %b | expected id_branchAddress = %b | expected id_branchFlag = %b | expected id_clkOut = %b | expected id_haltFlag = %b | expected id_immediateFlag = %b | expected id_labelFlag = %b | expected id_labelPassFlagOut = %b | expected id_labelValue = %b | expected id_outputPCResetFlag = %b | expected id_rd2 = %b | expected id_readmem = %b | expected id_regA = %b | expected id_regB = %b | expected id_regwrite = %b | expected id_rs = %b | expected id_rt1 = %b | expected id_signFlag = %b | expected id_writemem = %b | expected instruction_value = %b | expected instructionOutIFID = %b | expected labelpassIFID = %b | expected MWB_clkOut = %b | expected MWB_labelValueOut = %b | expected MWB_qout = %b | expected MWB_readmem = %b | expected MWB_resultout = %b | expected opcode_out = %b | expected orOut = %b | expected outPCResetFlag = %b | expected pcOutIFID = %b | expected pcresetIFID = %b | expected ramOut = %b | expected REGALU_clkOut = %b | expected REGALU_immediateFlagOut = %b | expected REGALU_labelFlagOut = %b | expected REGALU_labelValueOut = %b | expected REGALU_opcodeOut = %b | expected REGALU_readMemFlagOut = %b | expected REGALU_regAOut = %b | expected REGALU_regBOut = %b | expected REGALU_signFlagOut = %b | expected REGALU_valueOut = %b | expected REGALU_writeMemFlagOut = %b | expected val = %b | expected WMB_labelflagOut = %b | ",alu_lessThanFlag_expected_prev,alu_overflow_expected_prev,alu_overflowFlag_expected_prev,alu_result_expected_prev,aluIn0_expected_prev,ALUM_ALUResultOut_expected_prev,ALUM_labelvalueout_expected_prev,ALUM_labelvalueout0_expected_prev,ALUM_labelvalueout1_expected_prev,ALUM_labelvalueout2_expected_prev,ALUM_labelvalueout3_expected_prev,ALUM_labelvalueout4_expected_prev,ALUM_labelvalueout5_expected_prev,ALUM_labelvalueout6_expected_prev,ALUM_labelvalueout7_expected_prev,ALUM_readMemFlagOut_expected_prev,ALUM_regAOu_expected_prev,ALUM_regBOut_expected_prev,ALUM_writeMemFlagOut_expected_prev,BUSMUX_result_expected_prev,BUSMUX_result_bm1_expected_prev,BUSMUX_result_bm3_expected_prev,clkoutIFID_expected_prev,clock_out_expected_prev,currentpc_expected_prev,cycleCounter_expected_prev,halt_out_expected_prev,id_branchAddress_expected_prev,id_branchFlag_expected_prev,id_clkOut_expected_prev,id_haltFlag_expected_prev,id_immediateFlag_expected_prev,id_labelFlag_expected_prev,id_labelPassFlagOut_expected_prev,id_labelValue_expected_prev,id_outputPCResetFlag_expected_prev,id_rd2_expected_prev,id_readmem_expected_prev,id_regA_expected_prev,id_regB_expected_prev,id_regwrite_expected_prev,id_rs_expected_prev,id_rt1_expected_prev,id_signFlag_expected_prev,id_writemem_expected_prev,instruction_value_expected_prev,instructionOutIFID_expected_prev,labelpassIFID_expected_prev,MWB_clkOut_expected_prev,MWB_labelValueOut_expected_prev,MWB_qout_expected_prev,MWB_readmem_expected_prev,MWB_resultout_expected_prev,opcode_out_expected_prev,orOut_expected_prev,outPCResetFlag_expected_prev,pcOutIFID_expected_prev,pcresetIFID_expected_prev,ramOut_expected_prev,REGALU_clkOut_expected_prev,REGALU_immediateFlagOut_expected_prev,REGALU_labelFlagOut_expected_prev,REGALU_labelValueOut_expected_prev,REGALU_opcodeOut_expected_prev,REGALU_readMemFlagOut_expected_prev,REGALU_regAOut_expected_prev,REGALU_regBOut_expected_prev,REGALU_signFlagOut_expected_prev,REGALU_valueOut_expected_prev,REGALU_writeMemFlagOut_expected_prev,val_expected_prev,WMB_labelflagOut_expected_prev);
	$display("| real alu_lessThanFlag = %b | real alu_overflow = %b | real alu_overflowFlag = %b | real alu_result = %b | real aluIn0 = %b | real ALUM_ALUResultOut = %b | real ALUM_labelvalueout = %b | real ALUM_labelvalueout0 = %b | real ALUM_labelvalueout1 = %b | real ALUM_labelvalueout2 = %b | real ALUM_labelvalueout3 = %b | real ALUM_labelvalueout4 = %b | real ALUM_labelvalueout5 = %b | real ALUM_labelvalueout6 = %b | real ALUM_labelvalueout7 = %b | real ALUM_readMemFlagOut = %b | real ALUM_regAOu = %b | real ALUM_regBOut = %b | real ALUM_writeMemFlagOut = %b | real BUSMUX_result = %b | real BUSMUX_result_bm1 = %b | real BUSMUX_result_bm3 = %b | real clkoutIFID = %b | real clock_out = %b | real currentpc = %b | real cycleCounter = %b | real halt_out = %b | real id_branchAddress = %b | real id_branchFlag = %b | real id_clkOut = %b | real id_haltFlag = %b | real id_immediateFlag = %b | real id_labelFlag = %b | real id_labelPassFlagOut = %b | real id_labelValue = %b | real id_outputPCResetFlag = %b | real id_rd2 = %b | real id_readmem = %b | real id_regA = %b | real id_regB = %b | real id_regwrite = %b | real id_rs = %b | real id_rt1 = %b | real id_signFlag = %b | real id_writemem = %b | real instruction_value = %b | real instructionOutIFID = %b | real labelpassIFID = %b | real MWB_clkOut = %b | real MWB_labelValueOut = %b | real MWB_qout = %b | real MWB_readmem = %b | real MWB_resultout = %b | real opcode_out = %b | real orOut = %b | real outPCResetFlag = %b | real pcOutIFID = %b | real pcresetIFID = %b | real ramOut = %b | real REGALU_clkOut = %b | real REGALU_immediateFlagOut = %b | real REGALU_labelFlagOut = %b | real REGALU_labelValueOut = %b | real REGALU_opcodeOut = %b | real REGALU_readMemFlagOut = %b | real REGALU_regAOut = %b | real REGALU_regBOut = %b | real REGALU_signFlagOut = %b | real REGALU_valueOut = %b | real REGALU_writeMemFlagOut = %b | real val = %b | real WMB_labelflagOut = %b | ",alu_lessThanFlag_prev,alu_overflow_prev,alu_overflowFlag_prev,alu_result_prev,aluIn0_prev,ALUM_ALUResultOut_prev,ALUM_labelvalueout_prev,ALUM_labelvalueout0_prev,ALUM_labelvalueout1_prev,ALUM_labelvalueout2_prev,ALUM_labelvalueout3_prev,ALUM_labelvalueout4_prev,ALUM_labelvalueout5_prev,ALUM_labelvalueout6_prev,ALUM_labelvalueout7_prev,ALUM_readMemFlagOut_prev,ALUM_regAOu_prev,ALUM_regBOut_prev,ALUM_writeMemFlagOut_prev,BUSMUX_result_prev,BUSMUX_result_bm1_prev,BUSMUX_result_bm3_prev,clkoutIFID_prev,clock_out_prev,currentpc_prev,cycleCounter_prev,halt_out_prev,id_branchAddress_prev,id_branchFlag_prev,id_clkOut_prev,id_haltFlag_prev,id_immediateFlag_prev,id_labelFlag_prev,id_labelPassFlagOut_prev,id_labelValue_prev,id_outputPCResetFlag_prev,id_rd2_prev,id_readmem_prev,id_regA_prev,id_regB_prev,id_regwrite_prev,id_rs_prev,id_rt1_prev,id_signFlag_prev,id_writemem_prev,instruction_value_prev,instructionOutIFID_prev,labelpassIFID_prev,MWB_clkOut_prev,MWB_labelValueOut_prev,MWB_qout_prev,MWB_readmem_prev,MWB_resultout_prev,opcode_out_prev,orOut_prev,outPCResetFlag_prev,pcOutIFID_prev,pcresetIFID_prev,ramOut_prev,REGALU_clkOut_prev,REGALU_immediateFlagOut_prev,REGALU_labelFlagOut_prev,REGALU_labelValueOut_prev,REGALU_opcodeOut_prev,REGALU_readMemFlagOut_prev,REGALU_regAOut_prev,REGALU_regBOut_prev,REGALU_signFlagOut_prev,REGALU_valueOut_prev,REGALU_writeMemFlagOut_prev,val_prev,WMB_labelflagOut_prev);
`endif
	if (
		( clock_out_expected_prev !== 1'bx ) && ( clock_out_prev !== clock_out_expected_prev )
		&& ((clock_out_expected_prev !== last_clock_out_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_out_expected_prev);
		$display ("     Real value = %b", clock_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_clock_out_exp = clock_out_expected_prev;
	end
	if (
		( currentpc_expected_prev[0] !== 1'bx ) && ( currentpc_prev[0] !== currentpc_expected_prev[0] )
		&& ((currentpc_expected_prev[0] !== last_currentpc_exp[0]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[0] = currentpc_expected_prev[0];
	end
	if (
		( currentpc_expected_prev[1] !== 1'bx ) && ( currentpc_prev[1] !== currentpc_expected_prev[1] )
		&& ((currentpc_expected_prev[1] !== last_currentpc_exp[1]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[1] = currentpc_expected_prev[1];
	end
	if (
		( currentpc_expected_prev[2] !== 1'bx ) && ( currentpc_prev[2] !== currentpc_expected_prev[2] )
		&& ((currentpc_expected_prev[2] !== last_currentpc_exp[2]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[2] = currentpc_expected_prev[2];
	end
	if (
		( currentpc_expected_prev[3] !== 1'bx ) && ( currentpc_prev[3] !== currentpc_expected_prev[3] )
		&& ((currentpc_expected_prev[3] !== last_currentpc_exp[3]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[3] = currentpc_expected_prev[3];
	end
	if (
		( currentpc_expected_prev[4] !== 1'bx ) && ( currentpc_prev[4] !== currentpc_expected_prev[4] )
		&& ((currentpc_expected_prev[4] !== last_currentpc_exp[4]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[4] = currentpc_expected_prev[4];
	end
	if (
		( currentpc_expected_prev[5] !== 1'bx ) && ( currentpc_prev[5] !== currentpc_expected_prev[5] )
		&& ((currentpc_expected_prev[5] !== last_currentpc_exp[5]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[5] = currentpc_expected_prev[5];
	end
	if (
		( currentpc_expected_prev[6] !== 1'bx ) && ( currentpc_prev[6] !== currentpc_expected_prev[6] )
		&& ((currentpc_expected_prev[6] !== last_currentpc_exp[6]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[6] = currentpc_expected_prev[6];
	end
	if (
		( currentpc_expected_prev[7] !== 1'bx ) && ( currentpc_prev[7] !== currentpc_expected_prev[7] )
		&& ((currentpc_expected_prev[7] !== last_currentpc_exp[7]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_currentpc_exp[7] = currentpc_expected_prev[7];
	end
	if (
		( cycleCounter_expected_prev[0] !== 1'bx ) && ( cycleCounter_prev[0] !== cycleCounter_expected_prev[0] )
		&& ((cycleCounter_expected_prev[0] !== last_cycleCounter_exp[0]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[0] = cycleCounter_expected_prev[0];
	end
	if (
		( cycleCounter_expected_prev[1] !== 1'bx ) && ( cycleCounter_prev[1] !== cycleCounter_expected_prev[1] )
		&& ((cycleCounter_expected_prev[1] !== last_cycleCounter_exp[1]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[1] = cycleCounter_expected_prev[1];
	end
	if (
		( cycleCounter_expected_prev[2] !== 1'bx ) && ( cycleCounter_prev[2] !== cycleCounter_expected_prev[2] )
		&& ((cycleCounter_expected_prev[2] !== last_cycleCounter_exp[2]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[2] = cycleCounter_expected_prev[2];
	end
	if (
		( cycleCounter_expected_prev[3] !== 1'bx ) && ( cycleCounter_prev[3] !== cycleCounter_expected_prev[3] )
		&& ((cycleCounter_expected_prev[3] !== last_cycleCounter_exp[3]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[3] = cycleCounter_expected_prev[3];
	end
	if (
		( cycleCounter_expected_prev[4] !== 1'bx ) && ( cycleCounter_prev[4] !== cycleCounter_expected_prev[4] )
		&& ((cycleCounter_expected_prev[4] !== last_cycleCounter_exp[4]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[4] = cycleCounter_expected_prev[4];
	end
	if (
		( cycleCounter_expected_prev[5] !== 1'bx ) && ( cycleCounter_prev[5] !== cycleCounter_expected_prev[5] )
		&& ((cycleCounter_expected_prev[5] !== last_cycleCounter_exp[5]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[5] = cycleCounter_expected_prev[5];
	end
	if (
		( cycleCounter_expected_prev[6] !== 1'bx ) && ( cycleCounter_prev[6] !== cycleCounter_expected_prev[6] )
		&& ((cycleCounter_expected_prev[6] !== last_cycleCounter_exp[6]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[6] = cycleCounter_expected_prev[6];
	end
	if (
		( cycleCounter_expected_prev[7] !== 1'bx ) && ( cycleCounter_prev[7] !== cycleCounter_expected_prev[7] )
		&& ((cycleCounter_expected_prev[7] !== last_cycleCounter_exp[7]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[7] = cycleCounter_expected_prev[7];
	end
	if (
		( cycleCounter_expected_prev[8] !== 1'bx ) && ( cycleCounter_prev[8] !== cycleCounter_expected_prev[8] )
		&& ((cycleCounter_expected_prev[8] !== last_cycleCounter_exp[8]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[8] = cycleCounter_expected_prev[8];
	end
	if (
		( cycleCounter_expected_prev[9] !== 1'bx ) && ( cycleCounter_prev[9] !== cycleCounter_expected_prev[9] )
		&& ((cycleCounter_expected_prev[9] !== last_cycleCounter_exp[9]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[9] = cycleCounter_expected_prev[9];
	end
	if (
		( cycleCounter_expected_prev[10] !== 1'bx ) && ( cycleCounter_prev[10] !== cycleCounter_expected_prev[10] )
		&& ((cycleCounter_expected_prev[10] !== last_cycleCounter_exp[10]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[10] = cycleCounter_expected_prev[10];
	end
	if (
		( cycleCounter_expected_prev[11] !== 1'bx ) && ( cycleCounter_prev[11] !== cycleCounter_expected_prev[11] )
		&& ((cycleCounter_expected_prev[11] !== last_cycleCounter_exp[11]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[11] = cycleCounter_expected_prev[11];
	end
	if (
		( cycleCounter_expected_prev[12] !== 1'bx ) && ( cycleCounter_prev[12] !== cycleCounter_expected_prev[12] )
		&& ((cycleCounter_expected_prev[12] !== last_cycleCounter_exp[12]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[12] = cycleCounter_expected_prev[12];
	end
	if (
		( cycleCounter_expected_prev[13] !== 1'bx ) && ( cycleCounter_prev[13] !== cycleCounter_expected_prev[13] )
		&& ((cycleCounter_expected_prev[13] !== last_cycleCounter_exp[13]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[13] = cycleCounter_expected_prev[13];
	end
	if (
		( cycleCounter_expected_prev[14] !== 1'bx ) && ( cycleCounter_prev[14] !== cycleCounter_expected_prev[14] )
		&& ((cycleCounter_expected_prev[14] !== last_cycleCounter_exp[14]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[14] = cycleCounter_expected_prev[14];
	end
	if (
		( cycleCounter_expected_prev[15] !== 1'bx ) && ( cycleCounter_prev[15] !== cycleCounter_expected_prev[15] )
		&& ((cycleCounter_expected_prev[15] !== last_cycleCounter_exp[15]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cycleCounter[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cycleCounter_expected_prev);
		$display ("     Real value = %b", cycleCounter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_cycleCounter_exp[15] = cycleCounter_expected_prev[15];
	end
	if (
		( halt_out_expected_prev !== 1'bx ) && ( halt_out_prev !== halt_out_expected_prev )
		&& ((halt_out_expected_prev !== last_halt_out_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port halt_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", halt_out_expected_prev);
		$display ("     Real value = %b", halt_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_halt_out_exp = halt_out_expected_prev;
	end
	if (
		( instruction_value_expected_prev[0] !== 1'bx ) && ( instruction_value_prev[0] !== instruction_value_expected_prev[0] )
		&& ((instruction_value_expected_prev[0] !== last_instruction_value_exp[0]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_value_exp[0] = instruction_value_expected_prev[0];
	end
	if (
		( instruction_value_expected_prev[1] !== 1'bx ) && ( instruction_value_prev[1] !== instruction_value_expected_prev[1] )
		&& ((instruction_value_expected_prev[1] !== last_instruction_value_exp[1]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_value_exp[1] = instruction_value_expected_prev[1];
	end
	if (
		( instruction_value_expected_prev[2] !== 1'bx ) && ( instruction_value_prev[2] !== instruction_value_expected_prev[2] )
		&& ((instruction_value_expected_prev[2] !== last_instruction_value_exp[2]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_value_exp[2] = instruction_value_expected_prev[2];
	end
	if (
		( instruction_value_expected_prev[3] !== 1'bx ) && ( instruction_value_prev[3] !== instruction_value_expected_prev[3] )
		&& ((instruction_value_expected_prev[3] !== last_instruction_value_exp[3]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_value_exp[3] = instruction_value_expected_prev[3];
	end
	if (
		( instruction_value_expected_prev[4] !== 1'bx ) && ( instruction_value_prev[4] !== instruction_value_expected_prev[4] )
		&& ((instruction_value_expected_prev[4] !== last_instruction_value_exp[4]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_value_exp[4] = instruction_value_expected_prev[4];
	end
	if (
		( instruction_value_expected_prev[5] !== 1'bx ) && ( instruction_value_prev[5] !== instruction_value_expected_prev[5] )
		&& ((instruction_value_expected_prev[5] !== last_instruction_value_exp[5]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_value_exp[5] = instruction_value_expected_prev[5];
	end
	if (
		( instruction_value_expected_prev[6] !== 1'bx ) && ( instruction_value_prev[6] !== instruction_value_expected_prev[6] )
		&& ((instruction_value_expected_prev[6] !== last_instruction_value_exp[6]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_value_exp[6] = instruction_value_expected_prev[6];
	end
	if (
		( instruction_value_expected_prev[7] !== 1'bx ) && ( instruction_value_prev[7] !== instruction_value_expected_prev[7] )
		&& ((instruction_value_expected_prev[7] !== last_instruction_value_exp[7]) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_instruction_value_exp[7] = instruction_value_expected_prev[7];
	end
	if (
		( opcode_out_expected_prev[0] !== 1'bx ) && ( opcode_out_prev[0] !== opcode_out_expected_prev[0] )
		&& ((opcode_out_expected_prev[0] !== last_opcode_out_exp[0]) ||
			on_first_change[54])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[54] = 1'b0;
		last_opcode_out_exp[0] = opcode_out_expected_prev[0];
	end
	if (
		( opcode_out_expected_prev[1] !== 1'bx ) && ( opcode_out_prev[1] !== opcode_out_expected_prev[1] )
		&& ((opcode_out_expected_prev[1] !== last_opcode_out_exp[1]) ||
			on_first_change[54])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[54] = 1'b0;
		last_opcode_out_exp[1] = opcode_out_expected_prev[1];
	end
	if (
		( opcode_out_expected_prev[2] !== 1'bx ) && ( opcode_out_prev[2] !== opcode_out_expected_prev[2] )
		&& ((opcode_out_expected_prev[2] !== last_opcode_out_exp[2]) ||
			on_first_change[54])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[54] = 1'b0;
		last_opcode_out_exp[2] = opcode_out_expected_prev[2];
	end
	if (
		( opcode_out_expected_prev[3] !== 1'bx ) && ( opcode_out_prev[3] !== opcode_out_expected_prev[3] )
		&& ((opcode_out_expected_prev[3] !== last_opcode_out_exp[3]) ||
			on_first_change[54])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[54] = 1'b0;
		last_opcode_out_exp[3] = opcode_out_expected_prev[3];
	end
	if (
		( orOut_expected_prev !== 1'bx ) && ( orOut_prev !== orOut_expected_prev )
		&& ((orOut_expected_prev !== last_orOut_exp) ||
			on_first_change[55])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port orOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", orOut_expected_prev);
		$display ("     Real value = %b", orOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[55] = 1'b0;
		last_orOut_exp = orOut_expected_prev;
	end
	if (
		( outPCResetFlag_expected_prev !== 1'bx ) && ( outPCResetFlag_prev !== outPCResetFlag_expected_prev )
		&& ((outPCResetFlag_expected_prev !== last_outPCResetFlag_exp) ||
			on_first_change[56])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outPCResetFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outPCResetFlag_expected_prev);
		$display ("     Real value = %b", outPCResetFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[56] = 1'b0;
		last_outPCResetFlag_exp = outPCResetFlag_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module CS141L_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg labelPassButton;
reg start;
reg [7:0] startAddress;
reg zero;
// wires                                               
wire alu_lessThanFlag;
wire [7:0] alu_overflow;
wire alu_overflowFlag;
wire [7:0] alu_result;
wire [7:0] aluIn0;
wire [7:0] ALUM_ALUResultOut;
wire ALUM_labelvalueout;
wire ALUM_labelvalueout0;
wire ALUM_labelvalueout1;
wire ALUM_labelvalueout2;
wire ALUM_labelvalueout3;
wire ALUM_labelvalueout4;
wire ALUM_labelvalueout5;
wire ALUM_labelvalueout6;
wire ALUM_labelvalueout7;
wire ALUM_readMemFlagOut;
wire [7:0] ALUM_regAOu;
wire [7:0] ALUM_regBOut;
wire ALUM_writeMemFlagOut;
wire [7:0] BUSMUX_result;
wire [7:0] BUSMUX_result_bm1;
wire [7:0] BUSMUX_result_bm3;
wire clkoutIFID;
wire clock_out;
wire [7:0] currentpc;
wire [15:0] cycleCounter;
wire halt_out;
wire [7:0] id_branchAddress;
wire id_branchFlag;
wire id_clkOut;
wire id_haltFlag;
wire id_immediateFlag;
wire id_labelFlag;
wire id_labelPassFlagOut;
wire [7:0] id_labelValue;
wire id_outputPCResetFlag;
wire [3:0] id_rd2;
wire id_readmem;
wire [7:0] id_regA;
wire [7:0] id_regB;
wire id_regwrite;
wire [3:0] id_rs;
wire [3:0] id_rt1;
wire id_signFlag;
wire id_writemem;
wire [7:0] instruction_value;
wire [7:0] instructionOutIFID;
wire labelpassIFID;
wire MWB_clkOut;
wire [7:0] MWB_labelValueOut;
wire [7:0] MWB_qout;
wire MWB_readmem;
wire [7:0] MWB_resultout;
wire [3:0] opcode_out;
wire orOut;
wire outPCResetFlag;
wire [7:0] pcOutIFID;
wire pcresetIFID;
wire [7:0] ramOut;
wire REGALU_clkOut;
wire REGALU_immediateFlagOut;
wire REGALU_labelFlagOut;
wire [7:0] REGALU_labelValueOut;
wire [3:0] REGALU_opcodeOut;
wire REGALU_readMemFlagOut;
wire [7:0] REGALU_regAOut;
wire [7:0] REGALU_regBOut;
wire REGALU_signFlagOut;
wire [7:0] REGALU_valueOut;
wire REGALU_writeMemFlagOut;
wire [7:0] val;
wire WMB_labelflagOut;

wire sampler;                             

// assign statements (if any)                          
CS141L i1 (
// port map - connection between master ports and signals/registers   
	.alu_lessThanFlag(alu_lessThanFlag),
	.alu_overflow(alu_overflow),
	.alu_overflowFlag(alu_overflowFlag),
	.alu_result(alu_result),
	.aluIn0(aluIn0),
	.ALUM_ALUResultOut(ALUM_ALUResultOut),
	.ALUM_labelvalueout(ALUM_labelvalueout),
	.ALUM_labelvalueout0(ALUM_labelvalueout0),
	.ALUM_labelvalueout1(ALUM_labelvalueout1),
	.ALUM_labelvalueout2(ALUM_labelvalueout2),
	.ALUM_labelvalueout3(ALUM_labelvalueout3),
	.ALUM_labelvalueout4(ALUM_labelvalueout4),
	.ALUM_labelvalueout5(ALUM_labelvalueout5),
	.ALUM_labelvalueout6(ALUM_labelvalueout6),
	.ALUM_labelvalueout7(ALUM_labelvalueout7),
	.ALUM_readMemFlagOut(ALUM_readMemFlagOut),
	.ALUM_regAOu(ALUM_regAOu),
	.ALUM_regBOut(ALUM_regBOut),
	.ALUM_writeMemFlagOut(ALUM_writeMemFlagOut),
	.BUSMUX_result(BUSMUX_result),
	.BUSMUX_result_bm1(BUSMUX_result_bm1),
	.BUSMUX_result_bm3(BUSMUX_result_bm3),
	.clk(clk),
	.clkoutIFID(clkoutIFID),
	.clock_out(clock_out),
	.currentpc(currentpc),
	.cycleCounter(cycleCounter),
	.halt_out(halt_out),
	.id_branchAddress(id_branchAddress),
	.id_branchFlag(id_branchFlag),
	.id_clkOut(id_clkOut),
	.id_haltFlag(id_haltFlag),
	.id_immediateFlag(id_immediateFlag),
	.id_labelFlag(id_labelFlag),
	.id_labelPassFlagOut(id_labelPassFlagOut),
	.id_labelValue(id_labelValue),
	.id_outputPCResetFlag(id_outputPCResetFlag),
	.id_rd2(id_rd2),
	.id_readmem(id_readmem),
	.id_regA(id_regA),
	.id_regB(id_regB),
	.id_regwrite(id_regwrite),
	.id_rs(id_rs),
	.id_rt1(id_rt1),
	.id_signFlag(id_signFlag),
	.id_writemem(id_writemem),
	.instruction_value(instruction_value),
	.instructionOutIFID(instructionOutIFID),
	.labelPassButton(labelPassButton),
	.labelpassIFID(labelpassIFID),
	.MWB_clkOut(MWB_clkOut),
	.MWB_labelValueOut(MWB_labelValueOut),
	.MWB_qout(MWB_qout),
	.MWB_readmem(MWB_readmem),
	.MWB_resultout(MWB_resultout),
	.opcode_out(opcode_out),
	.orOut(orOut),
	.outPCResetFlag(outPCResetFlag),
	.pcOutIFID(pcOutIFID),
	.pcresetIFID(pcresetIFID),
	.ramOut(ramOut),
	.REGALU_clkOut(REGALU_clkOut),
	.REGALU_immediateFlagOut(REGALU_immediateFlagOut),
	.REGALU_labelFlagOut(REGALU_labelFlagOut),
	.REGALU_labelValueOut(REGALU_labelValueOut),
	.REGALU_opcodeOut(REGALU_opcodeOut),
	.REGALU_readMemFlagOut(REGALU_readMemFlagOut),
	.REGALU_regAOut(REGALU_regAOut),
	.REGALU_regBOut(REGALU_regBOut),
	.REGALU_signFlagOut(REGALU_signFlagOut),
	.REGALU_valueOut(REGALU_valueOut),
	.REGALU_writeMemFlagOut(REGALU_writeMemFlagOut),
	.start(start),
	.startAddress(startAddress),
	.val(val),
	.WMB_labelflagOut(WMB_labelflagOut),
	.zero(zero)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// start
initial
begin
	start = 1'b1;
	start = #40000 1'b0;
end 
// startAddress[ 7 ]
initial
begin
	startAddress[7] = 1'b0;
end 
// startAddress[ 6 ]
initial
begin
	startAddress[6] = 1'b0;
end 
// startAddress[ 5 ]
initial
begin
	startAddress[5] = 1'b0;
end 
// startAddress[ 4 ]
initial
begin
	startAddress[4] = 1'b0;
end 
// startAddress[ 3 ]
initial
begin
	startAddress[3] = 1'b0;
end 
// startAddress[ 2 ]
initial
begin
	startAddress[2] = 1'b0;
end 
// startAddress[ 1 ]
initial
begin
	startAddress[1] = 1'b0;
end 
// startAddress[ 0 ]
initial
begin
	startAddress[0] = 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
end 

// labelPassButton
initial
begin
	labelPassButton = 1'b1;
	labelPassButton = #40000 1'b0;
end 

CS141L_vlg_sample_tst tb_sample (
	.clk(clk),
	.labelPassButton(labelPassButton),
	.start(start),
	.startAddress(startAddress),
	.zero(zero),
	.sampler_tx(sampler)
);

CS141L_vlg_check_tst tb_out(
	.alu_lessThanFlag(alu_lessThanFlag),
	.alu_overflow(alu_overflow),
	.alu_overflowFlag(alu_overflowFlag),
	.alu_result(alu_result),
	.aluIn0(aluIn0),
	.ALUM_ALUResultOut(ALUM_ALUResultOut),
	.ALUM_labelvalueout(ALUM_labelvalueout),
	.ALUM_labelvalueout0(ALUM_labelvalueout0),
	.ALUM_labelvalueout1(ALUM_labelvalueout1),
	.ALUM_labelvalueout2(ALUM_labelvalueout2),
	.ALUM_labelvalueout3(ALUM_labelvalueout3),
	.ALUM_labelvalueout4(ALUM_labelvalueout4),
	.ALUM_labelvalueout5(ALUM_labelvalueout5),
	.ALUM_labelvalueout6(ALUM_labelvalueout6),
	.ALUM_labelvalueout7(ALUM_labelvalueout7),
	.ALUM_readMemFlagOut(ALUM_readMemFlagOut),
	.ALUM_regAOu(ALUM_regAOu),
	.ALUM_regBOut(ALUM_regBOut),
	.ALUM_writeMemFlagOut(ALUM_writeMemFlagOut),
	.BUSMUX_result(BUSMUX_result),
	.BUSMUX_result_bm1(BUSMUX_result_bm1),
	.BUSMUX_result_bm3(BUSMUX_result_bm3),
	.clkoutIFID(clkoutIFID),
	.clock_out(clock_out),
	.currentpc(currentpc),
	.cycleCounter(cycleCounter),
	.halt_out(halt_out),
	.id_branchAddress(id_branchAddress),
	.id_branchFlag(id_branchFlag),
	.id_clkOut(id_clkOut),
	.id_haltFlag(id_haltFlag),
	.id_immediateFlag(id_immediateFlag),
	.id_labelFlag(id_labelFlag),
	.id_labelPassFlagOut(id_labelPassFlagOut),
	.id_labelValue(id_labelValue),
	.id_outputPCResetFlag(id_outputPCResetFlag),
	.id_rd2(id_rd2),
	.id_readmem(id_readmem),
	.id_regA(id_regA),
	.id_regB(id_regB),
	.id_regwrite(id_regwrite),
	.id_rs(id_rs),
	.id_rt1(id_rt1),
	.id_signFlag(id_signFlag),
	.id_writemem(id_writemem),
	.instruction_value(instruction_value),
	.instructionOutIFID(instructionOutIFID),
	.labelpassIFID(labelpassIFID),
	.MWB_clkOut(MWB_clkOut),
	.MWB_labelValueOut(MWB_labelValueOut),
	.MWB_qout(MWB_qout),
	.MWB_readmem(MWB_readmem),
	.MWB_resultout(MWB_resultout),
	.opcode_out(opcode_out),
	.orOut(orOut),
	.outPCResetFlag(outPCResetFlag),
	.pcOutIFID(pcOutIFID),
	.pcresetIFID(pcresetIFID),
	.ramOut(ramOut),
	.REGALU_clkOut(REGALU_clkOut),
	.REGALU_immediateFlagOut(REGALU_immediateFlagOut),
	.REGALU_labelFlagOut(REGALU_labelFlagOut),
	.REGALU_labelValueOut(REGALU_labelValueOut),
	.REGALU_opcodeOut(REGALU_opcodeOut),
	.REGALU_readMemFlagOut(REGALU_readMemFlagOut),
	.REGALU_regAOut(REGALU_regAOut),
	.REGALU_regBOut(REGALU_regBOut),
	.REGALU_signFlagOut(REGALU_signFlagOut),
	.REGALU_valueOut(REGALU_valueOut),
	.REGALU_writeMemFlagOut(REGALU_writeMemFlagOut),
	.val(val),
	.WMB_labelflagOut(WMB_labelflagOut),
	.sampler_rx(sampler)
);
endmodule

