// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/08/2015 17:10:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CS141L
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CS141L_vlg_sample_tst(
	clk,
	labelPassButton,
	start,
	startAddress,
	zero,
	sampler_tx
);
input  clk;
input  labelPassButton;
input  start;
input [7:0] startAddress;
input  zero;
output sampler_tx;

reg sample;
time current_time;
always @(clk or labelPassButton or start or startAddress or zero)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CS141L_vlg_check_tst (
	clksignal,
	id_branchFlag,
	id_haltFlag,
	id_immediateFlag,
	id_labelFlag,
	id_labelPassFlagOut,
	id_labelValue,
	id_opcde,
	id_outputPCResetFlag,
	id_rd,
	id_readmem,
	id_regwrite,
	id_rs,
	id_rt,
	id_signFlag,
	id_value,
	id_writemem,
	IFID_instructionOut,
	IFID_labelPassFlagOut,
	IFID_pcOut,
	IFID_pcResetFlagOut,
	pcl_outPC,
	romQ,
	sampler_rx
);
input  clksignal;
input  id_branchFlag;
input  id_haltFlag;
input  id_immediateFlag;
input  id_labelFlag;
input  id_labelPassFlagOut;
input [7:0] id_labelValue;
input [3:0] id_opcde;
input  id_outputPCResetFlag;
input [3:0] id_rd;
input  id_readmem;
input  id_regwrite;
input [3:0] id_rs;
input [3:0] id_rt;
input  id_signFlag;
input [7:0] id_value;
input  id_writemem;
input [7:0] IFID_instructionOut;
input  IFID_labelPassFlagOut;
input [7:0] IFID_pcOut;
input  IFID_pcResetFlagOut;
input [7:0] pcl_outPC;
input [7:0] romQ;
input sampler_rx;

reg  clksignal_expected;
reg  id_branchFlag_expected;
reg  id_haltFlag_expected;
reg  id_immediateFlag_expected;
reg  id_labelFlag_expected;
reg  id_labelPassFlagOut_expected;
reg [7:0] id_labelValue_expected;
reg [3:0] id_opcde_expected;
reg  id_outputPCResetFlag_expected;
reg [3:0] id_rd_expected;
reg  id_readmem_expected;
reg  id_regwrite_expected;
reg [3:0] id_rs_expected;
reg [3:0] id_rt_expected;
reg  id_signFlag_expected;
reg [7:0] id_value_expected;
reg  id_writemem_expected;
reg [7:0] IFID_instructionOut_expected;
reg  IFID_labelPassFlagOut_expected;
reg [7:0] IFID_pcOut_expected;
reg  IFID_pcResetFlagOut_expected;
reg [7:0] pcl_outPC_expected;
reg [7:0] romQ_expected;

reg  clksignal_prev;
reg  id_branchFlag_prev;
reg  id_haltFlag_prev;
reg  id_immediateFlag_prev;
reg  id_labelFlag_prev;
reg  id_labelPassFlagOut_prev;
reg [7:0] id_labelValue_prev;
reg [3:0] id_opcde_prev;
reg  id_outputPCResetFlag_prev;
reg [3:0] id_rd_prev;
reg  id_readmem_prev;
reg  id_regwrite_prev;
reg [3:0] id_rs_prev;
reg [3:0] id_rt_prev;
reg  id_signFlag_prev;
reg [7:0] id_value_prev;
reg  id_writemem_prev;
reg [7:0] IFID_instructionOut_prev;
reg  IFID_labelPassFlagOut_prev;
reg [7:0] IFID_pcOut_prev;
reg  IFID_pcResetFlagOut_prev;
reg [7:0] pcl_outPC_prev;
reg [7:0] romQ_prev;

reg  clksignal_expected_prev;

reg  last_clksignal_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:23] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 23'b1;
end

// update real /o prevs

always @(trigger)
begin
	clksignal_prev = clksignal;
	id_branchFlag_prev = id_branchFlag;
	id_haltFlag_prev = id_haltFlag;
	id_immediateFlag_prev = id_immediateFlag;
	id_labelFlag_prev = id_labelFlag;
	id_labelPassFlagOut_prev = id_labelPassFlagOut;
	id_labelValue_prev = id_labelValue;
	id_opcde_prev = id_opcde;
	id_outputPCResetFlag_prev = id_outputPCResetFlag;
	id_rd_prev = id_rd;
	id_readmem_prev = id_readmem;
	id_regwrite_prev = id_regwrite;
	id_rs_prev = id_rs;
	id_rt_prev = id_rt;
	id_signFlag_prev = id_signFlag;
	id_value_prev = id_value;
	id_writemem_prev = id_writemem;
	IFID_instructionOut_prev = IFID_instructionOut;
	IFID_labelPassFlagOut_prev = IFID_labelPassFlagOut;
	IFID_pcOut_prev = IFID_pcOut;
	IFID_pcResetFlagOut_prev = IFID_pcResetFlagOut;
	pcl_outPC_prev = pcl_outPC;
	romQ_prev = romQ;
end

// update expected /o prevs

always @(trigger)
begin
	clksignal_expected_prev = clksignal_expected;
end



// expected clksignal
initial
begin
	clksignal_expected = 1'bX;
end 
// generate trigger
always @(clksignal_expected or clksignal or id_branchFlag_expected or id_branchFlag or id_haltFlag_expected or id_haltFlag or id_immediateFlag_expected or id_immediateFlag or id_labelFlag_expected or id_labelFlag or id_labelPassFlagOut_expected or id_labelPassFlagOut or id_labelValue_expected or id_labelValue or id_opcde_expected or id_opcde or id_outputPCResetFlag_expected or id_outputPCResetFlag or id_rd_expected or id_rd or id_readmem_expected or id_readmem or id_regwrite_expected or id_regwrite or id_rs_expected or id_rs or id_rt_expected or id_rt or id_signFlag_expected or id_signFlag or id_value_expected or id_value or id_writemem_expected or id_writemem or IFID_instructionOut_expected or IFID_instructionOut or IFID_labelPassFlagOut_expected or IFID_labelPassFlagOut or IFID_pcOut_expected or IFID_pcOut or IFID_pcResetFlagOut_expected or IFID_pcResetFlagOut or pcl_outPC_expected or pcl_outPC or romQ_expected or romQ)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clksignal = %b | expected id_branchFlag = %b | expected id_haltFlag = %b | expected id_immediateFlag = %b | expected id_labelFlag = %b | expected id_labelPassFlagOut = %b | expected id_labelValue = %b | expected id_opcde = %b | expected id_outputPCResetFlag = %b | expected id_rd = %b | expected id_readmem = %b | expected id_regwrite = %b | expected id_rs = %b | expected id_rt = %b | expected id_signFlag = %b | expected id_value = %b | expected id_writemem = %b | expected IFID_instructionOut = %b | expected IFID_labelPassFlagOut = %b | expected IFID_pcOut = %b | expected IFID_pcResetFlagOut = %b | expected pcl_outPC = %b | expected romQ = %b | ",clksignal_expected_prev,id_branchFlag_expected_prev,id_haltFlag_expected_prev,id_immediateFlag_expected_prev,id_labelFlag_expected_prev,id_labelPassFlagOut_expected_prev,id_labelValue_expected_prev,id_opcde_expected_prev,id_outputPCResetFlag_expected_prev,id_rd_expected_prev,id_readmem_expected_prev,id_regwrite_expected_prev,id_rs_expected_prev,id_rt_expected_prev,id_signFlag_expected_prev,id_value_expected_prev,id_writemem_expected_prev,IFID_instructionOut_expected_prev,IFID_labelPassFlagOut_expected_prev,IFID_pcOut_expected_prev,IFID_pcResetFlagOut_expected_prev,pcl_outPC_expected_prev,romQ_expected_prev);
	$display("| real clksignal = %b | real id_branchFlag = %b | real id_haltFlag = %b | real id_immediateFlag = %b | real id_labelFlag = %b | real id_labelPassFlagOut = %b | real id_labelValue = %b | real id_opcde = %b | real id_outputPCResetFlag = %b | real id_rd = %b | real id_readmem = %b | real id_regwrite = %b | real id_rs = %b | real id_rt = %b | real id_signFlag = %b | real id_value = %b | real id_writemem = %b | real IFID_instructionOut = %b | real IFID_labelPassFlagOut = %b | real IFID_pcOut = %b | real IFID_pcResetFlagOut = %b | real pcl_outPC = %b | real romQ = %b | ",clksignal_prev,id_branchFlag_prev,id_haltFlag_prev,id_immediateFlag_prev,id_labelFlag_prev,id_labelPassFlagOut_prev,id_labelValue_prev,id_opcde_prev,id_outputPCResetFlag_prev,id_rd_prev,id_readmem_prev,id_regwrite_prev,id_rs_prev,id_rt_prev,id_signFlag_prev,id_value_prev,id_writemem_prev,IFID_instructionOut_prev,IFID_labelPassFlagOut_prev,IFID_pcOut_prev,IFID_pcResetFlagOut_prev,pcl_outPC_prev,romQ_prev);
`endif
	if (
		( clksignal_expected_prev !== 1'bx ) && ( clksignal_prev !== clksignal_expected_prev )
		&& ((clksignal_expected_prev !== last_clksignal_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clksignal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clksignal_expected_prev);
		$display ("     Real value = %b", clksignal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clksignal_exp = clksignal_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module CS141L_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg labelPassButton;
reg start;
reg [7:0] startAddress;
reg zero;
// wires                                               
wire clksignal;
wire id_branchFlag;
wire id_haltFlag;
wire id_immediateFlag;
wire id_labelFlag;
wire id_labelPassFlagOut;
wire [7:0] id_labelValue;
wire [3:0] id_opcde;
wire id_outputPCResetFlag;
wire [3:0] id_rd;
wire id_readmem;
wire id_regwrite;
wire [3:0] id_rs;
wire [3:0] id_rt;
wire id_signFlag;
wire [7:0] id_value;
wire id_writemem;
wire [7:0] IFID_instructionOut;
wire IFID_labelPassFlagOut;
wire [7:0] IFID_pcOut;
wire IFID_pcResetFlagOut;
wire [7:0] pcl_outPC;
wire [7:0] romQ;

wire sampler;                             

// assign statements (if any)                          
CS141L i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clksignal(clksignal),
	.id_branchFlag(id_branchFlag),
	.id_haltFlag(id_haltFlag),
	.id_immediateFlag(id_immediateFlag),
	.id_labelFlag(id_labelFlag),
	.id_labelPassFlagOut(id_labelPassFlagOut),
	.id_labelValue(id_labelValue),
	.id_opcde(id_opcde),
	.id_outputPCResetFlag(id_outputPCResetFlag),
	.id_rd(id_rd),
	.id_readmem(id_readmem),
	.id_regwrite(id_regwrite),
	.id_rs(id_rs),
	.id_rt(id_rt),
	.id_signFlag(id_signFlag),
	.id_value(id_value),
	.id_writemem(id_writemem),
	.IFID_instructionOut(IFID_instructionOut),
	.IFID_labelPassFlagOut(IFID_labelPassFlagOut),
	.IFID_pcOut(IFID_pcOut),
	.IFID_pcResetFlagOut(IFID_pcResetFlagOut),
	.labelPassButton(labelPassButton),
	.pcl_outPC(pcl_outPC),
	.romQ(romQ),
	.start(start),
	.startAddress(startAddress),
	.zero(zero)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// labelPassButton
initial
begin
	labelPassButton = 1'b1;
	labelPassButton = #40000 1'b0;
end 

// start
initial
begin
	start = 1'b1;
	start = #40000 1'b0;
end 
// startAddress[ 7 ]
initial
begin
	startAddress[7] = 1'b0;
end 
// startAddress[ 6 ]
initial
begin
	startAddress[6] = 1'b0;
end 
// startAddress[ 5 ]
initial
begin
	startAddress[5] = 1'b0;
end 
// startAddress[ 4 ]
initial
begin
	startAddress[4] = 1'b0;
end 
// startAddress[ 3 ]
initial
begin
	startAddress[3] = 1'b0;
end 
// startAddress[ 2 ]
initial
begin
	startAddress[2] = 1'b0;
end 
// startAddress[ 1 ]
initial
begin
	startAddress[1] = 1'b0;
end 
// startAddress[ 0 ]
initial
begin
	startAddress[0] = 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
end 

CS141L_vlg_sample_tst tb_sample (
	.clk(clk),
	.labelPassButton(labelPassButton),
	.start(start),
	.startAddress(startAddress),
	.zero(zero),
	.sampler_tx(sampler)
);

CS141L_vlg_check_tst tb_out(
	.clksignal(clksignal),
	.id_branchFlag(id_branchFlag),
	.id_haltFlag(id_haltFlag),
	.id_immediateFlag(id_immediateFlag),
	.id_labelFlag(id_labelFlag),
	.id_labelPassFlagOut(id_labelPassFlagOut),
	.id_labelValue(id_labelValue),
	.id_opcde(id_opcde),
	.id_outputPCResetFlag(id_outputPCResetFlag),
	.id_rd(id_rd),
	.id_readmem(id_readmem),
	.id_regwrite(id_regwrite),
	.id_rs(id_rs),
	.id_rt(id_rt),
	.id_signFlag(id_signFlag),
	.id_value(id_value),
	.id_writemem(id_writemem),
	.IFID_instructionOut(IFID_instructionOut),
	.IFID_labelPassFlagOut(IFID_labelPassFlagOut),
	.IFID_pcOut(IFID_pcOut),
	.IFID_pcResetFlagOut(IFID_pcResetFlagOut),
	.pcl_outPC(pcl_outPC),
	.romQ(romQ),
	.sampler_rx(sampler)
);
endmodule

