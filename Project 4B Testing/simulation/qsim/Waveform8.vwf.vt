// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/18/2015 03:48:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CS141L
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CS141L_vlg_sample_tst(
	clk,
	start,
	startAddress,
	zero,
	sampler_tx
);
input  clk;
input  start;
input [7:0] startAddress;
input  zero;
output sampler_tx;

reg sample;
time current_time;
always @(clk or start or startAddress or zero)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CS141L_vlg_check_tst (
	clock_out,
	currentpc,
	halt_out,
	instruction_value,
	opcode_out,
	outPCResetFlag,
	sampler_rx
);
input  clock_out;
input [7:0] currentpc;
input  halt_out;
input [7:0] instruction_value;
input [3:0] opcode_out;
input  outPCResetFlag;
input sampler_rx;

reg  clock_out_expected;
reg [7:0] currentpc_expected;
reg  halt_out_expected;
reg [7:0] instruction_value_expected;
reg [3:0] opcode_out_expected;
reg  outPCResetFlag_expected;

reg  clock_out_prev;
reg [7:0] currentpc_prev;
reg  halt_out_prev;
reg [7:0] instruction_value_prev;
reg [3:0] opcode_out_prev;
reg  outPCResetFlag_prev;

reg  clock_out_expected_prev;
reg [7:0] currentpc_expected_prev;
reg  halt_out_expected_prev;
reg [7:0] instruction_value_expected_prev;
reg [3:0] opcode_out_expected_prev;
reg  outPCResetFlag_expected_prev;

reg  last_clock_out_exp;
reg [7:0] last_currentpc_exp;
reg  last_halt_out_exp;
reg [7:0] last_instruction_value_exp;
reg [3:0] last_opcode_out_exp;
reg  last_outPCResetFlag_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	clock_out_prev = clock_out;
	currentpc_prev = currentpc;
	halt_out_prev = halt_out;
	instruction_value_prev = instruction_value;
	opcode_out_prev = opcode_out;
	outPCResetFlag_prev = outPCResetFlag;
end

// update expected /o prevs

always @(trigger)
begin
	clock_out_expected_prev = clock_out_expected;
	currentpc_expected_prev = currentpc_expected;
	halt_out_expected_prev = halt_out_expected;
	instruction_value_expected_prev = instruction_value_expected;
	opcode_out_expected_prev = opcode_out_expected;
	outPCResetFlag_expected_prev = outPCResetFlag_expected;
end



// expected clock_out
initial
begin
	clock_out_expected = 1'bX;
end 
// expected currentpc[ 7 ]
initial
begin
	currentpc_expected[7] = 1'bX;
end 
// expected currentpc[ 6 ]
initial
begin
	currentpc_expected[6] = 1'bX;
end 
// expected currentpc[ 5 ]
initial
begin
	currentpc_expected[5] = 1'bX;
end 
// expected currentpc[ 4 ]
initial
begin
	currentpc_expected[4] = 1'bX;
end 
// expected currentpc[ 3 ]
initial
begin
	currentpc_expected[3] = 1'bX;
end 
// expected currentpc[ 2 ]
initial
begin
	currentpc_expected[2] = 1'bX;
end 
// expected currentpc[ 1 ]
initial
begin
	currentpc_expected[1] = 1'bX;
end 
// expected currentpc[ 0 ]
initial
begin
	currentpc_expected[0] = 1'bX;
end 

// expected halt_out
initial
begin
	halt_out_expected = 1'bX;
end 
// expected instruction_value[ 7 ]
initial
begin
	instruction_value_expected[7] = 1'bX;
end 
// expected instruction_value[ 6 ]
initial
begin
	instruction_value_expected[6] = 1'bX;
end 
// expected instruction_value[ 5 ]
initial
begin
	instruction_value_expected[5] = 1'bX;
end 
// expected instruction_value[ 4 ]
initial
begin
	instruction_value_expected[4] = 1'bX;
end 
// expected instruction_value[ 3 ]
initial
begin
	instruction_value_expected[3] = 1'bX;
end 
// expected instruction_value[ 2 ]
initial
begin
	instruction_value_expected[2] = 1'bX;
end 
// expected instruction_value[ 1 ]
initial
begin
	instruction_value_expected[1] = 1'bX;
end 
// expected instruction_value[ 0 ]
initial
begin
	instruction_value_expected[0] = 1'bX;
end 
// expected opcode_out[ 3 ]
initial
begin
	opcode_out_expected[3] = 1'bX;
end 
// expected opcode_out[ 2 ]
initial
begin
	opcode_out_expected[2] = 1'bX;
end 
// expected opcode_out[ 1 ]
initial
begin
	opcode_out_expected[1] = 1'bX;
end 
// expected opcode_out[ 0 ]
initial
begin
	opcode_out_expected[0] = 1'bX;
end 

// expected outPCResetFlag
initial
begin
	outPCResetFlag_expected = 1'bX;
end 
// generate trigger
always @(clock_out_expected or clock_out or currentpc_expected or currentpc or halt_out_expected or halt_out or instruction_value_expected or instruction_value or opcode_out_expected or opcode_out or outPCResetFlag_expected or outPCResetFlag)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clock_out = %b | expected currentpc = %b | expected halt_out = %b | expected instruction_value = %b | expected opcode_out = %b | expected outPCResetFlag = %b | ",clock_out_expected_prev,currentpc_expected_prev,halt_out_expected_prev,instruction_value_expected_prev,opcode_out_expected_prev,outPCResetFlag_expected_prev);
	$display("| real clock_out = %b | real currentpc = %b | real halt_out = %b | real instruction_value = %b | real opcode_out = %b | real outPCResetFlag = %b | ",clock_out_prev,currentpc_prev,halt_out_prev,instruction_value_prev,opcode_out_prev,outPCResetFlag_prev);
`endif
	if (
		( clock_out_expected_prev !== 1'bx ) && ( clock_out_prev !== clock_out_expected_prev )
		&& ((clock_out_expected_prev !== last_clock_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_out_expected_prev);
		$display ("     Real value = %b", clock_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clock_out_exp = clock_out_expected_prev;
	end
	if (
		( currentpc_expected_prev[0] !== 1'bx ) && ( currentpc_prev[0] !== currentpc_expected_prev[0] )
		&& ((currentpc_expected_prev[0] !== last_currentpc_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currentpc_exp[0] = currentpc_expected_prev[0];
	end
	if (
		( currentpc_expected_prev[1] !== 1'bx ) && ( currentpc_prev[1] !== currentpc_expected_prev[1] )
		&& ((currentpc_expected_prev[1] !== last_currentpc_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currentpc_exp[1] = currentpc_expected_prev[1];
	end
	if (
		( currentpc_expected_prev[2] !== 1'bx ) && ( currentpc_prev[2] !== currentpc_expected_prev[2] )
		&& ((currentpc_expected_prev[2] !== last_currentpc_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currentpc_exp[2] = currentpc_expected_prev[2];
	end
	if (
		( currentpc_expected_prev[3] !== 1'bx ) && ( currentpc_prev[3] !== currentpc_expected_prev[3] )
		&& ((currentpc_expected_prev[3] !== last_currentpc_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currentpc_exp[3] = currentpc_expected_prev[3];
	end
	if (
		( currentpc_expected_prev[4] !== 1'bx ) && ( currentpc_prev[4] !== currentpc_expected_prev[4] )
		&& ((currentpc_expected_prev[4] !== last_currentpc_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currentpc_exp[4] = currentpc_expected_prev[4];
	end
	if (
		( currentpc_expected_prev[5] !== 1'bx ) && ( currentpc_prev[5] !== currentpc_expected_prev[5] )
		&& ((currentpc_expected_prev[5] !== last_currentpc_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currentpc_exp[5] = currentpc_expected_prev[5];
	end
	if (
		( currentpc_expected_prev[6] !== 1'bx ) && ( currentpc_prev[6] !== currentpc_expected_prev[6] )
		&& ((currentpc_expected_prev[6] !== last_currentpc_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currentpc_exp[6] = currentpc_expected_prev[6];
	end
	if (
		( currentpc_expected_prev[7] !== 1'bx ) && ( currentpc_prev[7] !== currentpc_expected_prev[7] )
		&& ((currentpc_expected_prev[7] !== last_currentpc_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentpc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentpc_expected_prev);
		$display ("     Real value = %b", currentpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currentpc_exp[7] = currentpc_expected_prev[7];
	end
	if (
		( halt_out_expected_prev !== 1'bx ) && ( halt_out_prev !== halt_out_expected_prev )
		&& ((halt_out_expected_prev !== last_halt_out_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port halt_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", halt_out_expected_prev);
		$display ("     Real value = %b", halt_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_halt_out_exp = halt_out_expected_prev;
	end
	if (
		( instruction_value_expected_prev[0] !== 1'bx ) && ( instruction_value_prev[0] !== instruction_value_expected_prev[0] )
		&& ((instruction_value_expected_prev[0] !== last_instruction_value_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_value_exp[0] = instruction_value_expected_prev[0];
	end
	if (
		( instruction_value_expected_prev[1] !== 1'bx ) && ( instruction_value_prev[1] !== instruction_value_expected_prev[1] )
		&& ((instruction_value_expected_prev[1] !== last_instruction_value_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_value_exp[1] = instruction_value_expected_prev[1];
	end
	if (
		( instruction_value_expected_prev[2] !== 1'bx ) && ( instruction_value_prev[2] !== instruction_value_expected_prev[2] )
		&& ((instruction_value_expected_prev[2] !== last_instruction_value_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_value_exp[2] = instruction_value_expected_prev[2];
	end
	if (
		( instruction_value_expected_prev[3] !== 1'bx ) && ( instruction_value_prev[3] !== instruction_value_expected_prev[3] )
		&& ((instruction_value_expected_prev[3] !== last_instruction_value_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_value_exp[3] = instruction_value_expected_prev[3];
	end
	if (
		( instruction_value_expected_prev[4] !== 1'bx ) && ( instruction_value_prev[4] !== instruction_value_expected_prev[4] )
		&& ((instruction_value_expected_prev[4] !== last_instruction_value_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_value_exp[4] = instruction_value_expected_prev[4];
	end
	if (
		( instruction_value_expected_prev[5] !== 1'bx ) && ( instruction_value_prev[5] !== instruction_value_expected_prev[5] )
		&& ((instruction_value_expected_prev[5] !== last_instruction_value_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_value_exp[5] = instruction_value_expected_prev[5];
	end
	if (
		( instruction_value_expected_prev[6] !== 1'bx ) && ( instruction_value_prev[6] !== instruction_value_expected_prev[6] )
		&& ((instruction_value_expected_prev[6] !== last_instruction_value_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_value_exp[6] = instruction_value_expected_prev[6];
	end
	if (
		( instruction_value_expected_prev[7] !== 1'bx ) && ( instruction_value_prev[7] !== instruction_value_expected_prev[7] )
		&& ((instruction_value_expected_prev[7] !== last_instruction_value_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_value_expected_prev);
		$display ("     Real value = %b", instruction_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_value_exp[7] = instruction_value_expected_prev[7];
	end
	if (
		( opcode_out_expected_prev[0] !== 1'bx ) && ( opcode_out_prev[0] !== opcode_out_expected_prev[0] )
		&& ((opcode_out_expected_prev[0] !== last_opcode_out_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_out_exp[0] = opcode_out_expected_prev[0];
	end
	if (
		( opcode_out_expected_prev[1] !== 1'bx ) && ( opcode_out_prev[1] !== opcode_out_expected_prev[1] )
		&& ((opcode_out_expected_prev[1] !== last_opcode_out_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_out_exp[1] = opcode_out_expected_prev[1];
	end
	if (
		( opcode_out_expected_prev[2] !== 1'bx ) && ( opcode_out_prev[2] !== opcode_out_expected_prev[2] )
		&& ((opcode_out_expected_prev[2] !== last_opcode_out_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_out_exp[2] = opcode_out_expected_prev[2];
	end
	if (
		( opcode_out_expected_prev[3] !== 1'bx ) && ( opcode_out_prev[3] !== opcode_out_expected_prev[3] )
		&& ((opcode_out_expected_prev[3] !== last_opcode_out_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_out_expected_prev);
		$display ("     Real value = %b", opcode_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_out_exp[3] = opcode_out_expected_prev[3];
	end
	if (
		( outPCResetFlag_expected_prev !== 1'bx ) && ( outPCResetFlag_prev !== outPCResetFlag_expected_prev )
		&& ((outPCResetFlag_expected_prev !== last_outPCResetFlag_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outPCResetFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outPCResetFlag_expected_prev);
		$display ("     Real value = %b", outPCResetFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outPCResetFlag_exp = outPCResetFlag_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CS141L_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg start;
reg [7:0] startAddress;
reg zero;
// wires                                               
wire clock_out;
wire [7:0] currentpc;
wire halt_out;
wire [7:0] instruction_value;
wire [3:0] opcode_out;
wire outPCResetFlag;

wire sampler;                             

// assign statements (if any)                          
CS141L i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clock_out(clock_out),
	.currentpc(currentpc),
	.halt_out(halt_out),
	.instruction_value(instruction_value),
	.opcode_out(opcode_out),
	.outPCResetFlag(outPCResetFlag),
	.start(start),
	.startAddress(startAddress),
	.zero(zero)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// start
initial
begin
	start = 1'b0;
end 
// startAddress[ 7 ]
initial
begin
	startAddress[7] = 1'b0;
end 
// startAddress[ 6 ]
initial
begin
	startAddress[6] = 1'b0;
end 
// startAddress[ 5 ]
initial
begin
	startAddress[5] = 1'b0;
end 
// startAddress[ 4 ]
initial
begin
	startAddress[4] = 1'b0;
end 
// startAddress[ 3 ]
initial
begin
	startAddress[3] = 1'b0;
end 
// startAddress[ 2 ]
initial
begin
	startAddress[2] = 1'b0;
end 
// startAddress[ 1 ]
initial
begin
	startAddress[1] = 1'b0;
end 
// startAddress[ 0 ]
initial
begin
	startAddress[0] = 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
end 

CS141L_vlg_sample_tst tb_sample (
	.clk(clk),
	.start(start),
	.startAddress(startAddress),
	.zero(zero),
	.sampler_tx(sampler)
);

CS141L_vlg_check_tst tb_out(
	.clock_out(clock_out),
	.currentpc(currentpc),
	.halt_out(halt_out),
	.instruction_value(instruction_value),
	.opcode_out(opcode_out),
	.outPCResetFlag(outPCResetFlag),
	.sampler_rx(sampler)
);
endmodule

