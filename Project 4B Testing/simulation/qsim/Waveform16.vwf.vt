// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/08/2015 17:34:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CS141L
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CS141L_vlg_sample_tst(
	clk,
	labelPassButton,
	start,
	startAddress,
	zero,
	sampler_tx
);
input  clk;
input  labelPassButton;
input  start;
input [7:0] startAddress;
input  zero;
output sampler_tx;

reg sample;
time current_time;
always @(clk or labelPassButton or start or startAddress or zero)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CS141L_vlg_check_tst (
	clksignal,
	id_branchFlag6,
	id_haltFlag,
	id_immediateFlag,
	id_labelFlag7,
	id_labelPassFlagOut,
	id_labelValue,
	id_opcde1,
	id_outputPCResetFlag,
	id_rd5,
	id_readmem,
	id_regwrite,
	id_rs3,
	id_rt4,
	id_signFlag,
	id_value2,
	id_writemem,
	IFID_instructionOut,
	IFID_labelPassFlagOut,
	IFID_pcOut,
	IFID_pcResetFlagOut,
	pcl_outPC,
	romQ,
	sampler_rx
);
input  clksignal;
input  id_branchFlag6;
input  id_haltFlag;
input  id_immediateFlag;
input  id_labelFlag7;
input  id_labelPassFlagOut;
input [7:0] id_labelValue;
input [3:0] id_opcde1;
input  id_outputPCResetFlag;
input [3:0] id_rd5;
input  id_readmem;
input  id_regwrite;
input [3:0] id_rs3;
input [3:0] id_rt4;
input  id_signFlag;
input [7:0] id_value2;
input  id_writemem;
input [7:0] IFID_instructionOut;
input  IFID_labelPassFlagOut;
input [7:0] IFID_pcOut;
input  IFID_pcResetFlagOut;
input [7:0] pcl_outPC;
input [7:0] romQ;
input sampler_rx;

reg  clksignal_expected;
reg  id_branchFlag6_expected;
reg  id_haltFlag_expected;
reg  id_immediateFlag_expected;
reg  id_labelFlag7_expected;
reg  id_labelPassFlagOut_expected;
reg [7:0] id_labelValue_expected;
reg [3:0] id_opcde1_expected;
reg  id_outputPCResetFlag_expected;
reg [3:0] id_rd5_expected;
reg  id_readmem_expected;
reg  id_regwrite_expected;
reg [3:0] id_rs3_expected;
reg [3:0] id_rt4_expected;
reg  id_signFlag_expected;
reg [7:0] id_value2_expected;
reg  id_writemem_expected;
reg [7:0] IFID_instructionOut_expected;
reg  IFID_labelPassFlagOut_expected;
reg [7:0] IFID_pcOut_expected;
reg  IFID_pcResetFlagOut_expected;
reg [7:0] pcl_outPC_expected;
reg [7:0] romQ_expected;

reg  clksignal_prev;
reg  id_branchFlag6_prev;
reg  id_haltFlag_prev;
reg  id_immediateFlag_prev;
reg  id_labelFlag7_prev;
reg  id_labelPassFlagOut_prev;
reg [7:0] id_labelValue_prev;
reg [3:0] id_opcde1_prev;
reg  id_outputPCResetFlag_prev;
reg [3:0] id_rd5_prev;
reg  id_readmem_prev;
reg  id_regwrite_prev;
reg [3:0] id_rs3_prev;
reg [3:0] id_rt4_prev;
reg  id_signFlag_prev;
reg [7:0] id_value2_prev;
reg  id_writemem_prev;
reg [7:0] IFID_instructionOut_prev;
reg  IFID_labelPassFlagOut_prev;
reg [7:0] IFID_pcOut_prev;
reg  IFID_pcResetFlagOut_prev;
reg [7:0] pcl_outPC_prev;
reg [7:0] romQ_prev;

reg  clksignal_expected_prev;
reg  id_branchFlag6_expected_prev;
reg  id_haltFlag_expected_prev;
reg  id_immediateFlag_expected_prev;
reg  id_labelFlag7_expected_prev;
reg  id_labelPassFlagOut_expected_prev;
reg [7:0] id_labelValue_expected_prev;
reg [3:0] id_opcde1_expected_prev;
reg  id_outputPCResetFlag_expected_prev;
reg [3:0] id_rd5_expected_prev;
reg [3:0] id_rs3_expected_prev;
reg [3:0] id_rt4_expected_prev;
reg [7:0] id_value2_expected_prev;
reg  id_writemem_expected_prev;
reg [7:0] IFID_instructionOut_expected_prev;
reg [7:0] IFID_pcOut_expected_prev;
reg [7:0] pcl_outPC_expected_prev;
reg [7:0] romQ_expected_prev;

reg  last_clksignal_exp;
reg  last_id_branchFlag6_exp;
reg  last_id_haltFlag_exp;
reg  last_id_immediateFlag_exp;
reg  last_id_labelFlag7_exp;
reg  last_id_labelPassFlagOut_exp;
reg [7:0] last_id_labelValue_exp;
reg [3:0] last_id_opcde1_exp;
reg  last_id_outputPCResetFlag_exp;
reg [3:0] last_id_rd5_exp;
reg [3:0] last_id_rs3_exp;
reg [3:0] last_id_rt4_exp;
reg [7:0] last_id_value2_exp;
reg  last_id_writemem_exp;
reg [7:0] last_IFID_instructionOut_exp;
reg [7:0] last_IFID_pcOut_exp;
reg [7:0] last_pcl_outPC_exp;
reg [7:0] last_romQ_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:23] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 23'b1;
end

// update real /o prevs

always @(trigger)
begin
	clksignal_prev = clksignal;
	id_branchFlag6_prev = id_branchFlag6;
	id_haltFlag_prev = id_haltFlag;
	id_immediateFlag_prev = id_immediateFlag;
	id_labelFlag7_prev = id_labelFlag7;
	id_labelPassFlagOut_prev = id_labelPassFlagOut;
	id_labelValue_prev = id_labelValue;
	id_opcde1_prev = id_opcde1;
	id_outputPCResetFlag_prev = id_outputPCResetFlag;
	id_rd5_prev = id_rd5;
	id_readmem_prev = id_readmem;
	id_regwrite_prev = id_regwrite;
	id_rs3_prev = id_rs3;
	id_rt4_prev = id_rt4;
	id_signFlag_prev = id_signFlag;
	id_value2_prev = id_value2;
	id_writemem_prev = id_writemem;
	IFID_instructionOut_prev = IFID_instructionOut;
	IFID_labelPassFlagOut_prev = IFID_labelPassFlagOut;
	IFID_pcOut_prev = IFID_pcOut;
	IFID_pcResetFlagOut_prev = IFID_pcResetFlagOut;
	pcl_outPC_prev = pcl_outPC;
	romQ_prev = romQ;
end

// update expected /o prevs

always @(trigger)
begin
	clksignal_expected_prev = clksignal_expected;
	id_branchFlag6_expected_prev = id_branchFlag6_expected;
	id_haltFlag_expected_prev = id_haltFlag_expected;
	id_immediateFlag_expected_prev = id_immediateFlag_expected;
	id_labelFlag7_expected_prev = id_labelFlag7_expected;
	id_labelPassFlagOut_expected_prev = id_labelPassFlagOut_expected;
	id_labelValue_expected_prev = id_labelValue_expected;
	id_opcde1_expected_prev = id_opcde1_expected;
	id_outputPCResetFlag_expected_prev = id_outputPCResetFlag_expected;
	id_rd5_expected_prev = id_rd5_expected;
	id_rs3_expected_prev = id_rs3_expected;
	id_rt4_expected_prev = id_rt4_expected;
	id_value2_expected_prev = id_value2_expected;
	id_writemem_expected_prev = id_writemem_expected;
	IFID_instructionOut_expected_prev = IFID_instructionOut_expected;
	IFID_pcOut_expected_prev = IFID_pcOut_expected;
	pcl_outPC_expected_prev = pcl_outPC_expected;
	romQ_expected_prev = romQ_expected;
end



// expected clksignal
initial
begin
	clksignal_expected = 1'bX;
end 
// expected IFID_instructionOut[ 7 ]
initial
begin
	IFID_instructionOut_expected[7] = 1'bX;
end 
// expected IFID_instructionOut[ 6 ]
initial
begin
	IFID_instructionOut_expected[6] = 1'bX;
end 
// expected IFID_instructionOut[ 5 ]
initial
begin
	IFID_instructionOut_expected[5] = 1'bX;
end 
// expected IFID_instructionOut[ 4 ]
initial
begin
	IFID_instructionOut_expected[4] = 1'bX;
end 
// expected IFID_instructionOut[ 3 ]
initial
begin
	IFID_instructionOut_expected[3] = 1'bX;
end 
// expected IFID_instructionOut[ 2 ]
initial
begin
	IFID_instructionOut_expected[2] = 1'bX;
end 
// expected IFID_instructionOut[ 1 ]
initial
begin
	IFID_instructionOut_expected[1] = 1'bX;
end 
// expected IFID_instructionOut[ 0 ]
initial
begin
	IFID_instructionOut_expected[0] = 1'bX;
end 
// expected IFID_pcOut[ 7 ]
initial
begin
	IFID_pcOut_expected[7] = 1'bX;
end 
// expected IFID_pcOut[ 6 ]
initial
begin
	IFID_pcOut_expected[6] = 1'bX;
end 
// expected IFID_pcOut[ 5 ]
initial
begin
	IFID_pcOut_expected[5] = 1'bX;
end 
// expected IFID_pcOut[ 4 ]
initial
begin
	IFID_pcOut_expected[4] = 1'bX;
end 
// expected IFID_pcOut[ 3 ]
initial
begin
	IFID_pcOut_expected[3] = 1'bX;
end 
// expected IFID_pcOut[ 2 ]
initial
begin
	IFID_pcOut_expected[2] = 1'bX;
end 
// expected IFID_pcOut[ 1 ]
initial
begin
	IFID_pcOut_expected[1] = 1'bX;
end 
// expected IFID_pcOut[ 0 ]
initial
begin
	IFID_pcOut_expected[0] = 1'bX;
end 
// expected pcl_outPC[ 7 ]
initial
begin
	pcl_outPC_expected[7] = 1'bX;
end 
// expected pcl_outPC[ 6 ]
initial
begin
	pcl_outPC_expected[6] = 1'bX;
end 
// expected pcl_outPC[ 5 ]
initial
begin
	pcl_outPC_expected[5] = 1'bX;
end 
// expected pcl_outPC[ 4 ]
initial
begin
	pcl_outPC_expected[4] = 1'bX;
end 
// expected pcl_outPC[ 3 ]
initial
begin
	pcl_outPC_expected[3] = 1'bX;
end 
// expected pcl_outPC[ 2 ]
initial
begin
	pcl_outPC_expected[2] = 1'bX;
end 
// expected pcl_outPC[ 1 ]
initial
begin
	pcl_outPC_expected[1] = 1'bX;
end 
// expected pcl_outPC[ 0 ]
initial
begin
	pcl_outPC_expected[0] = 1'bX;
end 
// expected romQ[ 7 ]
initial
begin
	romQ_expected[7] = 1'bX;
end 
// expected romQ[ 6 ]
initial
begin
	romQ_expected[6] = 1'bX;
end 
// expected romQ[ 5 ]
initial
begin
	romQ_expected[5] = 1'bX;
end 
// expected romQ[ 4 ]
initial
begin
	romQ_expected[4] = 1'bX;
end 
// expected romQ[ 3 ]
initial
begin
	romQ_expected[3] = 1'bX;
end 
// expected romQ[ 2 ]
initial
begin
	romQ_expected[2] = 1'bX;
end 
// expected romQ[ 1 ]
initial
begin
	romQ_expected[1] = 1'bX;
end 
// expected romQ[ 0 ]
initial
begin
	romQ_expected[0] = 1'bX;
end 

// expected id_branchFlag6
initial
begin
	id_branchFlag6_expected = 1'bX;
end 

// expected id_haltFlag
initial
begin
	id_haltFlag_expected = 1'bX;
end 

// expected id_immediateFlag
initial
begin
	id_immediateFlag_expected = 1'bX;
end 

// expected id_labelFlag7
initial
begin
	id_labelFlag7_expected = 1'bX;
end 

// expected id_labelPassFlagOut
initial
begin
	id_labelPassFlagOut_expected = 1'bX;
end 
// expected id_labelValue[ 7 ]
initial
begin
	id_labelValue_expected[7] = 1'bX;
end 
// expected id_labelValue[ 6 ]
initial
begin
	id_labelValue_expected[6] = 1'bX;
end 
// expected id_labelValue[ 5 ]
initial
begin
	id_labelValue_expected[5] = 1'bX;
end 
// expected id_labelValue[ 4 ]
initial
begin
	id_labelValue_expected[4] = 1'bX;
end 
// expected id_labelValue[ 3 ]
initial
begin
	id_labelValue_expected[3] = 1'bX;
end 
// expected id_labelValue[ 2 ]
initial
begin
	id_labelValue_expected[2] = 1'bX;
end 
// expected id_labelValue[ 1 ]
initial
begin
	id_labelValue_expected[1] = 1'bX;
end 
// expected id_labelValue[ 0 ]
initial
begin
	id_labelValue_expected[0] = 1'bX;
end 
// expected id_opcde1[ 3 ]
initial
begin
	id_opcde1_expected[3] = 1'bX;
end 
// expected id_opcde1[ 2 ]
initial
begin
	id_opcde1_expected[2] = 1'bX;
end 
// expected id_opcde1[ 1 ]
initial
begin
	id_opcde1_expected[1] = 1'bX;
end 
// expected id_opcde1[ 0 ]
initial
begin
	id_opcde1_expected[0] = 1'bX;
end 

// expected id_outputPCResetFlag
initial
begin
	id_outputPCResetFlag_expected = 1'bX;
end 
// expected id_rd5[ 3 ]
initial
begin
	id_rd5_expected[3] = 1'bX;
end 
// expected id_rd5[ 2 ]
initial
begin
	id_rd5_expected[2] = 1'bX;
end 
// expected id_rd5[ 1 ]
initial
begin
	id_rd5_expected[1] = 1'bX;
end 
// expected id_rd5[ 0 ]
initial
begin
	id_rd5_expected[0] = 1'bX;
end 
// expected id_rs3[ 3 ]
initial
begin
	id_rs3_expected[3] = 1'bX;
end 
// expected id_rs3[ 2 ]
initial
begin
	id_rs3_expected[2] = 1'bX;
end 
// expected id_rs3[ 1 ]
initial
begin
	id_rs3_expected[1] = 1'bX;
end 
// expected id_rs3[ 0 ]
initial
begin
	id_rs3_expected[0] = 1'bX;
end 
// expected id_rt4[ 3 ]
initial
begin
	id_rt4_expected[3] = 1'bX;
end 
// expected id_rt4[ 2 ]
initial
begin
	id_rt4_expected[2] = 1'bX;
end 
// expected id_rt4[ 1 ]
initial
begin
	id_rt4_expected[1] = 1'bX;
end 
// expected id_rt4[ 0 ]
initial
begin
	id_rt4_expected[0] = 1'bX;
end 
// expected id_value2[ 7 ]
initial
begin
	id_value2_expected[7] = 1'bX;
end 
// expected id_value2[ 6 ]
initial
begin
	id_value2_expected[6] = 1'bX;
end 
// expected id_value2[ 5 ]
initial
begin
	id_value2_expected[5] = 1'bX;
end 
// expected id_value2[ 4 ]
initial
begin
	id_value2_expected[4] = 1'bX;
end 
// expected id_value2[ 3 ]
initial
begin
	id_value2_expected[3] = 1'bX;
end 
// expected id_value2[ 2 ]
initial
begin
	id_value2_expected[2] = 1'bX;
end 
// expected id_value2[ 1 ]
initial
begin
	id_value2_expected[1] = 1'bX;
end 
// expected id_value2[ 0 ]
initial
begin
	id_value2_expected[0] = 1'bX;
end 

// expected id_writemem
initial
begin
	id_writemem_expected = 1'bX;
end 
// generate trigger
always @(clksignal_expected or clksignal or id_branchFlag6_expected or id_branchFlag6 or id_haltFlag_expected or id_haltFlag or id_immediateFlag_expected or id_immediateFlag or id_labelFlag7_expected or id_labelFlag7 or id_labelPassFlagOut_expected or id_labelPassFlagOut or id_labelValue_expected or id_labelValue or id_opcde1_expected or id_opcde1 or id_outputPCResetFlag_expected or id_outputPCResetFlag or id_rd5_expected or id_rd5 or id_readmem_expected or id_readmem or id_regwrite_expected or id_regwrite or id_rs3_expected or id_rs3 or id_rt4_expected or id_rt4 or id_signFlag_expected or id_signFlag or id_value2_expected or id_value2 or id_writemem_expected or id_writemem or IFID_instructionOut_expected or IFID_instructionOut or IFID_labelPassFlagOut_expected or IFID_labelPassFlagOut or IFID_pcOut_expected or IFID_pcOut or IFID_pcResetFlagOut_expected or IFID_pcResetFlagOut or pcl_outPC_expected or pcl_outPC or romQ_expected or romQ)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clksignal = %b | expected id_branchFlag6 = %b | expected id_haltFlag = %b | expected id_immediateFlag = %b | expected id_labelFlag7 = %b | expected id_labelPassFlagOut = %b | expected id_labelValue = %b | expected id_opcde1 = %b | expected id_outputPCResetFlag = %b | expected id_rd5 = %b | expected id_readmem = %b | expected id_regwrite = %b | expected id_rs3 = %b | expected id_rt4 = %b | expected id_signFlag = %b | expected id_value2 = %b | expected id_writemem = %b | expected IFID_instructionOut = %b | expected IFID_labelPassFlagOut = %b | expected IFID_pcOut = %b | expected IFID_pcResetFlagOut = %b | expected pcl_outPC = %b | expected romQ = %b | ",clksignal_expected_prev,id_branchFlag6_expected_prev,id_haltFlag_expected_prev,id_immediateFlag_expected_prev,id_labelFlag7_expected_prev,id_labelPassFlagOut_expected_prev,id_labelValue_expected_prev,id_opcde1_expected_prev,id_outputPCResetFlag_expected_prev,id_rd5_expected_prev,id_readmem_expected_prev,id_regwrite_expected_prev,id_rs3_expected_prev,id_rt4_expected_prev,id_signFlag_expected_prev,id_value2_expected_prev,id_writemem_expected_prev,IFID_instructionOut_expected_prev,IFID_labelPassFlagOut_expected_prev,IFID_pcOut_expected_prev,IFID_pcResetFlagOut_expected_prev,pcl_outPC_expected_prev,romQ_expected_prev);
	$display("| real clksignal = %b | real id_branchFlag6 = %b | real id_haltFlag = %b | real id_immediateFlag = %b | real id_labelFlag7 = %b | real id_labelPassFlagOut = %b | real id_labelValue = %b | real id_opcde1 = %b | real id_outputPCResetFlag = %b | real id_rd5 = %b | real id_readmem = %b | real id_regwrite = %b | real id_rs3 = %b | real id_rt4 = %b | real id_signFlag = %b | real id_value2 = %b | real id_writemem = %b | real IFID_instructionOut = %b | real IFID_labelPassFlagOut = %b | real IFID_pcOut = %b | real IFID_pcResetFlagOut = %b | real pcl_outPC = %b | real romQ = %b | ",clksignal_prev,id_branchFlag6_prev,id_haltFlag_prev,id_immediateFlag_prev,id_labelFlag7_prev,id_labelPassFlagOut_prev,id_labelValue_prev,id_opcde1_prev,id_outputPCResetFlag_prev,id_rd5_prev,id_readmem_prev,id_regwrite_prev,id_rs3_prev,id_rt4_prev,id_signFlag_prev,id_value2_prev,id_writemem_prev,IFID_instructionOut_prev,IFID_labelPassFlagOut_prev,IFID_pcOut_prev,IFID_pcResetFlagOut_prev,pcl_outPC_prev,romQ_prev);
`endif
	if (
		( clksignal_expected_prev !== 1'bx ) && ( clksignal_prev !== clksignal_expected_prev )
		&& ((clksignal_expected_prev !== last_clksignal_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clksignal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clksignal_expected_prev);
		$display ("     Real value = %b", clksignal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clksignal_exp = clksignal_expected_prev;
	end
	if (
		( id_branchFlag6_expected_prev !== 1'bx ) && ( id_branchFlag6_prev !== id_branchFlag6_expected_prev )
		&& ((id_branchFlag6_expected_prev !== last_id_branchFlag6_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_branchFlag6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_branchFlag6_expected_prev);
		$display ("     Real value = %b", id_branchFlag6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_id_branchFlag6_exp = id_branchFlag6_expected_prev;
	end
	if (
		( id_haltFlag_expected_prev !== 1'bx ) && ( id_haltFlag_prev !== id_haltFlag_expected_prev )
		&& ((id_haltFlag_expected_prev !== last_id_haltFlag_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_haltFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_haltFlag_expected_prev);
		$display ("     Real value = %b", id_haltFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_id_haltFlag_exp = id_haltFlag_expected_prev;
	end
	if (
		( id_immediateFlag_expected_prev !== 1'bx ) && ( id_immediateFlag_prev !== id_immediateFlag_expected_prev )
		&& ((id_immediateFlag_expected_prev !== last_id_immediateFlag_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_immediateFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_immediateFlag_expected_prev);
		$display ("     Real value = %b", id_immediateFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_id_immediateFlag_exp = id_immediateFlag_expected_prev;
	end
	if (
		( id_labelFlag7_expected_prev !== 1'bx ) && ( id_labelFlag7_prev !== id_labelFlag7_expected_prev )
		&& ((id_labelFlag7_expected_prev !== last_id_labelFlag7_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelFlag7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelFlag7_expected_prev);
		$display ("     Real value = %b", id_labelFlag7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_id_labelFlag7_exp = id_labelFlag7_expected_prev;
	end
	if (
		( id_labelPassFlagOut_expected_prev !== 1'bx ) && ( id_labelPassFlagOut_prev !== id_labelPassFlagOut_expected_prev )
		&& ((id_labelPassFlagOut_expected_prev !== last_id_labelPassFlagOut_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelPassFlagOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelPassFlagOut_expected_prev);
		$display ("     Real value = %b", id_labelPassFlagOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_id_labelPassFlagOut_exp = id_labelPassFlagOut_expected_prev;
	end
	if (
		( id_labelValue_expected_prev[0] !== 1'bx ) && ( id_labelValue_prev[0] !== id_labelValue_expected_prev[0] )
		&& ((id_labelValue_expected_prev[0] !== last_id_labelValue_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_id_labelValue_exp[0] = id_labelValue_expected_prev[0];
	end
	if (
		( id_labelValue_expected_prev[1] !== 1'bx ) && ( id_labelValue_prev[1] !== id_labelValue_expected_prev[1] )
		&& ((id_labelValue_expected_prev[1] !== last_id_labelValue_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_id_labelValue_exp[1] = id_labelValue_expected_prev[1];
	end
	if (
		( id_labelValue_expected_prev[2] !== 1'bx ) && ( id_labelValue_prev[2] !== id_labelValue_expected_prev[2] )
		&& ((id_labelValue_expected_prev[2] !== last_id_labelValue_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_id_labelValue_exp[2] = id_labelValue_expected_prev[2];
	end
	if (
		( id_labelValue_expected_prev[3] !== 1'bx ) && ( id_labelValue_prev[3] !== id_labelValue_expected_prev[3] )
		&& ((id_labelValue_expected_prev[3] !== last_id_labelValue_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_id_labelValue_exp[3] = id_labelValue_expected_prev[3];
	end
	if (
		( id_labelValue_expected_prev[4] !== 1'bx ) && ( id_labelValue_prev[4] !== id_labelValue_expected_prev[4] )
		&& ((id_labelValue_expected_prev[4] !== last_id_labelValue_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_id_labelValue_exp[4] = id_labelValue_expected_prev[4];
	end
	if (
		( id_labelValue_expected_prev[5] !== 1'bx ) && ( id_labelValue_prev[5] !== id_labelValue_expected_prev[5] )
		&& ((id_labelValue_expected_prev[5] !== last_id_labelValue_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_id_labelValue_exp[5] = id_labelValue_expected_prev[5];
	end
	if (
		( id_labelValue_expected_prev[6] !== 1'bx ) && ( id_labelValue_prev[6] !== id_labelValue_expected_prev[6] )
		&& ((id_labelValue_expected_prev[6] !== last_id_labelValue_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_id_labelValue_exp[6] = id_labelValue_expected_prev[6];
	end
	if (
		( id_labelValue_expected_prev[7] !== 1'bx ) && ( id_labelValue_prev[7] !== id_labelValue_expected_prev[7] )
		&& ((id_labelValue_expected_prev[7] !== last_id_labelValue_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_id_labelValue_exp[7] = id_labelValue_expected_prev[7];
	end
	if (
		( id_opcde1_expected_prev[0] !== 1'bx ) && ( id_opcde1_prev[0] !== id_opcde1_expected_prev[0] )
		&& ((id_opcde1_expected_prev[0] !== last_id_opcde1_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_opcde1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_opcde1_expected_prev);
		$display ("     Real value = %b", id_opcde1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_id_opcde1_exp[0] = id_opcde1_expected_prev[0];
	end
	if (
		( id_opcde1_expected_prev[1] !== 1'bx ) && ( id_opcde1_prev[1] !== id_opcde1_expected_prev[1] )
		&& ((id_opcde1_expected_prev[1] !== last_id_opcde1_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_opcde1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_opcde1_expected_prev);
		$display ("     Real value = %b", id_opcde1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_id_opcde1_exp[1] = id_opcde1_expected_prev[1];
	end
	if (
		( id_opcde1_expected_prev[2] !== 1'bx ) && ( id_opcde1_prev[2] !== id_opcde1_expected_prev[2] )
		&& ((id_opcde1_expected_prev[2] !== last_id_opcde1_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_opcde1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_opcde1_expected_prev);
		$display ("     Real value = %b", id_opcde1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_id_opcde1_exp[2] = id_opcde1_expected_prev[2];
	end
	if (
		( id_opcde1_expected_prev[3] !== 1'bx ) && ( id_opcde1_prev[3] !== id_opcde1_expected_prev[3] )
		&& ((id_opcde1_expected_prev[3] !== last_id_opcde1_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_opcde1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_opcde1_expected_prev);
		$display ("     Real value = %b", id_opcde1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_id_opcde1_exp[3] = id_opcde1_expected_prev[3];
	end
	if (
		( id_outputPCResetFlag_expected_prev !== 1'bx ) && ( id_outputPCResetFlag_prev !== id_outputPCResetFlag_expected_prev )
		&& ((id_outputPCResetFlag_expected_prev !== last_id_outputPCResetFlag_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_outputPCResetFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_outputPCResetFlag_expected_prev);
		$display ("     Real value = %b", id_outputPCResetFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_id_outputPCResetFlag_exp = id_outputPCResetFlag_expected_prev;
	end
	if (
		( id_rd5_expected_prev[0] !== 1'bx ) && ( id_rd5_prev[0] !== id_rd5_expected_prev[0] )
		&& ((id_rd5_expected_prev[0] !== last_id_rd5_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rd5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rd5_expected_prev);
		$display ("     Real value = %b", id_rd5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_id_rd5_exp[0] = id_rd5_expected_prev[0];
	end
	if (
		( id_rd5_expected_prev[1] !== 1'bx ) && ( id_rd5_prev[1] !== id_rd5_expected_prev[1] )
		&& ((id_rd5_expected_prev[1] !== last_id_rd5_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rd5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rd5_expected_prev);
		$display ("     Real value = %b", id_rd5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_id_rd5_exp[1] = id_rd5_expected_prev[1];
	end
	if (
		( id_rd5_expected_prev[2] !== 1'bx ) && ( id_rd5_prev[2] !== id_rd5_expected_prev[2] )
		&& ((id_rd5_expected_prev[2] !== last_id_rd5_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rd5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rd5_expected_prev);
		$display ("     Real value = %b", id_rd5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_id_rd5_exp[2] = id_rd5_expected_prev[2];
	end
	if (
		( id_rd5_expected_prev[3] !== 1'bx ) && ( id_rd5_prev[3] !== id_rd5_expected_prev[3] )
		&& ((id_rd5_expected_prev[3] !== last_id_rd5_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rd5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rd5_expected_prev);
		$display ("     Real value = %b", id_rd5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_id_rd5_exp[3] = id_rd5_expected_prev[3];
	end
	if (
		( id_rs3_expected_prev[0] !== 1'bx ) && ( id_rs3_prev[0] !== id_rs3_expected_prev[0] )
		&& ((id_rs3_expected_prev[0] !== last_id_rs3_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rs3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rs3_expected_prev);
		$display ("     Real value = %b", id_rs3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_id_rs3_exp[0] = id_rs3_expected_prev[0];
	end
	if (
		( id_rs3_expected_prev[1] !== 1'bx ) && ( id_rs3_prev[1] !== id_rs3_expected_prev[1] )
		&& ((id_rs3_expected_prev[1] !== last_id_rs3_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rs3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rs3_expected_prev);
		$display ("     Real value = %b", id_rs3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_id_rs3_exp[1] = id_rs3_expected_prev[1];
	end
	if (
		( id_rs3_expected_prev[2] !== 1'bx ) && ( id_rs3_prev[2] !== id_rs3_expected_prev[2] )
		&& ((id_rs3_expected_prev[2] !== last_id_rs3_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rs3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rs3_expected_prev);
		$display ("     Real value = %b", id_rs3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_id_rs3_exp[2] = id_rs3_expected_prev[2];
	end
	if (
		( id_rs3_expected_prev[3] !== 1'bx ) && ( id_rs3_prev[3] !== id_rs3_expected_prev[3] )
		&& ((id_rs3_expected_prev[3] !== last_id_rs3_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rs3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rs3_expected_prev);
		$display ("     Real value = %b", id_rs3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_id_rs3_exp[3] = id_rs3_expected_prev[3];
	end
	if (
		( id_rt4_expected_prev[0] !== 1'bx ) && ( id_rt4_prev[0] !== id_rt4_expected_prev[0] )
		&& ((id_rt4_expected_prev[0] !== last_id_rt4_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rt4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rt4_expected_prev);
		$display ("     Real value = %b", id_rt4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_id_rt4_exp[0] = id_rt4_expected_prev[0];
	end
	if (
		( id_rt4_expected_prev[1] !== 1'bx ) && ( id_rt4_prev[1] !== id_rt4_expected_prev[1] )
		&& ((id_rt4_expected_prev[1] !== last_id_rt4_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rt4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rt4_expected_prev);
		$display ("     Real value = %b", id_rt4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_id_rt4_exp[1] = id_rt4_expected_prev[1];
	end
	if (
		( id_rt4_expected_prev[2] !== 1'bx ) && ( id_rt4_prev[2] !== id_rt4_expected_prev[2] )
		&& ((id_rt4_expected_prev[2] !== last_id_rt4_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rt4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rt4_expected_prev);
		$display ("     Real value = %b", id_rt4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_id_rt4_exp[2] = id_rt4_expected_prev[2];
	end
	if (
		( id_rt4_expected_prev[3] !== 1'bx ) && ( id_rt4_prev[3] !== id_rt4_expected_prev[3] )
		&& ((id_rt4_expected_prev[3] !== last_id_rt4_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rt4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rt4_expected_prev);
		$display ("     Real value = %b", id_rt4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_id_rt4_exp[3] = id_rt4_expected_prev[3];
	end
	if (
		( id_value2_expected_prev[0] !== 1'bx ) && ( id_value2_prev[0] !== id_value2_expected_prev[0] )
		&& ((id_value2_expected_prev[0] !== last_id_value2_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value2_expected_prev);
		$display ("     Real value = %b", id_value2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_id_value2_exp[0] = id_value2_expected_prev[0];
	end
	if (
		( id_value2_expected_prev[1] !== 1'bx ) && ( id_value2_prev[1] !== id_value2_expected_prev[1] )
		&& ((id_value2_expected_prev[1] !== last_id_value2_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value2_expected_prev);
		$display ("     Real value = %b", id_value2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_id_value2_exp[1] = id_value2_expected_prev[1];
	end
	if (
		( id_value2_expected_prev[2] !== 1'bx ) && ( id_value2_prev[2] !== id_value2_expected_prev[2] )
		&& ((id_value2_expected_prev[2] !== last_id_value2_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value2_expected_prev);
		$display ("     Real value = %b", id_value2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_id_value2_exp[2] = id_value2_expected_prev[2];
	end
	if (
		( id_value2_expected_prev[3] !== 1'bx ) && ( id_value2_prev[3] !== id_value2_expected_prev[3] )
		&& ((id_value2_expected_prev[3] !== last_id_value2_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value2_expected_prev);
		$display ("     Real value = %b", id_value2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_id_value2_exp[3] = id_value2_expected_prev[3];
	end
	if (
		( id_value2_expected_prev[4] !== 1'bx ) && ( id_value2_prev[4] !== id_value2_expected_prev[4] )
		&& ((id_value2_expected_prev[4] !== last_id_value2_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value2_expected_prev);
		$display ("     Real value = %b", id_value2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_id_value2_exp[4] = id_value2_expected_prev[4];
	end
	if (
		( id_value2_expected_prev[5] !== 1'bx ) && ( id_value2_prev[5] !== id_value2_expected_prev[5] )
		&& ((id_value2_expected_prev[5] !== last_id_value2_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value2_expected_prev);
		$display ("     Real value = %b", id_value2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_id_value2_exp[5] = id_value2_expected_prev[5];
	end
	if (
		( id_value2_expected_prev[6] !== 1'bx ) && ( id_value2_prev[6] !== id_value2_expected_prev[6] )
		&& ((id_value2_expected_prev[6] !== last_id_value2_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value2_expected_prev);
		$display ("     Real value = %b", id_value2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_id_value2_exp[6] = id_value2_expected_prev[6];
	end
	if (
		( id_value2_expected_prev[7] !== 1'bx ) && ( id_value2_prev[7] !== id_value2_expected_prev[7] )
		&& ((id_value2_expected_prev[7] !== last_id_value2_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value2_expected_prev);
		$display ("     Real value = %b", id_value2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_id_value2_exp[7] = id_value2_expected_prev[7];
	end
	if (
		( id_writemem_expected_prev !== 1'bx ) && ( id_writemem_prev !== id_writemem_expected_prev )
		&& ((id_writemem_expected_prev !== last_id_writemem_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_writemem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_writemem_expected_prev);
		$display ("     Real value = %b", id_writemem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_id_writemem_exp = id_writemem_expected_prev;
	end
	if (
		( IFID_instructionOut_expected_prev[0] !== 1'bx ) && ( IFID_instructionOut_prev[0] !== IFID_instructionOut_expected_prev[0] )
		&& ((IFID_instructionOut_expected_prev[0] !== last_IFID_instructionOut_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_instructionOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_instructionOut_expected_prev);
		$display ("     Real value = %b", IFID_instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_IFID_instructionOut_exp[0] = IFID_instructionOut_expected_prev[0];
	end
	if (
		( IFID_instructionOut_expected_prev[1] !== 1'bx ) && ( IFID_instructionOut_prev[1] !== IFID_instructionOut_expected_prev[1] )
		&& ((IFID_instructionOut_expected_prev[1] !== last_IFID_instructionOut_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_instructionOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_instructionOut_expected_prev);
		$display ("     Real value = %b", IFID_instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_IFID_instructionOut_exp[1] = IFID_instructionOut_expected_prev[1];
	end
	if (
		( IFID_instructionOut_expected_prev[2] !== 1'bx ) && ( IFID_instructionOut_prev[2] !== IFID_instructionOut_expected_prev[2] )
		&& ((IFID_instructionOut_expected_prev[2] !== last_IFID_instructionOut_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_instructionOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_instructionOut_expected_prev);
		$display ("     Real value = %b", IFID_instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_IFID_instructionOut_exp[2] = IFID_instructionOut_expected_prev[2];
	end
	if (
		( IFID_instructionOut_expected_prev[3] !== 1'bx ) && ( IFID_instructionOut_prev[3] !== IFID_instructionOut_expected_prev[3] )
		&& ((IFID_instructionOut_expected_prev[3] !== last_IFID_instructionOut_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_instructionOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_instructionOut_expected_prev);
		$display ("     Real value = %b", IFID_instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_IFID_instructionOut_exp[3] = IFID_instructionOut_expected_prev[3];
	end
	if (
		( IFID_instructionOut_expected_prev[4] !== 1'bx ) && ( IFID_instructionOut_prev[4] !== IFID_instructionOut_expected_prev[4] )
		&& ((IFID_instructionOut_expected_prev[4] !== last_IFID_instructionOut_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_instructionOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_instructionOut_expected_prev);
		$display ("     Real value = %b", IFID_instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_IFID_instructionOut_exp[4] = IFID_instructionOut_expected_prev[4];
	end
	if (
		( IFID_instructionOut_expected_prev[5] !== 1'bx ) && ( IFID_instructionOut_prev[5] !== IFID_instructionOut_expected_prev[5] )
		&& ((IFID_instructionOut_expected_prev[5] !== last_IFID_instructionOut_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_instructionOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_instructionOut_expected_prev);
		$display ("     Real value = %b", IFID_instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_IFID_instructionOut_exp[5] = IFID_instructionOut_expected_prev[5];
	end
	if (
		( IFID_instructionOut_expected_prev[6] !== 1'bx ) && ( IFID_instructionOut_prev[6] !== IFID_instructionOut_expected_prev[6] )
		&& ((IFID_instructionOut_expected_prev[6] !== last_IFID_instructionOut_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_instructionOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_instructionOut_expected_prev);
		$display ("     Real value = %b", IFID_instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_IFID_instructionOut_exp[6] = IFID_instructionOut_expected_prev[6];
	end
	if (
		( IFID_instructionOut_expected_prev[7] !== 1'bx ) && ( IFID_instructionOut_prev[7] !== IFID_instructionOut_expected_prev[7] )
		&& ((IFID_instructionOut_expected_prev[7] !== last_IFID_instructionOut_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_instructionOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_instructionOut_expected_prev);
		$display ("     Real value = %b", IFID_instructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_IFID_instructionOut_exp[7] = IFID_instructionOut_expected_prev[7];
	end
	if (
		( IFID_pcOut_expected_prev[0] !== 1'bx ) && ( IFID_pcOut_prev[0] !== IFID_pcOut_expected_prev[0] )
		&& ((IFID_pcOut_expected_prev[0] !== last_IFID_pcOut_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_pcOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_pcOut_expected_prev);
		$display ("     Real value = %b", IFID_pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_IFID_pcOut_exp[0] = IFID_pcOut_expected_prev[0];
	end
	if (
		( IFID_pcOut_expected_prev[1] !== 1'bx ) && ( IFID_pcOut_prev[1] !== IFID_pcOut_expected_prev[1] )
		&& ((IFID_pcOut_expected_prev[1] !== last_IFID_pcOut_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_pcOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_pcOut_expected_prev);
		$display ("     Real value = %b", IFID_pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_IFID_pcOut_exp[1] = IFID_pcOut_expected_prev[1];
	end
	if (
		( IFID_pcOut_expected_prev[2] !== 1'bx ) && ( IFID_pcOut_prev[2] !== IFID_pcOut_expected_prev[2] )
		&& ((IFID_pcOut_expected_prev[2] !== last_IFID_pcOut_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_pcOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_pcOut_expected_prev);
		$display ("     Real value = %b", IFID_pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_IFID_pcOut_exp[2] = IFID_pcOut_expected_prev[2];
	end
	if (
		( IFID_pcOut_expected_prev[3] !== 1'bx ) && ( IFID_pcOut_prev[3] !== IFID_pcOut_expected_prev[3] )
		&& ((IFID_pcOut_expected_prev[3] !== last_IFID_pcOut_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_pcOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_pcOut_expected_prev);
		$display ("     Real value = %b", IFID_pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_IFID_pcOut_exp[3] = IFID_pcOut_expected_prev[3];
	end
	if (
		( IFID_pcOut_expected_prev[4] !== 1'bx ) && ( IFID_pcOut_prev[4] !== IFID_pcOut_expected_prev[4] )
		&& ((IFID_pcOut_expected_prev[4] !== last_IFID_pcOut_exp[4]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_pcOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_pcOut_expected_prev);
		$display ("     Real value = %b", IFID_pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_IFID_pcOut_exp[4] = IFID_pcOut_expected_prev[4];
	end
	if (
		( IFID_pcOut_expected_prev[5] !== 1'bx ) && ( IFID_pcOut_prev[5] !== IFID_pcOut_expected_prev[5] )
		&& ((IFID_pcOut_expected_prev[5] !== last_IFID_pcOut_exp[5]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_pcOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_pcOut_expected_prev);
		$display ("     Real value = %b", IFID_pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_IFID_pcOut_exp[5] = IFID_pcOut_expected_prev[5];
	end
	if (
		( IFID_pcOut_expected_prev[6] !== 1'bx ) && ( IFID_pcOut_prev[6] !== IFID_pcOut_expected_prev[6] )
		&& ((IFID_pcOut_expected_prev[6] !== last_IFID_pcOut_exp[6]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_pcOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_pcOut_expected_prev);
		$display ("     Real value = %b", IFID_pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_IFID_pcOut_exp[6] = IFID_pcOut_expected_prev[6];
	end
	if (
		( IFID_pcOut_expected_prev[7] !== 1'bx ) && ( IFID_pcOut_prev[7] !== IFID_pcOut_expected_prev[7] )
		&& ((IFID_pcOut_expected_prev[7] !== last_IFID_pcOut_exp[7]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IFID_pcOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IFID_pcOut_expected_prev);
		$display ("     Real value = %b", IFID_pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_IFID_pcOut_exp[7] = IFID_pcOut_expected_prev[7];
	end
	if (
		( pcl_outPC_expected_prev[0] !== 1'bx ) && ( pcl_outPC_prev[0] !== pcl_outPC_expected_prev[0] )
		&& ((pcl_outPC_expected_prev[0] !== last_pcl_outPC_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcl_outPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcl_outPC_expected_prev);
		$display ("     Real value = %b", pcl_outPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pcl_outPC_exp[0] = pcl_outPC_expected_prev[0];
	end
	if (
		( pcl_outPC_expected_prev[1] !== 1'bx ) && ( pcl_outPC_prev[1] !== pcl_outPC_expected_prev[1] )
		&& ((pcl_outPC_expected_prev[1] !== last_pcl_outPC_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcl_outPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcl_outPC_expected_prev);
		$display ("     Real value = %b", pcl_outPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pcl_outPC_exp[1] = pcl_outPC_expected_prev[1];
	end
	if (
		( pcl_outPC_expected_prev[2] !== 1'bx ) && ( pcl_outPC_prev[2] !== pcl_outPC_expected_prev[2] )
		&& ((pcl_outPC_expected_prev[2] !== last_pcl_outPC_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcl_outPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcl_outPC_expected_prev);
		$display ("     Real value = %b", pcl_outPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pcl_outPC_exp[2] = pcl_outPC_expected_prev[2];
	end
	if (
		( pcl_outPC_expected_prev[3] !== 1'bx ) && ( pcl_outPC_prev[3] !== pcl_outPC_expected_prev[3] )
		&& ((pcl_outPC_expected_prev[3] !== last_pcl_outPC_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcl_outPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcl_outPC_expected_prev);
		$display ("     Real value = %b", pcl_outPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pcl_outPC_exp[3] = pcl_outPC_expected_prev[3];
	end
	if (
		( pcl_outPC_expected_prev[4] !== 1'bx ) && ( pcl_outPC_prev[4] !== pcl_outPC_expected_prev[4] )
		&& ((pcl_outPC_expected_prev[4] !== last_pcl_outPC_exp[4]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcl_outPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcl_outPC_expected_prev);
		$display ("     Real value = %b", pcl_outPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pcl_outPC_exp[4] = pcl_outPC_expected_prev[4];
	end
	if (
		( pcl_outPC_expected_prev[5] !== 1'bx ) && ( pcl_outPC_prev[5] !== pcl_outPC_expected_prev[5] )
		&& ((pcl_outPC_expected_prev[5] !== last_pcl_outPC_exp[5]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcl_outPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcl_outPC_expected_prev);
		$display ("     Real value = %b", pcl_outPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pcl_outPC_exp[5] = pcl_outPC_expected_prev[5];
	end
	if (
		( pcl_outPC_expected_prev[6] !== 1'bx ) && ( pcl_outPC_prev[6] !== pcl_outPC_expected_prev[6] )
		&& ((pcl_outPC_expected_prev[6] !== last_pcl_outPC_exp[6]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcl_outPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcl_outPC_expected_prev);
		$display ("     Real value = %b", pcl_outPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pcl_outPC_exp[6] = pcl_outPC_expected_prev[6];
	end
	if (
		( pcl_outPC_expected_prev[7] !== 1'bx ) && ( pcl_outPC_prev[7] !== pcl_outPC_expected_prev[7] )
		&& ((pcl_outPC_expected_prev[7] !== last_pcl_outPC_exp[7]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcl_outPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcl_outPC_expected_prev);
		$display ("     Real value = %b", pcl_outPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pcl_outPC_exp[7] = pcl_outPC_expected_prev[7];
	end
	if (
		( romQ_expected_prev[0] !== 1'bx ) && ( romQ_prev[0] !== romQ_expected_prev[0] )
		&& ((romQ_expected_prev[0] !== last_romQ_exp[0]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romQ[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romQ_expected_prev);
		$display ("     Real value = %b", romQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_romQ_exp[0] = romQ_expected_prev[0];
	end
	if (
		( romQ_expected_prev[1] !== 1'bx ) && ( romQ_prev[1] !== romQ_expected_prev[1] )
		&& ((romQ_expected_prev[1] !== last_romQ_exp[1]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romQ[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romQ_expected_prev);
		$display ("     Real value = %b", romQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_romQ_exp[1] = romQ_expected_prev[1];
	end
	if (
		( romQ_expected_prev[2] !== 1'bx ) && ( romQ_prev[2] !== romQ_expected_prev[2] )
		&& ((romQ_expected_prev[2] !== last_romQ_exp[2]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romQ[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romQ_expected_prev);
		$display ("     Real value = %b", romQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_romQ_exp[2] = romQ_expected_prev[2];
	end
	if (
		( romQ_expected_prev[3] !== 1'bx ) && ( romQ_prev[3] !== romQ_expected_prev[3] )
		&& ((romQ_expected_prev[3] !== last_romQ_exp[3]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romQ[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romQ_expected_prev);
		$display ("     Real value = %b", romQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_romQ_exp[3] = romQ_expected_prev[3];
	end
	if (
		( romQ_expected_prev[4] !== 1'bx ) && ( romQ_prev[4] !== romQ_expected_prev[4] )
		&& ((romQ_expected_prev[4] !== last_romQ_exp[4]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romQ[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romQ_expected_prev);
		$display ("     Real value = %b", romQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_romQ_exp[4] = romQ_expected_prev[4];
	end
	if (
		( romQ_expected_prev[5] !== 1'bx ) && ( romQ_prev[5] !== romQ_expected_prev[5] )
		&& ((romQ_expected_prev[5] !== last_romQ_exp[5]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romQ[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romQ_expected_prev);
		$display ("     Real value = %b", romQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_romQ_exp[5] = romQ_expected_prev[5];
	end
	if (
		( romQ_expected_prev[6] !== 1'bx ) && ( romQ_prev[6] !== romQ_expected_prev[6] )
		&& ((romQ_expected_prev[6] !== last_romQ_exp[6]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romQ[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romQ_expected_prev);
		$display ("     Real value = %b", romQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_romQ_exp[6] = romQ_expected_prev[6];
	end
	if (
		( romQ_expected_prev[7] !== 1'bx ) && ( romQ_prev[7] !== romQ_expected_prev[7] )
		&& ((romQ_expected_prev[7] !== last_romQ_exp[7]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romQ[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romQ_expected_prev);
		$display ("     Real value = %b", romQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_romQ_exp[7] = romQ_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module CS141L_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg labelPassButton;
reg start;
reg [7:0] startAddress;
reg zero;
// wires                                               
wire clksignal;
wire id_branchFlag6;
wire id_haltFlag;
wire id_immediateFlag;
wire id_labelFlag7;
wire id_labelPassFlagOut;
wire [7:0] id_labelValue;
wire [3:0] id_opcde1;
wire id_outputPCResetFlag;
wire [3:0] id_rd5;
wire id_readmem;
wire id_regwrite;
wire [3:0] id_rs3;
wire [3:0] id_rt4;
wire id_signFlag;
wire [7:0] id_value2;
wire id_writemem;
wire [7:0] IFID_instructionOut;
wire IFID_labelPassFlagOut;
wire [7:0] IFID_pcOut;
wire IFID_pcResetFlagOut;
wire [7:0] pcl_outPC;
wire [7:0] romQ;

wire sampler;                             

// assign statements (if any)                          
CS141L i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clksignal(clksignal),
	.id_branchFlag6(id_branchFlag6),
	.id_haltFlag(id_haltFlag),
	.id_immediateFlag(id_immediateFlag),
	.id_labelFlag7(id_labelFlag7),
	.id_labelPassFlagOut(id_labelPassFlagOut),
	.id_labelValue(id_labelValue),
	.id_opcde1(id_opcde1),
	.id_outputPCResetFlag(id_outputPCResetFlag),
	.id_rd5(id_rd5),
	.id_readmem(id_readmem),
	.id_regwrite(id_regwrite),
	.id_rs3(id_rs3),
	.id_rt4(id_rt4),
	.id_signFlag(id_signFlag),
	.id_value2(id_value2),
	.id_writemem(id_writemem),
	.IFID_instructionOut(IFID_instructionOut),
	.IFID_labelPassFlagOut(IFID_labelPassFlagOut),
	.IFID_pcOut(IFID_pcOut),
	.IFID_pcResetFlagOut(IFID_pcResetFlagOut),
	.labelPassButton(labelPassButton),
	.pcl_outPC(pcl_outPC),
	.romQ(romQ),
	.start(start),
	.startAddress(startAddress),
	.zero(zero)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// labelPassButton
initial
begin
	labelPassButton = 1'b1;
	labelPassButton = #10000 1'b0;
end 

// start
initial
begin
	start = 1'b1;
	start = #10000 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
end 
// startAddress[ 7 ]
initial
begin
	startAddress[7] = 1'b0;
end 
// startAddress[ 6 ]
initial
begin
	startAddress[6] = 1'b0;
end 
// startAddress[ 5 ]
initial
begin
	startAddress[5] = 1'b0;
end 
// startAddress[ 4 ]
initial
begin
	startAddress[4] = 1'b0;
end 
// startAddress[ 3 ]
initial
begin
	startAddress[3] = 1'b0;
end 
// startAddress[ 2 ]
initial
begin
	startAddress[2] = 1'b0;
end 
// startAddress[ 1 ]
initial
begin
	startAddress[1] = 1'b0;
end 
// startAddress[ 0 ]
initial
begin
	startAddress[0] = 1'b0;
end 

CS141L_vlg_sample_tst tb_sample (
	.clk(clk),
	.labelPassButton(labelPassButton),
	.start(start),
	.startAddress(startAddress),
	.zero(zero),
	.sampler_tx(sampler)
);

CS141L_vlg_check_tst tb_out(
	.clksignal(clksignal),
	.id_branchFlag6(id_branchFlag6),
	.id_haltFlag(id_haltFlag),
	.id_immediateFlag(id_immediateFlag),
	.id_labelFlag7(id_labelFlag7),
	.id_labelPassFlagOut(id_labelPassFlagOut),
	.id_labelValue(id_labelValue),
	.id_opcde1(id_opcde1),
	.id_outputPCResetFlag(id_outputPCResetFlag),
	.id_rd5(id_rd5),
	.id_readmem(id_readmem),
	.id_regwrite(id_regwrite),
	.id_rs3(id_rs3),
	.id_rt4(id_rt4),
	.id_signFlag(id_signFlag),
	.id_value2(id_value2),
	.id_writemem(id_writemem),
	.IFID_instructionOut(IFID_instructionOut),
	.IFID_labelPassFlagOut(IFID_labelPassFlagOut),
	.IFID_pcOut(IFID_pcOut),
	.IFID_pcResetFlagOut(IFID_pcResetFlagOut),
	.pcl_outPC(pcl_outPC),
	.romQ(romQ),
	.sampler_rx(sampler)
);
endmodule

