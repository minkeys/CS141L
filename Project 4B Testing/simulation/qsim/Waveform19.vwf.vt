// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/08/2015 18:41:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CS141L
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CS141L_vlg_sample_tst(
	in_id_clk,
	in_id_inputPCResetFlag,
	in_id_instruction,
	in_id_labelPassFlagIn,
	in_id_program_counter,
	sampler_tx
);
input  in_id_clk;
input  in_id_inputPCResetFlag;
input [7:0] in_id_instruction;
input  in_id_labelPassFlagIn;
input [7:0] in_id_program_counter;
output sampler_tx;

reg sample;
time current_time;
always @(in_id_clk or in_id_inputPCResetFlag or in_id_instruction or in_id_labelPassFlagIn or in_id_program_counter)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CS141L_vlg_check_tst (
	id_branchFlag,
	id_haltFlag,
	id_immediateFlag,
	id_labelFlag,
	id_labelPassFlagOut,
	id_labelValue,
	id_opcode,
	id_outputPCResetFlag,
	id_rd,
	id_readmem,
	id_regwrite,
	id_rs,
	id_rt,
	id_signFlag,
	id_value,
	id_writemem,
	sampler_rx
);
input  id_branchFlag;
input  id_haltFlag;
input  id_immediateFlag;
input  id_labelFlag;
input  id_labelPassFlagOut;
input [7:0] id_labelValue;
input [3:0] id_opcode;
input  id_outputPCResetFlag;
input [3:0] id_rd;
input  id_readmem;
input  id_regwrite;
input [3:0] id_rs;
input [3:0] id_rt;
input  id_signFlag;
input [7:0] id_value;
input  id_writemem;
input sampler_rx;

reg  id_branchFlag_expected;
reg  id_haltFlag_expected;
reg  id_immediateFlag_expected;
reg  id_labelFlag_expected;
reg  id_labelPassFlagOut_expected;
reg [7:0] id_labelValue_expected;
reg [3:0] id_opcode_expected;
reg  id_outputPCResetFlag_expected;
reg [3:0] id_rd_expected;
reg  id_readmem_expected;
reg  id_regwrite_expected;
reg [3:0] id_rs_expected;
reg [3:0] id_rt_expected;
reg  id_signFlag_expected;
reg [7:0] id_value_expected;
reg  id_writemem_expected;

reg  id_branchFlag_prev;
reg  id_haltFlag_prev;
reg  id_immediateFlag_prev;
reg  id_labelFlag_prev;
reg  id_labelPassFlagOut_prev;
reg [7:0] id_labelValue_prev;
reg [3:0] id_opcode_prev;
reg  id_outputPCResetFlag_prev;
reg [3:0] id_rd_prev;
reg  id_readmem_prev;
reg  id_regwrite_prev;
reg [3:0] id_rs_prev;
reg [3:0] id_rt_prev;
reg  id_signFlag_prev;
reg [7:0] id_value_prev;
reg  id_writemem_prev;

reg  id_branchFlag_expected_prev;
reg  id_haltFlag_expected_prev;
reg  id_immediateFlag_expected_prev;
reg  id_labelFlag_expected_prev;
reg  id_labelPassFlagOut_expected_prev;
reg [7:0] id_labelValue_expected_prev;
reg [3:0] id_opcode_expected_prev;
reg  id_outputPCResetFlag_expected_prev;
reg [3:0] id_rd_expected_prev;
reg  id_readmem_expected_prev;
reg  id_regwrite_expected_prev;
reg [3:0] id_rs_expected_prev;
reg [3:0] id_rt_expected_prev;
reg  id_signFlag_expected_prev;
reg [7:0] id_value_expected_prev;
reg  id_writemem_expected_prev;

reg  last_id_branchFlag_exp;
reg  last_id_haltFlag_exp;
reg  last_id_immediateFlag_exp;
reg  last_id_labelFlag_exp;
reg  last_id_labelPassFlagOut_exp;
reg [7:0] last_id_labelValue_exp;
reg [3:0] last_id_opcode_exp;
reg  last_id_outputPCResetFlag_exp;
reg [3:0] last_id_rd_exp;
reg  last_id_readmem_exp;
reg  last_id_regwrite_exp;
reg [3:0] last_id_rs_exp;
reg [3:0] last_id_rt_exp;
reg  last_id_signFlag_exp;
reg [7:0] last_id_value_exp;
reg  last_id_writemem_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	id_branchFlag_prev = id_branchFlag;
	id_haltFlag_prev = id_haltFlag;
	id_immediateFlag_prev = id_immediateFlag;
	id_labelFlag_prev = id_labelFlag;
	id_labelPassFlagOut_prev = id_labelPassFlagOut;
	id_labelValue_prev = id_labelValue;
	id_opcode_prev = id_opcode;
	id_outputPCResetFlag_prev = id_outputPCResetFlag;
	id_rd_prev = id_rd;
	id_readmem_prev = id_readmem;
	id_regwrite_prev = id_regwrite;
	id_rs_prev = id_rs;
	id_rt_prev = id_rt;
	id_signFlag_prev = id_signFlag;
	id_value_prev = id_value;
	id_writemem_prev = id_writemem;
end

// update expected /o prevs

always @(trigger)
begin
	id_branchFlag_expected_prev = id_branchFlag_expected;
	id_haltFlag_expected_prev = id_haltFlag_expected;
	id_immediateFlag_expected_prev = id_immediateFlag_expected;
	id_labelFlag_expected_prev = id_labelFlag_expected;
	id_labelPassFlagOut_expected_prev = id_labelPassFlagOut_expected;
	id_labelValue_expected_prev = id_labelValue_expected;
	id_opcode_expected_prev = id_opcode_expected;
	id_outputPCResetFlag_expected_prev = id_outputPCResetFlag_expected;
	id_rd_expected_prev = id_rd_expected;
	id_readmem_expected_prev = id_readmem_expected;
	id_regwrite_expected_prev = id_regwrite_expected;
	id_rs_expected_prev = id_rs_expected;
	id_rt_expected_prev = id_rt_expected;
	id_signFlag_expected_prev = id_signFlag_expected;
	id_value_expected_prev = id_value_expected;
	id_writemem_expected_prev = id_writemem_expected;
end



// expected id_branchFlag
initial
begin
	id_branchFlag_expected = 1'bX;
end 

// expected id_haltFlag
initial
begin
	id_haltFlag_expected = 1'bX;
end 

// expected id_immediateFlag
initial
begin
	id_immediateFlag_expected = 1'bX;
end 

// expected id_labelFlag
initial
begin
	id_labelFlag_expected = 1'bX;
end 

// expected id_labelPassFlagOut
initial
begin
	id_labelPassFlagOut_expected = 1'bX;
end 
// expected id_labelValue[ 7 ]
initial
begin
	id_labelValue_expected[7] = 1'bX;
end 
// expected id_labelValue[ 6 ]
initial
begin
	id_labelValue_expected[6] = 1'bX;
end 
// expected id_labelValue[ 5 ]
initial
begin
	id_labelValue_expected[5] = 1'bX;
end 
// expected id_labelValue[ 4 ]
initial
begin
	id_labelValue_expected[4] = 1'bX;
end 
// expected id_labelValue[ 3 ]
initial
begin
	id_labelValue_expected[3] = 1'bX;
end 
// expected id_labelValue[ 2 ]
initial
begin
	id_labelValue_expected[2] = 1'bX;
end 
// expected id_labelValue[ 1 ]
initial
begin
	id_labelValue_expected[1] = 1'bX;
end 
// expected id_labelValue[ 0 ]
initial
begin
	id_labelValue_expected[0] = 1'bX;
end 
// expected id_opcode[ 3 ]
initial
begin
	id_opcode_expected[3] = 1'bX;
end 
// expected id_opcode[ 2 ]
initial
begin
	id_opcode_expected[2] = 1'bX;
end 
// expected id_opcode[ 1 ]
initial
begin
	id_opcode_expected[1] = 1'bX;
end 
// expected id_opcode[ 0 ]
initial
begin
	id_opcode_expected[0] = 1'bX;
end 

// expected id_outputPCResetFlag
initial
begin
	id_outputPCResetFlag_expected = 1'bX;
end 
// expected id_rd[ 3 ]
initial
begin
	id_rd_expected[3] = 1'bX;
end 
// expected id_rd[ 2 ]
initial
begin
	id_rd_expected[2] = 1'bX;
end 
// expected id_rd[ 1 ]
initial
begin
	id_rd_expected[1] = 1'bX;
end 
// expected id_rd[ 0 ]
initial
begin
	id_rd_expected[0] = 1'bX;
end 

// expected id_readmem
initial
begin
	id_readmem_expected = 1'bX;
end 

// expected id_regwrite
initial
begin
	id_regwrite_expected = 1'bX;
end 
// expected id_rs[ 3 ]
initial
begin
	id_rs_expected[3] = 1'bX;
end 
// expected id_rs[ 2 ]
initial
begin
	id_rs_expected[2] = 1'bX;
end 
// expected id_rs[ 1 ]
initial
begin
	id_rs_expected[1] = 1'bX;
end 
// expected id_rs[ 0 ]
initial
begin
	id_rs_expected[0] = 1'bX;
end 
// expected id_rt[ 3 ]
initial
begin
	id_rt_expected[3] = 1'bX;
end 
// expected id_rt[ 2 ]
initial
begin
	id_rt_expected[2] = 1'bX;
end 
// expected id_rt[ 1 ]
initial
begin
	id_rt_expected[1] = 1'bX;
end 
// expected id_rt[ 0 ]
initial
begin
	id_rt_expected[0] = 1'bX;
end 

// expected id_signFlag
initial
begin
	id_signFlag_expected = 1'bX;
end 
// expected id_value[ 7 ]
initial
begin
	id_value_expected[7] = 1'bX;
end 
// expected id_value[ 6 ]
initial
begin
	id_value_expected[6] = 1'bX;
end 
// expected id_value[ 5 ]
initial
begin
	id_value_expected[5] = 1'bX;
end 
// expected id_value[ 4 ]
initial
begin
	id_value_expected[4] = 1'bX;
end 
// expected id_value[ 3 ]
initial
begin
	id_value_expected[3] = 1'bX;
end 
// expected id_value[ 2 ]
initial
begin
	id_value_expected[2] = 1'bX;
end 
// expected id_value[ 1 ]
initial
begin
	id_value_expected[1] = 1'bX;
end 
// expected id_value[ 0 ]
initial
begin
	id_value_expected[0] = 1'bX;
end 

// expected id_writemem
initial
begin
	id_writemem_expected = 1'bX;
end 
// generate trigger
always @(id_branchFlag_expected or id_branchFlag or id_haltFlag_expected or id_haltFlag or id_immediateFlag_expected or id_immediateFlag or id_labelFlag_expected or id_labelFlag or id_labelPassFlagOut_expected or id_labelPassFlagOut or id_labelValue_expected or id_labelValue or id_opcode_expected or id_opcode or id_outputPCResetFlag_expected or id_outputPCResetFlag or id_rd_expected or id_rd or id_readmem_expected or id_readmem or id_regwrite_expected or id_regwrite or id_rs_expected or id_rs or id_rt_expected or id_rt or id_signFlag_expected or id_signFlag or id_value_expected or id_value or id_writemem_expected or id_writemem)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected id_branchFlag = %b | expected id_haltFlag = %b | expected id_immediateFlag = %b | expected id_labelFlag = %b | expected id_labelPassFlagOut = %b | expected id_labelValue = %b | expected id_opcode = %b | expected id_outputPCResetFlag = %b | expected id_rd = %b | expected id_readmem = %b | expected id_regwrite = %b | expected id_rs = %b | expected id_rt = %b | expected id_signFlag = %b | expected id_value = %b | expected id_writemem = %b | ",id_branchFlag_expected_prev,id_haltFlag_expected_prev,id_immediateFlag_expected_prev,id_labelFlag_expected_prev,id_labelPassFlagOut_expected_prev,id_labelValue_expected_prev,id_opcode_expected_prev,id_outputPCResetFlag_expected_prev,id_rd_expected_prev,id_readmem_expected_prev,id_regwrite_expected_prev,id_rs_expected_prev,id_rt_expected_prev,id_signFlag_expected_prev,id_value_expected_prev,id_writemem_expected_prev);
	$display("| real id_branchFlag = %b | real id_haltFlag = %b | real id_immediateFlag = %b | real id_labelFlag = %b | real id_labelPassFlagOut = %b | real id_labelValue = %b | real id_opcode = %b | real id_outputPCResetFlag = %b | real id_rd = %b | real id_readmem = %b | real id_regwrite = %b | real id_rs = %b | real id_rt = %b | real id_signFlag = %b | real id_value = %b | real id_writemem = %b | ",id_branchFlag_prev,id_haltFlag_prev,id_immediateFlag_prev,id_labelFlag_prev,id_labelPassFlagOut_prev,id_labelValue_prev,id_opcode_prev,id_outputPCResetFlag_prev,id_rd_prev,id_readmem_prev,id_regwrite_prev,id_rs_prev,id_rt_prev,id_signFlag_prev,id_value_prev,id_writemem_prev);
`endif
	if (
		( id_branchFlag_expected_prev !== 1'bx ) && ( id_branchFlag_prev !== id_branchFlag_expected_prev )
		&& ((id_branchFlag_expected_prev !== last_id_branchFlag_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_branchFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_branchFlag_expected_prev);
		$display ("     Real value = %b", id_branchFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_id_branchFlag_exp = id_branchFlag_expected_prev;
	end
	if (
		( id_haltFlag_expected_prev !== 1'bx ) && ( id_haltFlag_prev !== id_haltFlag_expected_prev )
		&& ((id_haltFlag_expected_prev !== last_id_haltFlag_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_haltFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_haltFlag_expected_prev);
		$display ("     Real value = %b", id_haltFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_id_haltFlag_exp = id_haltFlag_expected_prev;
	end
	if (
		( id_immediateFlag_expected_prev !== 1'bx ) && ( id_immediateFlag_prev !== id_immediateFlag_expected_prev )
		&& ((id_immediateFlag_expected_prev !== last_id_immediateFlag_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_immediateFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_immediateFlag_expected_prev);
		$display ("     Real value = %b", id_immediateFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_id_immediateFlag_exp = id_immediateFlag_expected_prev;
	end
	if (
		( id_labelFlag_expected_prev !== 1'bx ) && ( id_labelFlag_prev !== id_labelFlag_expected_prev )
		&& ((id_labelFlag_expected_prev !== last_id_labelFlag_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelFlag_expected_prev);
		$display ("     Real value = %b", id_labelFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_id_labelFlag_exp = id_labelFlag_expected_prev;
	end
	if (
		( id_labelPassFlagOut_expected_prev !== 1'bx ) && ( id_labelPassFlagOut_prev !== id_labelPassFlagOut_expected_prev )
		&& ((id_labelPassFlagOut_expected_prev !== last_id_labelPassFlagOut_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelPassFlagOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelPassFlagOut_expected_prev);
		$display ("     Real value = %b", id_labelPassFlagOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_id_labelPassFlagOut_exp = id_labelPassFlagOut_expected_prev;
	end
	if (
		( id_labelValue_expected_prev[0] !== 1'bx ) && ( id_labelValue_prev[0] !== id_labelValue_expected_prev[0] )
		&& ((id_labelValue_expected_prev[0] !== last_id_labelValue_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_id_labelValue_exp[0] = id_labelValue_expected_prev[0];
	end
	if (
		( id_labelValue_expected_prev[1] !== 1'bx ) && ( id_labelValue_prev[1] !== id_labelValue_expected_prev[1] )
		&& ((id_labelValue_expected_prev[1] !== last_id_labelValue_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_id_labelValue_exp[1] = id_labelValue_expected_prev[1];
	end
	if (
		( id_labelValue_expected_prev[2] !== 1'bx ) && ( id_labelValue_prev[2] !== id_labelValue_expected_prev[2] )
		&& ((id_labelValue_expected_prev[2] !== last_id_labelValue_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_id_labelValue_exp[2] = id_labelValue_expected_prev[2];
	end
	if (
		( id_labelValue_expected_prev[3] !== 1'bx ) && ( id_labelValue_prev[3] !== id_labelValue_expected_prev[3] )
		&& ((id_labelValue_expected_prev[3] !== last_id_labelValue_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_id_labelValue_exp[3] = id_labelValue_expected_prev[3];
	end
	if (
		( id_labelValue_expected_prev[4] !== 1'bx ) && ( id_labelValue_prev[4] !== id_labelValue_expected_prev[4] )
		&& ((id_labelValue_expected_prev[4] !== last_id_labelValue_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_id_labelValue_exp[4] = id_labelValue_expected_prev[4];
	end
	if (
		( id_labelValue_expected_prev[5] !== 1'bx ) && ( id_labelValue_prev[5] !== id_labelValue_expected_prev[5] )
		&& ((id_labelValue_expected_prev[5] !== last_id_labelValue_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_id_labelValue_exp[5] = id_labelValue_expected_prev[5];
	end
	if (
		( id_labelValue_expected_prev[6] !== 1'bx ) && ( id_labelValue_prev[6] !== id_labelValue_expected_prev[6] )
		&& ((id_labelValue_expected_prev[6] !== last_id_labelValue_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_id_labelValue_exp[6] = id_labelValue_expected_prev[6];
	end
	if (
		( id_labelValue_expected_prev[7] !== 1'bx ) && ( id_labelValue_prev[7] !== id_labelValue_expected_prev[7] )
		&& ((id_labelValue_expected_prev[7] !== last_id_labelValue_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_labelValue[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_labelValue_expected_prev);
		$display ("     Real value = %b", id_labelValue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_id_labelValue_exp[7] = id_labelValue_expected_prev[7];
	end
	if (
		( id_opcode_expected_prev[0] !== 1'bx ) && ( id_opcode_prev[0] !== id_opcode_expected_prev[0] )
		&& ((id_opcode_expected_prev[0] !== last_id_opcode_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_opcode_expected_prev);
		$display ("     Real value = %b", id_opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_id_opcode_exp[0] = id_opcode_expected_prev[0];
	end
	if (
		( id_opcode_expected_prev[1] !== 1'bx ) && ( id_opcode_prev[1] !== id_opcode_expected_prev[1] )
		&& ((id_opcode_expected_prev[1] !== last_id_opcode_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_opcode_expected_prev);
		$display ("     Real value = %b", id_opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_id_opcode_exp[1] = id_opcode_expected_prev[1];
	end
	if (
		( id_opcode_expected_prev[2] !== 1'bx ) && ( id_opcode_prev[2] !== id_opcode_expected_prev[2] )
		&& ((id_opcode_expected_prev[2] !== last_id_opcode_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_opcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_opcode_expected_prev);
		$display ("     Real value = %b", id_opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_id_opcode_exp[2] = id_opcode_expected_prev[2];
	end
	if (
		( id_opcode_expected_prev[3] !== 1'bx ) && ( id_opcode_prev[3] !== id_opcode_expected_prev[3] )
		&& ((id_opcode_expected_prev[3] !== last_id_opcode_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_opcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_opcode_expected_prev);
		$display ("     Real value = %b", id_opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_id_opcode_exp[3] = id_opcode_expected_prev[3];
	end
	if (
		( id_outputPCResetFlag_expected_prev !== 1'bx ) && ( id_outputPCResetFlag_prev !== id_outputPCResetFlag_expected_prev )
		&& ((id_outputPCResetFlag_expected_prev !== last_id_outputPCResetFlag_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_outputPCResetFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_outputPCResetFlag_expected_prev);
		$display ("     Real value = %b", id_outputPCResetFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_id_outputPCResetFlag_exp = id_outputPCResetFlag_expected_prev;
	end
	if (
		( id_rd_expected_prev[0] !== 1'bx ) && ( id_rd_prev[0] !== id_rd_expected_prev[0] )
		&& ((id_rd_expected_prev[0] !== last_id_rd_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rd_expected_prev);
		$display ("     Real value = %b", id_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_id_rd_exp[0] = id_rd_expected_prev[0];
	end
	if (
		( id_rd_expected_prev[1] !== 1'bx ) && ( id_rd_prev[1] !== id_rd_expected_prev[1] )
		&& ((id_rd_expected_prev[1] !== last_id_rd_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rd_expected_prev);
		$display ("     Real value = %b", id_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_id_rd_exp[1] = id_rd_expected_prev[1];
	end
	if (
		( id_rd_expected_prev[2] !== 1'bx ) && ( id_rd_prev[2] !== id_rd_expected_prev[2] )
		&& ((id_rd_expected_prev[2] !== last_id_rd_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rd_expected_prev);
		$display ("     Real value = %b", id_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_id_rd_exp[2] = id_rd_expected_prev[2];
	end
	if (
		( id_rd_expected_prev[3] !== 1'bx ) && ( id_rd_prev[3] !== id_rd_expected_prev[3] )
		&& ((id_rd_expected_prev[3] !== last_id_rd_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rd_expected_prev);
		$display ("     Real value = %b", id_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_id_rd_exp[3] = id_rd_expected_prev[3];
	end
	if (
		( id_readmem_expected_prev !== 1'bx ) && ( id_readmem_prev !== id_readmem_expected_prev )
		&& ((id_readmem_expected_prev !== last_id_readmem_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_readmem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_readmem_expected_prev);
		$display ("     Real value = %b", id_readmem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_id_readmem_exp = id_readmem_expected_prev;
	end
	if (
		( id_regwrite_expected_prev !== 1'bx ) && ( id_regwrite_prev !== id_regwrite_expected_prev )
		&& ((id_regwrite_expected_prev !== last_id_regwrite_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_regwrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_regwrite_expected_prev);
		$display ("     Real value = %b", id_regwrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_id_regwrite_exp = id_regwrite_expected_prev;
	end
	if (
		( id_rs_expected_prev[0] !== 1'bx ) && ( id_rs_prev[0] !== id_rs_expected_prev[0] )
		&& ((id_rs_expected_prev[0] !== last_id_rs_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rs_expected_prev);
		$display ("     Real value = %b", id_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_id_rs_exp[0] = id_rs_expected_prev[0];
	end
	if (
		( id_rs_expected_prev[1] !== 1'bx ) && ( id_rs_prev[1] !== id_rs_expected_prev[1] )
		&& ((id_rs_expected_prev[1] !== last_id_rs_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rs_expected_prev);
		$display ("     Real value = %b", id_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_id_rs_exp[1] = id_rs_expected_prev[1];
	end
	if (
		( id_rs_expected_prev[2] !== 1'bx ) && ( id_rs_prev[2] !== id_rs_expected_prev[2] )
		&& ((id_rs_expected_prev[2] !== last_id_rs_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rs_expected_prev);
		$display ("     Real value = %b", id_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_id_rs_exp[2] = id_rs_expected_prev[2];
	end
	if (
		( id_rs_expected_prev[3] !== 1'bx ) && ( id_rs_prev[3] !== id_rs_expected_prev[3] )
		&& ((id_rs_expected_prev[3] !== last_id_rs_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rs[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rs_expected_prev);
		$display ("     Real value = %b", id_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_id_rs_exp[3] = id_rs_expected_prev[3];
	end
	if (
		( id_rt_expected_prev[0] !== 1'bx ) && ( id_rt_prev[0] !== id_rt_expected_prev[0] )
		&& ((id_rt_expected_prev[0] !== last_id_rt_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rt_expected_prev);
		$display ("     Real value = %b", id_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_id_rt_exp[0] = id_rt_expected_prev[0];
	end
	if (
		( id_rt_expected_prev[1] !== 1'bx ) && ( id_rt_prev[1] !== id_rt_expected_prev[1] )
		&& ((id_rt_expected_prev[1] !== last_id_rt_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rt_expected_prev);
		$display ("     Real value = %b", id_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_id_rt_exp[1] = id_rt_expected_prev[1];
	end
	if (
		( id_rt_expected_prev[2] !== 1'bx ) && ( id_rt_prev[2] !== id_rt_expected_prev[2] )
		&& ((id_rt_expected_prev[2] !== last_id_rt_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rt_expected_prev);
		$display ("     Real value = %b", id_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_id_rt_exp[2] = id_rt_expected_prev[2];
	end
	if (
		( id_rt_expected_prev[3] !== 1'bx ) && ( id_rt_prev[3] !== id_rt_expected_prev[3] )
		&& ((id_rt_expected_prev[3] !== last_id_rt_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_rt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_rt_expected_prev);
		$display ("     Real value = %b", id_rt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_id_rt_exp[3] = id_rt_expected_prev[3];
	end
	if (
		( id_signFlag_expected_prev !== 1'bx ) && ( id_signFlag_prev !== id_signFlag_expected_prev )
		&& ((id_signFlag_expected_prev !== last_id_signFlag_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_signFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_signFlag_expected_prev);
		$display ("     Real value = %b", id_signFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_id_signFlag_exp = id_signFlag_expected_prev;
	end
	if (
		( id_value_expected_prev[0] !== 1'bx ) && ( id_value_prev[0] !== id_value_expected_prev[0] )
		&& ((id_value_expected_prev[0] !== last_id_value_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value_expected_prev);
		$display ("     Real value = %b", id_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_id_value_exp[0] = id_value_expected_prev[0];
	end
	if (
		( id_value_expected_prev[1] !== 1'bx ) && ( id_value_prev[1] !== id_value_expected_prev[1] )
		&& ((id_value_expected_prev[1] !== last_id_value_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value_expected_prev);
		$display ("     Real value = %b", id_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_id_value_exp[1] = id_value_expected_prev[1];
	end
	if (
		( id_value_expected_prev[2] !== 1'bx ) && ( id_value_prev[2] !== id_value_expected_prev[2] )
		&& ((id_value_expected_prev[2] !== last_id_value_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value_expected_prev);
		$display ("     Real value = %b", id_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_id_value_exp[2] = id_value_expected_prev[2];
	end
	if (
		( id_value_expected_prev[3] !== 1'bx ) && ( id_value_prev[3] !== id_value_expected_prev[3] )
		&& ((id_value_expected_prev[3] !== last_id_value_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value_expected_prev);
		$display ("     Real value = %b", id_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_id_value_exp[3] = id_value_expected_prev[3];
	end
	if (
		( id_value_expected_prev[4] !== 1'bx ) && ( id_value_prev[4] !== id_value_expected_prev[4] )
		&& ((id_value_expected_prev[4] !== last_id_value_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value_expected_prev);
		$display ("     Real value = %b", id_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_id_value_exp[4] = id_value_expected_prev[4];
	end
	if (
		( id_value_expected_prev[5] !== 1'bx ) && ( id_value_prev[5] !== id_value_expected_prev[5] )
		&& ((id_value_expected_prev[5] !== last_id_value_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value_expected_prev);
		$display ("     Real value = %b", id_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_id_value_exp[5] = id_value_expected_prev[5];
	end
	if (
		( id_value_expected_prev[6] !== 1'bx ) && ( id_value_prev[6] !== id_value_expected_prev[6] )
		&& ((id_value_expected_prev[6] !== last_id_value_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value_expected_prev);
		$display ("     Real value = %b", id_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_id_value_exp[6] = id_value_expected_prev[6];
	end
	if (
		( id_value_expected_prev[7] !== 1'bx ) && ( id_value_prev[7] !== id_value_expected_prev[7] )
		&& ((id_value_expected_prev[7] !== last_id_value_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_value_expected_prev);
		$display ("     Real value = %b", id_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_id_value_exp[7] = id_value_expected_prev[7];
	end
	if (
		( id_writemem_expected_prev !== 1'bx ) && ( id_writemem_prev !== id_writemem_expected_prev )
		&& ((id_writemem_expected_prev !== last_id_writemem_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id_writemem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id_writemem_expected_prev);
		$display ("     Real value = %b", id_writemem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_id_writemem_exp = id_writemem_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CS141L_vlg_vec_tst();
// constants                                           
// general purpose registers
reg in_id_clk;
reg in_id_inputPCResetFlag;
reg [7:0] in_id_instruction;
reg in_id_labelPassFlagIn;
reg [7:0] in_id_program_counter;
// wires                                               
wire id_branchFlag;
wire id_haltFlag;
wire id_immediateFlag;
wire id_labelFlag;
wire id_labelPassFlagOut;
wire [7:0] id_labelValue;
wire [3:0] id_opcode;
wire id_outputPCResetFlag;
wire [3:0] id_rd;
wire id_readmem;
wire id_regwrite;
wire [3:0] id_rs;
wire [3:0] id_rt;
wire id_signFlag;
wire [7:0] id_value;
wire id_writemem;

wire sampler;                             

// assign statements (if any)                          
CS141L i1 (
// port map - connection between master ports and signals/registers   
	.id_branchFlag(id_branchFlag),
	.id_haltFlag(id_haltFlag),
	.id_immediateFlag(id_immediateFlag),
	.id_labelFlag(id_labelFlag),
	.id_labelPassFlagOut(id_labelPassFlagOut),
	.id_labelValue(id_labelValue),
	.id_opcode(id_opcode),
	.id_outputPCResetFlag(id_outputPCResetFlag),
	.id_rd(id_rd),
	.id_readmem(id_readmem),
	.id_regwrite(id_regwrite),
	.id_rs(id_rs),
	.id_rt(id_rt),
	.id_signFlag(id_signFlag),
	.id_value(id_value),
	.id_writemem(id_writemem),
	.in_id_clk(in_id_clk),
	.in_id_inputPCResetFlag(in_id_inputPCResetFlag),
	.in_id_instruction(in_id_instruction),
	.in_id_labelPassFlagIn(in_id_labelPassFlagIn),
	.in_id_program_counter(in_id_program_counter)
);

// in_id_clk
always
begin
	in_id_clk = 1'b0;
	in_id_clk = #5000 1'b1;
	#5000;
end 

// in_id_inputPCResetFlag
initial
begin
	in_id_inputPCResetFlag = 1'b1;
	in_id_inputPCResetFlag = #160000 1'b0;
end 
// in_id_instruction[ 7 ]
initial
begin
	in_id_instruction[7] = 1'b0;
	in_id_instruction[7] = #2560000 1'b1;
	in_id_instruction[7] = #2560000 1'b0;
	in_id_instruction[7] = #2560000 1'b1;
end 
// in_id_instruction[ 6 ]
initial
begin
	repeat(3)
	begin
		in_id_instruction[6] = 1'b0;
		in_id_instruction[6] = #1280000 1'b1;
		# 1280000;
	end
	in_id_instruction[6] = 1'b0;
	in_id_instruction[6] = #1280000 1'b1;
end 
// in_id_instruction[ 5 ]
initial
begin
	repeat(7)
	begin
		in_id_instruction[5] = 1'b0;
		in_id_instruction[5] = #640000 1'b1;
		# 640000;
	end
	in_id_instruction[5] = 1'b0;
	in_id_instruction[5] = #640000 1'b1;
end 
// in_id_instruction[ 4 ]
initial
begin
	repeat(15)
	begin
		in_id_instruction[4] = 1'b0;
		in_id_instruction[4] = #320000 1'b1;
		# 320000;
	end
	in_id_instruction[4] = 1'b0;
	in_id_instruction[4] = #320000 1'b1;
end 
// in_id_instruction[ 3 ]
initial
begin
	repeat(31)
	begin
		in_id_instruction[3] = 1'b0;
		in_id_instruction[3] = #160000 1'b1;
		# 160000;
	end
	in_id_instruction[3] = 1'b0;
end 
// in_id_instruction[ 2 ]
initial
begin
	repeat(62)
	begin
		in_id_instruction[2] = 1'b0;
		in_id_instruction[2] = #80000 1'b1;
		# 80000;
	end
	in_id_instruction[2] = 1'b0;
end 
// in_id_instruction[ 1 ]
always
begin
	in_id_instruction[1] = 1'b0;
	in_id_instruction[1] = #40000 1'b1;
	#40000;
end 
// in_id_instruction[ 0 ]
always
begin
	in_id_instruction[0] = 1'b0;
	in_id_instruction[0] = #20000 1'b1;
	#20000;
end 

// in_id_labelPassFlagIn
initial
begin
	in_id_labelPassFlagIn = 1'b0;
end 
// in_id_program_counter[ 7 ]
initial
begin
	in_id_program_counter[7] = 1'b0;
end 
// in_id_program_counter[ 6 ]
initial
begin
	in_id_program_counter[6] = 1'b0;
end 
// in_id_program_counter[ 5 ]
initial
begin
	in_id_program_counter[5] = 1'b0;
end 
// in_id_program_counter[ 4 ]
initial
begin
	in_id_program_counter[4] = 1'b0;
end 
// in_id_program_counter[ 3 ]
initial
begin
	in_id_program_counter[3] = 1'b0;
end 
// in_id_program_counter[ 2 ]
initial
begin
	in_id_program_counter[2] = 1'b0;
end 
// in_id_program_counter[ 1 ]
initial
begin
	in_id_program_counter[1] = 1'b0;
end 
// in_id_program_counter[ 0 ]
initial
begin
	in_id_program_counter[0] = 1'b0;
end 

CS141L_vlg_sample_tst tb_sample (
	.in_id_clk(in_id_clk),
	.in_id_inputPCResetFlag(in_id_inputPCResetFlag),
	.in_id_instruction(in_id_instruction),
	.in_id_labelPassFlagIn(in_id_labelPassFlagIn),
	.in_id_program_counter(in_id_program_counter),
	.sampler_tx(sampler)
);

CS141L_vlg_check_tst tb_out(
	.id_branchFlag(id_branchFlag),
	.id_haltFlag(id_haltFlag),
	.id_immediateFlag(id_immediateFlag),
	.id_labelFlag(id_labelFlag),
	.id_labelPassFlagOut(id_labelPassFlagOut),
	.id_labelValue(id_labelValue),
	.id_opcode(id_opcode),
	.id_outputPCResetFlag(id_outputPCResetFlag),
	.id_rd(id_rd),
	.id_readmem(id_readmem),
	.id_regwrite(id_regwrite),
	.id_rs(id_rs),
	.id_rt(id_rt),
	.id_signFlag(id_signFlag),
	.id_value(id_value),
	.id_writemem(id_writemem),
	.sampler_rx(sampler)
);
endmodule

